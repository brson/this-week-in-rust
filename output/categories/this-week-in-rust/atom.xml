<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="http://this-week-in-rust.org/" rel="alternate"></link><link href="http://this-week-in-rust.org/categories/this-week-in-rust/atom.xml" rel="self"></link><id>http://this-week-in-rust.org/</id><updated>2014-11-10T00:00:00-05:00</updated><entry><title>This Week in Rust 56</title><link href="http://this-week-in-rust.org/blog/2014/11/10/this-week-in-rust-56/" rel="alternate"></link><updated>2014-11-10T00:00:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-11-10:blog/2014/11/10/this-week-in-rust-56/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This issue brought to you by the fantastic &lt;a href="https://github.com/brson/"&gt;Brian
Anderson&lt;/a&gt; and &lt;a href="https://github.com/Gankro/"&gt;Alexis Beingessner&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;101 pull requests were &lt;a href="https://github.com/rust-lang/rust/pulls?q=is%3Apr+is%3Amerged+updated%3A2014-11-03..2014-11-10"&gt;merged in the last week&lt;/a&gt;. Woo!&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/16156"&gt;Flexible target specification&lt;/a&gt; has finally landed. This makes
  it much easier to create custom toolchains for unsupported
  platforms. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0131-target-specification.md"&gt;RFC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/17753"&gt;Error interoperation&lt;/a&gt; improves the ergonomics of error
  handling when multiple error types are involved. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0201-error-chaining.md"&gt;RFC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rtio&lt;/code&gt; abstraction layer that supported I/O on green threads
  &lt;a href="https://github.com/rust-lang/rust/pull/18557"&gt;has been removed&lt;/a&gt;. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0230-remove-runtime.md"&gt;RFC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There has been a minor breaking change to the &lt;a href="https://github.com/rust-lang/rust/pull/17595"&gt;serialization of
  tuples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Minor &lt;a href="https://github.com/rust-lang/rust/pull/17830"&gt;changes to macro interpolation&lt;/a&gt; have resulted the
  removal the &lt;code&gt;$foo:matchers&lt;/code&gt; type of &lt;code&gt;macro_rules!&lt;/code&gt; argument.&lt;/li&gt;
&lt;li&gt;Socket construction is now more flexibly done through a
  &lt;a href="https://github.com/rust-lang/rust/pull/18462"&gt;ToSocketAddr&lt;/a&gt; type.&lt;/li&gt;
&lt;li&gt;Some changes have been made to the &lt;a href="https://github.com/rust-lang/rust/pull/18463"&gt;BytesContainer&lt;/a&gt;, which is used
  to construct &lt;code&gt;Path&lt;/code&gt;s, causing breakage is some cases.&lt;/li&gt;
&lt;li&gt;The comparision types have been &lt;a href="https://github.com/rust-lang/rust/pull/18467"&gt;updated for DST&lt;/a&gt;, resulting in
  changes to how they are invoked for references to unsized types
  (i.e. &lt;code&gt;&amp;amp;str&lt;/code&gt; and &lt;code&gt;&amp;amp;[T]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;As part of the recent &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0235-collections-conventions.md"&gt;collections overhaul&lt;/a&gt;, the prelude
  now contains a &lt;a href="https://github.com/rust-lang/rust/pull/18468"&gt;repeat&lt;/a&gt; function that returns an iterator that
  repeatedly yields the same value.&lt;/li&gt;
&lt;li&gt;Some changes to make &lt;a href="https://github.com/rust-lang/rust/pull/18486"&gt;overloaded operators&lt;/a&gt; behave more
  consistently will cause some previous code to break.&lt;/li&gt;
&lt;li&gt;The collections crate has seen &lt;a href="https://github.com/rust-lang/rust/pull/18519"&gt;major refactorings&lt;/a&gt; and
  &lt;a href="https://github.com/rust-lang/rust/pull/18605"&gt;updates&lt;/a&gt; as part of the &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0235-collections-conventions.md"&gt;collections
  overhaul&lt;/a&gt;. There was additional discussion about the
  impact on &lt;a href="https://www.reddit.com/r/rust/comments/2ljfnd/warning_some_collection_methods_have_had_their/"&gt;reddit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The json crate &lt;a href="https://github.com/rust-lang/rust/pull/18544"&gt;works with string slices instead of strings&lt;/a&gt;,
  and now overloads the index operator.&lt;/li&gt;
&lt;li&gt;A number of prelude traits have been &lt;a href="https://github.com/rust-lang/rust/pull/18559"&gt;renamed and consolidated&lt;/a&gt;
  as fallout from DST and to conform to new [conventions]. This should
  not break much code as these traits are rarely named explicitly.&lt;/li&gt;
&lt;li&gt;The rlibc crate, which provides a few libc functions expected to
  exist by LLVM's code generation, and is only useful for freestanding
  Rust projects, has been &lt;a href="https://github.com/rust-lang/rust/pull/18625"&gt;moved out of the main rust
  distribution&lt;/a&gt;, and now must be &lt;a href="https://github.com/rust-lang/rlibc"&gt;installed via
  cargo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New &lt;a href="https://github.com/rust-lang/rust/pull/18388"&gt;blanket impls&lt;/a&gt; of the unboxed closure types allow them to
  interoperate.  See
  &lt;a href="https://github.com/rust-lang/rust/blob/master/src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs"&gt;test&lt;/a&gt;
  &lt;a href="https://github.com/rust-lang/rust/blob/master/src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs"&gt;cases&lt;/a&gt;
  for examples.&lt;/li&gt;
&lt;li&gt;impls can now be &lt;a href="https://github.com/rust-lang/rust/pull/18447"&gt;defined on trait objects&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;P1start has been &lt;a href="https://github.com/rust-lang/rust/pull/18132"&gt;converting&lt;/a&gt; compiler messages that provide
  suggestions from 'notes' to 'help' messages.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/rust-lang/rust/pull/18206"&gt;&lt;code&gt;exceeding_bitshifts&lt;/code&gt;&lt;/a&gt; lint catches overlong shifts
  (which are currently undefined behavior) of static size. Due to
  &lt;a href="https://github.com/rust-lang/rust/pull/18593"&gt;bugs&lt;/a&gt; it is set to 'allow' be default.&lt;/li&gt;
&lt;li&gt;Ariel &lt;a href="https://github.com/rust-lang/rust/pull/18318"&gt;removed&lt;/a&gt; a bunch of unsafe code from the
  compiler. Yay!&lt;/li&gt;
&lt;li&gt;A new &lt;code&gt;-l&lt;/code&gt; &lt;a href="https://github.com/rust-lang/rust/pull/18470"&gt;flag&lt;/a&gt; to the compiler has been added to specify linkage
  to native libraries, primarily for use by cargo. In the same PR,
  &lt;code&gt;include!&lt;/code&gt; was updated to expand its arguments, allowing cargo to do
  for more complex compile-time code generation. &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0403-cargo-build-command.md"&gt;RFC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#![cfg]&lt;/code&gt; and &lt;code&gt;#[cfg_attr]&lt;/code&gt; &lt;a href="https://github.com/rust-lang/rust/pull/18634"&gt;can be applied to crates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On x86 Linux, random number generation now &lt;a href="https://github.com/rust-lang/rust/pull/18664"&gt;prefers&lt;/a&gt; the new
  [&lt;code&gt;getrandom&lt;/code&gt;] syscall.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cristi Burcă&lt;/li&gt;
&lt;li&gt;juxiliary&lt;/li&gt;
&lt;li&gt;Nathan Zadoks&lt;/li&gt;
&lt;li&gt;qwitwa&lt;/li&gt;
&lt;li&gt;Sean Jensen-Grey&lt;/li&gt;
&lt;li&gt;Subhash Bhushan&lt;/li&gt;
&lt;li&gt;thiagopnts&lt;/li&gt;
&lt;li&gt;tshakah&lt;/li&gt;
&lt;li&gt;Vitali Haravy&lt;/li&gt;
&lt;li&gt;Vladimir Matveev&lt;/li&gt;
&lt;li&gt;whataloadofwhat&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Approved RFC's&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0369-num-reform.md"&gt;Num reform&lt;/a&gt;: Strips down &lt;code&gt;std::num&lt;/code&gt; to minimally support generic primitive numbers, without supporting a full mathematical hierarchy.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0387-higher-ranked-trait-bounds.md"&gt;Higher-ranked trait bounds&lt;/a&gt;: Add the ability to have trait bounds that are polymorphic over lifetimes. Necessary for unboxed closures.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0418-struct-variants.md"&gt;un-feature-gating struct variants&lt;/a&gt;: Woo!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0192-bounds-on-object-and-generic-types.md"&gt;Multiple lifetime bounds&lt;/a&gt;: Removes special cases from the type system and allows more complex lifetime relationships to be expressed that were previously only inferable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;New RFC's&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/453"&gt;Macro reform&lt;/a&gt;: Prepares macros for 1.0 stabilization. Renames &lt;code&gt;macro_rules!&lt;/code&gt; to &lt;code&gt;macro!&lt;/code&gt;, and introduces more robust support for module importing and exporting.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/452"&gt;Change integer fallback RFC to suggest &lt;code&gt;i32&lt;/code&gt; instead of &lt;code&gt;int&lt;/code&gt; as the fallback&lt;/a&gt;: Changes the fallback for performance and portability.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/450"&gt;Un-feature-gate if let and tuple indexing&lt;/a&gt;: The features are well-behaved and used by many projects; ship 'em!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/447"&gt;Prohibit unused type parameters in impls&lt;/a&gt;: Require that every impl type parameter appears textually within the input type parameters of the trait reference or the impl self type.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/446"&gt;ES6-style unicode string escaping&lt;/a&gt;: Remove &lt;code&gt;\u203D&lt;/code&gt; and &lt;code&gt;\U0001F4A9&lt;/code&gt; unicode string escapes, and add ECMAScript 6-style &lt;code&gt;\u{1F4A9}&lt;/code&gt; escapes instead. Strong positive feedback, some concern with how it interacts with format strings.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/445"&gt;extension trait conventions&lt;/a&gt;: Establishes a definition and naming convention for extension traits: traits which aren't intended for generic programing, but instead extending existing types. If extending a &lt;code&gt;Foo&lt;/code&gt;, use &lt;code&gt;FooExt&lt;/code&gt;. If Extending a &lt;code&gt;Foo&lt;/code&gt; when it impls another trait like &lt;code&gt;Add&lt;/code&gt;, use &lt;code&gt;FooAddExt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/439"&gt;cmp and ops reform&lt;/a&gt;: Refactors &lt;code&gt;Cmp&lt;/code&gt; and the operator overloading traits. Generally positive feedback. Highlights include:&lt;ul&gt;
&lt;li&gt;Make basic unary and binary operators work by value and use associated types.&lt;/li&gt;
&lt;li&gt;Generalize comparison operators to work across different types; drop Equiv.&lt;/li&gt;
&lt;li&gt;Refactor slice notation in favor of range notation so that special traits are no longer needed.&lt;/li&gt;
&lt;li&gt;Add IndexSet to better support maps.&lt;/li&gt;
&lt;li&gt;Clarify ownership semantics throughout.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/438"&gt;Change precedence of &lt;code&gt;+&lt;/code&gt; in type grammar&lt;/a&gt;: Update type grammar to make &lt;code&gt;+&lt;/code&gt; have lower precedence, consistent with the expression grammar, resolving a grammatical ambiguity.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/435"&gt;Relocate and improve c_str&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;Move the c_str module out of std to rid the latter of type dependencies on libc.&lt;/li&gt;
&lt;li&gt;Split the current CString into a low-level type CStrBuf and a length-aware CString to make computation costs explicit.&lt;/li&gt;
&lt;li&gt;Provide custom destructors and purpose-specific, mnemonically named constructors.&lt;/li&gt;
&lt;li&gt;Add some methods and trait implementations to make the types more useful.&lt;/li&gt;
&lt;li&gt;Remove the Clone implementation due to lack of purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/431"&gt;rename &lt;code&gt;lifetime&lt;/code&gt; to &lt;code&gt;scope&lt;/code&gt;&lt;/a&gt;: Highly controversial. Some community members argue that this change in terminology has been much more effective when introducing the actual concepts to newbies. Others argue that scope is already a well established concept in programming languages.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/430"&gt;Finalizing more naming conventions&lt;/a&gt;: finalizes a few long-running de facto conventions, including capitalization/underscores, and the role of the unwrap method. Generally positive feedback, some discussion of naming consts like enum variants.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/456"&gt;Reserve macro identifiers&lt;/a&gt;: Preemptively reserve a class of $ identifiers for allowing backwards compatible improvements to the macro system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community&lt;/h1&gt;
&lt;h2&gt;From the Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/meeting-minutes/blob/master/weekly-meetings/2014-11-04.md"&gt;Weekly-meetings/2014-11-04 (macros; multiple lifetime bounds; macro invocation syntax; higher-ranked trait bounds; pub trait methods; out-of-sync nightlies; struct variants; numerics)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/meeting-minutes/blob/master/weekly-meetings/2014-11-04.md"&gt;Discuss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2lrt7b/weeklymeetings20141104_macros_multiple_lifetime/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/meeting-minutes/blob/master/weekly-meetings/2014-10-30.md"&gt;Weekly-meetings/2014-10-30 (error conventions; cargo; namespaced enums; trait-based error handling; macro unification; coercions; dynamic linking, byte literals, failing dtors)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/weekly-meetings-2014-10-30-error-conventions-cargo-namespaced-enums-trait-based-error-handling-macro-unification-coercions-dynamic-linking-byte-literals-failing-dtors/734"&gt;Discuss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2kuppu/weeklymeetings20141030_error_conventions_cargo/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/irc-notifications-now-going-to-rust-bots/735"&gt;IRC notifications now going to #rust-bots&lt;/a&gt;: If you have a bot you'd like to post here (which would be awesome!) please add a description and contact to &lt;a href="https://github.com/rust-lang/rust/wiki/IRC-notifications-channel"&gt;the wiki page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.rust-lang.org/2014/10/30/Stability.html"&gt;Stability as a Deliverable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/an-introduction-to-servo/"&gt;An introduction to Servo&lt;/a&gt;: Lars Bergstrom from the Research team provides an overview of the Servo project, demonstrates its current status, and shows how to contribute to it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/bay-area-rust-meetup-november-2014/"&gt;November's Bay Area meetup&lt;/a&gt; happened
  on Thursday, featuring five presentations about Servo and browser architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.servo.org/2014/11/04/twis-10/"&gt;This Week In Servo (10)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://erickt.github.io/blog/2014/11/03/performance/"&gt;Rewriting Rust Serialization, Part 2: Performance&lt;/a&gt;: A quick look at how Rust's JSON serialization performance compares to other languages and protocols.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2014/11/6/error-handling-in-rust/"&gt;Improved Error Handling in Rust&lt;/a&gt;: Some discussion of how Rust currently and theoretically handles erroes.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2014/10/30/dont-panic/"&gt;Don't Panic! The Hitchhiker's Guide to Unwinding&lt;/a&gt;: A nice discussion of the challenges of safe and ergonomic error handling, and how it relates to stack unwinding.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://limpet.net/mbrubeck/2014/11/05/toy-layout-engine-7-painting.html"&gt;Let's build a browser engine! Part 7: Painting 101&lt;/a&gt;: Part of a longer series on writing a browser engine in Rust. &lt;em&gt;In this article, I will add very basic painting code.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cjqed.com/blog/rust-pattern-matching-performance/"&gt;On pattern matching performance in Rust&lt;/a&gt;: A quick look at how the &lt;code&gt;match&lt;/code&gt; statement can produce really efficient code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@adamhjk/rust-and-go-e18d511fbd95"&gt;Rust and Go&lt;/a&gt;: A quick look at Rust and Go from the perspective of a sysadmin used to high-level programming languages. &lt;a href="https://www.reddit.com/r/rust/comments/2lmhpd/rust_and_go/"&gt;Reddit&lt;/a&gt;. &lt;a href="http://news.ycombinator.com/item?id=8574184"&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://foon.uk/rust.html"&gt;Learning Rust&lt;/a&gt;: &lt;em&gt;Inspired by Artyom's Learning Racket series, I've decided to log my efforts in learning Rust. I'm going to document my learning process as I go about trying to build a roguelike in Rust. I've downloaded the compiler, skimmed the getting started guide, and written “Hello World”. So let's get started!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Discuss&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/pre-rfc-placement-box-with-placer-trait/729/6"&gt;Pre-RFC: placement box with Placer
  trait&lt;/a&gt;:
  Add user-defined placement box expression (more succinctly, "a box
  expression"), an operator analogous to "placement new" in C++. This
  provides a way for a user to specify (1.) how the backing storage
  for some datum should be allocated, (2.) that the allocation should
  be ordered before the evaluation of the datum, and (3.) that the
  datum should preferably be stored directly into the backing storage
  (rather than temporary storage on the stack and then copying the
  datum from the stack into the backing storage).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/forbid-unsigned-integer/752"&gt;Forbid -(unsigned integer)&lt;/a&gt;: the eternal struggle continues. It's super handy when you want it, but also a common error to make.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/moving-all-built-in-macros-to-plugins/737"&gt;Moving all built-in macros to plugins&lt;/a&gt;: Another proposal to handle some of the issues with macros for 1.0. May make it easier to bootstrap changes to the compiler.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/lifetime-notation/751"&gt;Lifetime Notation&lt;/a&gt;: &lt;code&gt;&amp;amp;'a&lt;/code&gt; -&amp;gt; &lt;code&gt;a&amp;amp;&lt;/code&gt;. Some discussion of tradeoffs and details.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://discuss.rust-lang.org/t/poll-foo-new-vs-foo-as-the-default-constructor/758/29"&gt;Poll: &lt;code&gt;Foo::new()&lt;/code&gt; vs &lt;code&gt;Foo()&lt;/code&gt; as the default constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reddit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2ljfnd/warning_some_collection_methods_have_had_their/"&gt;Warning! Some collection methods have had their semantics changed transparently!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/2l98pn/error_interoperation_now_available_in_the/"&gt;Error interoperation now available in the nightlies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2l8x2a/traitbased_exception_handling_rfc_postponed_till/"&gt;Trait-based Exception handling RFC postponed until after 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2lgyne/cargo_now_support_build_scripts_xpost_rrust/"&gt;Cargo now supports build-scripts!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/2lmt99/what_libraries_would_you_like_to_see_implemented/"&gt;What libraries would you like to see implemented in Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2l3l07/rust_is_undoubtedly_one_of_the_upandcoming_big/"&gt;How good do you think the market for Rust developers will be 5 years from now, and in what area of programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2ljrp2/i_think_rust_and_i_were_meant_for_each_other/"&gt;I think Rust and I were made for each other&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/2lmkjw/how_does_the_rust_community_feel_about_ffi/"&gt;How does the Rust community feel about FFI?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/2lo21r/how_do_you_refactor_rust_code/"&gt;How do you refactor Rust code?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2lduv6/i_may_start_contributing_to_rustcan_i_get_a_few/"&gt;I may start contributing to Rust...can I get a few pointers?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cmr/this-week-in-rust"&gt;this-week-in-rust&lt;/a&gt;: This Week in Rust's content is now publicly hosted in a Github repo! If you find any errors, just submit a PR to the relevant markdown file in &lt;code&gt;/content&lt;/code&gt;! If you'd like to help out, please contact cmr, brson, or Gankro on Github/Reddit/IRC.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rustaceans.org/"&gt;rustaceans.org&lt;/a&gt;: &lt;em&gt;This website is for finding Rustaceans. Wondering who is behind that GitHub username or IRC nick? Here is where to find out.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reem/rust-modifier"&gt;rust-modifier&lt;/a&gt;: &lt;em&gt;Convenient chaining APIs for free&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/schickling/dockerfiles"&gt;dockerfiles&lt;/a&gt;: &lt;em&gt;Collection of lightweight and ready-to-use docker images&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kintaro/wtftw"&gt;Window Tiling For The Win&lt;/a&gt;: &lt;em&gt;A tiling window manager written in Rust&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/manuels/cxx2rs"&gt;cxx2rs&lt;/a&gt;: &lt;em&gt;A rust-binding generator for C/C++ files&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wackywendell/sorting-rs"&gt;sorting-rs&lt;/a&gt;: &lt;em&gt;This is a set of sorting algorithms, written in Rust.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BytePrelude/rust-chatserver"&gt;rust-chatserver&lt;/a&gt;: &lt;em&gt;A barebone command line TCP chatserver written in Rust&lt;/em&gt;. &lt;a href="https://www.reddit.com/r/rust/comments/2lpsj8/tcp_chatserver_written_in_rust_looking_for/"&gt;Looking for feedback&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/viperscape/rust-irc"&gt;rust-irc&lt;/a&gt;: &lt;em&gt;A simple example irc implementation&lt;/em&gt;. &lt;a href="https://www.reddit.com/r/rust/comments/2lpw9k/rust_irc_example_looking_for_feedback/"&gt;Looking for feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jgallagher/rusqlite"&gt;rusqlite&lt;/a&gt;: &lt;em&gt;Ergonomic, semi-safe bindings to SQLite for Rust&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Meetups&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Rust-Bay-Area/events/210632582/"&gt;Rust Bay Area: Cryptography and Rust, December 18th&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 55</title><link href="http://this-week-in-rust.org/blog/2014/08/18/this-week-in-rust-55/" rel="alternate"></link><updated>2014-08-18T22:28:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-08-18:blog/2014/08/18/this-week-in-rust-55/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's been a long while since a TWiR, and I apologize for that. This TWiR is
going to be much more abbreviated than usual. The normal pace will resume next
week.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;There were 418 pull requests merged in the past two months, modulo any rollups
(which are usually a combination of 10-20 pull requests).&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;88 commits contained breaking changes. Since this is a completely unreasonable
number (and I'm sure ancient breaking changes aren't interesting), I'll just
cover the last week's:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://github.com/rust-lang/rust/pull/16332"&gt;bunch of changes&lt;/a&gt; happened
  to &lt;code&gt;core::slice&lt;/code&gt;, including some trait renames. Most code shouldn't be
  affected by this, these traits are all in the prelude.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Duration&lt;/code&gt; type &lt;a href="https://github.com/rust-lang/rust/pull/15934"&gt;has been
  added&lt;/a&gt;, and many functions
  which logically take a duration have been changed to use it.&lt;/li&gt;
&lt;li&gt;Imports and items are &lt;a href="https://github.com/rust-lang/rust/pull/16482"&gt;no longer allowed to
  shadow&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;p&gt;Far too many for me to list! Impressively, pcwalton has been knocking down
backwards incompatible changes left and right. Currently, only &lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AP-backcompat-lang+milestone%3A1.0"&gt;11
issues&lt;/a&gt;
backwards incompatible language changes are tagged for 1.0. He has also
implemented &lt;a href="https://github.com/rust-lang/rfcs/blob/master/active/0044-closures.md"&gt;unboxed
closures&lt;/a&gt;, fixed a bunch of soundness issues, a large
portion of associated types, basic &lt;a href="https://github.com/rust-lang/rfcs/pull/135"&gt;&lt;code&gt;where&lt;/code&gt;
clauses&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rfcs/blob/master/active/0039-lifetime-elision.md"&gt;lifetime
elision&lt;/a&gt;, and various smaller
issues.&lt;/p&gt;
&lt;p&gt;There's been tons of library work, including stabilization, and cargo has
really taken off.&lt;/p&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adrien Brault&lt;/li&gt;
&lt;li&gt;Alexis Beingessner&lt;/li&gt;
&lt;li&gt;Alisdair Owens&lt;/li&gt;
&lt;li&gt;Andreas Tolfsen&lt;/li&gt;
&lt;li&gt;Andrew Poelstra&lt;/li&gt;
&lt;li&gt;Angus Lees&lt;/li&gt;
&lt;li&gt;Anton Lofgren&lt;/li&gt;
&lt;li&gt;Ben Gamari&lt;/li&gt;
&lt;li&gt;Bheesham Persaud&lt;/li&gt;
&lt;li&gt;Chris Nixon&lt;/li&gt;
&lt;li&gt;Chuck Ries&lt;/li&gt;
&lt;li&gt;DJUrsus&lt;/li&gt;
&lt;li&gt;Daniel Hofstetter&lt;/li&gt;
&lt;li&gt;David Vazgenovich Shakaryan&lt;/li&gt;
&lt;li&gt;Derecho&lt;/li&gt;
&lt;li&gt;Derek Harland&lt;/li&gt;
&lt;li&gt;Dzmitry Malyshau&lt;/li&gt;
&lt;li&gt;Eduardo Bautista&lt;/li&gt;
&lt;li&gt;Gioele Barabucci&lt;/li&gt;
&lt;li&gt;Hugo Jobling&lt;/li&gt;
&lt;li&gt;Ilya Dmitrichenko&lt;/li&gt;
&lt;li&gt;Jack Heizer&lt;/li&gt;
&lt;li&gt;Jake Scott&lt;/li&gt;
&lt;li&gt;James Hurst&lt;/li&gt;
&lt;li&gt;James Lal&lt;/li&gt;
&lt;li&gt;James Rowe&lt;/li&gt;
&lt;li&gt;Jason Thompson&lt;/li&gt;
&lt;li&gt;John Kåre Alsaker&lt;/li&gt;
&lt;li&gt;Jonas Hietala&lt;/li&gt;
&lt;li&gt;Kevin Walter&lt;/li&gt;
&lt;li&gt;LemmingAvalanche&lt;/li&gt;
&lt;li&gt;Matej Lach&lt;/li&gt;
&lt;li&gt;Mathijs van de Nes&lt;/li&gt;
&lt;li&gt;Michael Matuzak&lt;/li&gt;
&lt;li&gt;Michael Sproul&lt;/li&gt;
&lt;li&gt;Mike Robinson&lt;/li&gt;
&lt;li&gt;Nathan Froyd&lt;/li&gt;
&lt;li&gt;Paolo Falabella&lt;/li&gt;
&lt;li&gt;Patrick Yevsukov&lt;/li&gt;
&lt;li&gt;Peer Aramillo Irizar&lt;/li&gt;
&lt;li&gt;Peter Atashian&lt;/li&gt;
&lt;li&gt;Phil Dawes&lt;/li&gt;
&lt;li&gt;Philipp Gesang&lt;/li&gt;
&lt;li&gt;Prudhvi Krishna Surapaneni&lt;/li&gt;
&lt;li&gt;Robert Clipsham&lt;/li&gt;
&lt;li&gt;Russell&lt;/li&gt;
&lt;li&gt;Samuel Neves&lt;/li&gt;
&lt;li&gt;Simon Persson&lt;/li&gt;
&lt;li&gt;Stuart Pernsteiner&lt;/li&gt;
&lt;li&gt;Tim Joseph Dumol&lt;/li&gt;
&lt;li&gt;Tshepang Lekhonkhobe&lt;/li&gt;
&lt;li&gt;Yazhong Liu&lt;/li&gt;
&lt;li&gt;Yuri Albuquerque&lt;/li&gt;
&lt;li&gt;Zbigniew Siciarz&lt;/li&gt;
&lt;li&gt;dgoon&lt;/li&gt;
&lt;li&gt;donkopotamus&lt;/li&gt;
&lt;li&gt;kwantam&lt;/li&gt;
&lt;li&gt;masklinn&lt;/li&gt;
&lt;li&gt;Mitchell Nordine&lt;/li&gt;
&lt;li&gt;Nick Hamann&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 54</title><link href="http://this-week-in-rust.org/blog/2014/06/30/this-week-in-rust-54/" rel="alternate"></link><updated>2014-06-30T12:25:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-06-30:blog/2014/06/30/this-week-in-rust-54/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's time for 0.11! The &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-June/010618.html"&gt;prerelease candidate is
available&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;73 pull requests were merged in the last week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;The complete breaking change log is available
&lt;a href="https://gist.github.com/cmr/9c3db4bc3f0a96426d49"&gt;here&lt;/a&gt;, and you can view it
with &lt;code&gt;git log --no-merges --grep 'breaking-change' --since 6/21/2014 --until
6/28/2014&lt;/code&gt;. Some important ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*T&lt;/code&gt; &lt;a href="https://github.com/rust-lang/rust/pull/15208"&gt;is now known&lt;/a&gt; as &lt;code&gt;*const
  T&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct&lt;/code&gt; literals &lt;a href="https://github.com/rust-lang/rust/pull/14885"&gt;are not
  allowed&lt;/a&gt; in expressions that
  precede a block.&lt;/li&gt;
&lt;li&gt;The type of &lt;code&gt;42&lt;/code&gt; &lt;a href="https://github.com/rust-lang/rust/commit/9e3d0b002a5c2e81d43351c9b8550a3f4ccfb8f9"&gt;is no longer
  int&lt;/a&gt;
  but will be inferred as normal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In a series of many PRs, Steve &lt;a href="https://github.com/rust-lang/rust/pull/15183"&gt;has started
  work&lt;/a&gt; on a new tutorial, which
  is available (in draft form) &lt;a href="http://doc.rust-lang.org/guide.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tasks &lt;a href="https://github.com/rust-lang/rust/pull/14886"&gt;are now reusable&lt;/a&gt;, in
  that one can create a task, run a closure in it, and if it did not fail, the
  task can be reused.&lt;/li&gt;
&lt;li&gt;Lints &lt;a href="https://github.com/rust-lang/rust/pull/15024"&gt;now have a plugin
  infrastructure&lt;/a&gt;, meaning your
  own, arbitrary lints can now be defined!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alex Gaynor&lt;/li&gt;
&lt;li&gt;Arjan Topolovec&lt;/li&gt;
&lt;li&gt;Conrad Kleinespel&lt;/li&gt;
&lt;li&gt;Michael Zhou&lt;/li&gt;
&lt;li&gt;Mike Capp&lt;/li&gt;
&lt;li&gt;Pawel Olzacki&lt;/li&gt;
&lt;li&gt;Robert Buonpastore&lt;/li&gt;
&lt;li&gt;Ruud van Asseldonk&lt;/li&gt;
&lt;li&gt;Zach Pomerantz&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;New RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/134"&gt;Remove the &lt;code&gt;'&lt;/code&gt; from lifetime
  parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/135"&gt;Where clauses for more expressive
  bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/136"&gt;Ban private items in public
  APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/137"&gt;Objects of type T should be implicitly convertible to
  &amp;amp;T&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/139"&gt;Remove cross borrowing
  entirely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/140"&gt;Clarify that removing language features requires an
  RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/141"&gt;New lifetime elision rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/142"&gt;Efficient single inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/143"&gt;FromLiteral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/145"&gt;Memory exploit mitigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/146"&gt;Scoped attributes for checked
  arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There was a meetup in San Fransisco on Thursday, about gamedev. &lt;a href="https://air.mozilla.org/rust-meetup-june-2014/"&gt;The
  recording is available&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Damien Katz &lt;a href="https://twitter.com/damienkatz/status/482712736170643457"&gt;seems to be
  recruiting&lt;/a&gt; for
  Rust developers to build a distributed object store.&lt;/li&gt;
&lt;li&gt;The meeting notes &lt;a href="https://github.com/rust-lang/meeting-minutes"&gt;have a new
  home&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phildawes.net/blog/2014/06/24/racer-update/"&gt;Racer progress update&lt;/a&gt;,
  including vim support!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/breckinloggins/rusticom"&gt;rusticom&lt;/a&gt;, a NES emulator.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-June/010569.html"&gt;Cargo alpha
  announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/research/2014/06/23/static-checking-of-units-in-servo/"&gt;Static checking of units in
  Servo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dradtke/rust-dominion"&gt;A basic dominion simulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/29dttw/first_attempt_at_ncursesbased_gravity_worm_game/"&gt;ncurses Gravity Worm
  clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/299mi0/dashrust_now_has_a_nightly_docset_feed/"&gt;dash-rust now has a nightly docset
  feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-June/010618.html"&gt;0.11 prerelease
  testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/29h27x/the_piston_game_engine_update_notice_on_progress/"&gt;Piston game engine
  update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Cargo&lt;/h1&gt;
&lt;p&gt;Cargo is the Mozilla-funded package manager slash build tool for Rust code.
Cargo is being developed by &lt;a href="http://www.tilde.io/"&gt;Tilde&lt;/a&gt;, in part due to their
previous experience building &lt;a href="http://bundler.io/"&gt;Bundler&lt;/a&gt;. You can find
Cargo's website at &lt;a href="http://crates.io/"&gt;http://crates.io/&lt;/a&gt;. Apparently, a
startup is already using &lt;code&gt;cargo.io&lt;/code&gt;. Darn! The source of the website is
&lt;a href="https://github.com/wycats/cargo-website"&gt;here&lt;/a&gt; currently, if you'd like to add
or change anything.&lt;/p&gt;
&lt;p&gt;Cargo had its first 'release' on Monday, so this is the very first TWiC! As
part of this, Cargo has &lt;a href="https://github.com/rust-lang/cargo/commit/382a1033260b5db3aeb8b19207c91775f48cb842"&gt;moved to the rust-lang
organization&lt;/a&gt;.
That commit also serves as the original release. Cargo is 'pre-alpha,' so no
actual releases have been tagged. Yet. Basically, Cargo is at a point where it
is able to be used for basic Rust projects, and dogfooding it will help make
it awesome.&lt;/p&gt;
&lt;p&gt;Uptake has been pretty good: &lt;a href="https://github.com/search?q=Cargo.toml&amp;amp;ref=cmdform&amp;amp;type=Code"&gt;A search on
GitHub&lt;/a&gt; shows a
large number of code that references Cargo. Of course, some people will still
use other projects to handle this, especially with Cargo's lack of features.&lt;/p&gt;
&lt;p&gt;For a short introduction to Cargo, &lt;a href="http://doc.rust-lang.org/guide.html#hello,-cargo!"&gt;see my section in the new
Guide&lt;/a&gt;. One note that's not
in there, however: you're intended to check your &lt;code&gt;Cargo.toml&lt;/code&gt; file into version
control, similarly to a &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;p&gt;Eighteen pull requets landed in this first week. Wow! Here are the bigger ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/48"&gt;Removing Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/49"&gt;Correct usage of DESTDIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/50"&gt;adding a LICENSE (Apache/MIT, just like Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/53"&gt;Handle misformatted versions with a nicer error message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/56"&gt;Fix Windows tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/59"&gt;Remove 'test' binary from source tree, oops!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/64"&gt;Don't recompile nested deps too frequently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/70"&gt;Prep work for buildbot: Cargo now also uses bors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/71"&gt;&lt;code&gt;cargo test&lt;/code&gt; command added&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/72"&gt;Error properly on ssh URLs for dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/81"&gt;Use a custom &lt;code&gt;rm_rf&lt;/code&gt; to paper over Windows git funkiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/83"&gt;Check for the existance of a manifest when reading packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;o11c&lt;/li&gt;
&lt;li&gt;gilles-leblanc&lt;/li&gt;
&lt;li&gt;huonw&lt;/li&gt;
&lt;li&gt;mcpherrinm&lt;/li&gt;
&lt;li&gt;dtrebbien&lt;/li&gt;
&lt;li&gt;halorgium&lt;/li&gt;
&lt;li&gt;Arcterus&lt;/li&gt;
&lt;li&gt;samebchase&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 53</title><link href="http://this-week-in-rust.org/blog/2014/06/22/this-week-in-rust-53/" rel="alternate"></link><updated>2014-06-22T13:40:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-06-22:blog/2014/06/22/this-week-in-rust-53/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This week, it was anounced that Steve Klabnik &lt;a href="http://www.reddit.com/r/rust/comments/28bew8/rusts_documentation_is_about_to_drastically/"&gt;has been hired to work
exclusively on our
documentation&lt;/a&gt;,
starting tomorrow.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;73 pull requests were merged in the last week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;The complete breaking change log is available
&lt;a href="https://gist.github.com/cmr/d0e6d145af65e6d74713"&gt;here&lt;/a&gt;, and you can view it
with &lt;code&gt;git log --no-merges --grep 'breaking-change' --since 6/14/2014 --until 6/21/2014&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cross compiling to iOS &lt;a href="https://github.com/rust-lang/rust/pull/14715"&gt;is now
  supported&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The borrow checker &lt;a href="https://github.com/rust-lang/rust/pull/14947"&gt;has seen a bunch of
  cleanup&lt;/a&gt; removing the obsolete
  notion of "restrictions".&lt;/li&gt;
&lt;li&gt;Byte strings and byte literals &lt;a href="https://github.com/rust-lang/rust/pull/14880"&gt;have been added to the
  language&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dataflow &lt;a href="https://github.com/rust-lang/rust/pull/14873"&gt;uses the new CFG&lt;/a&gt;
  rather than a syntax-based analysis.&lt;/li&gt;
&lt;li&gt;The non-exhaustive pattern error &lt;a href="https://github.com/rust-lang/rust/pull/14731"&gt;now gives a pattern which is not
  matched&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The stability index &lt;a href="https://github.com/rust-lang/rust/pull/15029"&gt;has seen some
  extension&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Christopher Bergqvist&lt;/li&gt;
&lt;li&gt;Conrad Kleinespel&lt;/li&gt;
&lt;li&gt;John Schmidt&lt;/li&gt;
&lt;li&gt;Nathan Typanski&lt;/li&gt;
&lt;li&gt;Niklas Koep&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;New RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/132"&gt;Revised UFCS performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/131"&gt;Flexible target specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/130"&gt;Remove special treatment of Box by borrow
  checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/129"&gt;Refine the &lt;code&gt;asm!&lt;/code&gt; extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/128"&gt;Rename mod.rs files to self.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/127"&gt;Opt-in builtin traits take 2, default and negative
  impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/126"&gt;Add optional type parameter to
  &lt;code&gt;include_bin!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/125"&gt;Add prefetch intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/124"&gt;Add &lt;code&gt;cloned&lt;/code&gt; and &lt;code&gt;stable&lt;/code&gt;
  keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/123"&gt;Rename &lt;code&gt;Share&lt;/code&gt; to &lt;code&gt;Threadsafe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/122"&gt;Syntax sugar for prefix-style type parameter
  lists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://csherratt.github.io/csherratt/blog/2014/06/22/snowmews-architecture-part-2/"&gt;Snowmew's architecture part 2: data
  management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2828nq/rustosc_open_sound_control_10_over_udp_in_rust/"&gt;&lt;code&gt;rust-osc&lt;/code&gt;&lt;/a&gt;,
  Open Sound Control 1.0 over UDP in Rust.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/28srso/piston_game_engine_notice_on_progress/"&gt;Piston Game Engine: Progress
  Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/Florob/0ec238fa00a0c9b40bf7"&gt;&lt;code&gt;Checked&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, a type
  for more ergonomic checked integer arithmetic.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/28exbu/meetingweekly20140617_rfcs_unsafe_fields_loadable/"&gt;Weekly meeting
  notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/28cu3g/rustempty_05_released_compile_and_run_on_file/"&gt;&lt;code&gt;rust-empty&lt;/code&gt; 0.5
  released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last two weeks, we landed 53 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Brian Anderson landed parallel renedering&lt;/li&gt;
&lt;li&gt;Lars Bergstrom and Manish Goregaokar changed Servo to use a prebuilt Rust compiler (reducing build times from hours to &amp;lt; 10 minutes!) and enabled Travis CI builds&lt;/li&gt;
&lt;li&gt;ms2ger added support for rapidly failing the script task when the JS engine goes OOM&lt;/li&gt;
&lt;li&gt;fdipilla added support for spaces in paths in our configure scripts&lt;/li&gt;
&lt;li&gt;Tetsuharu OHZEKI added support for internal mutability for many pieces of code in Servo&lt;/li&gt;
&lt;li&gt;Martin Robinson added overflow support to child layer sizes&lt;/li&gt;
&lt;li&gt;Matt Brubeck separated desktop and mobile zoom calculations&lt;/li&gt;
&lt;li&gt;schaars ensured that noscript elements are not displayed&lt;/li&gt;
&lt;li&gt;Bruno Abinader implemented querySelectorAll&lt;/li&gt;
&lt;li&gt;Luqman Aden fixed up build failures on Android&lt;/li&gt;
&lt;li&gt;Glenn Watson added a Rust string interning repo (though he declined to name it "yarnbox")&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;p&gt;Pierre Louis Aublin (schaars)
fdipilla&lt;/p&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;There were meetings &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-06-09"&gt;two weeks ago&lt;/a&gt; discussing the next workweek and build system issues and &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-06-17"&gt;last week&lt;/a&gt; about the move to Travis CI, embedding support, and the web platform tests.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 52</title><link href="http://this-week-in-rust.org/blog/2014/06/14/this-week-in-rust-52/" rel="alternate"></link><updated>2014-06-14T23:29:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-06-14:blog/2014/06/14/this-week-in-rust-52/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;74 pull requests were merged in the last week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;So just dumping the breaking change log raw didn't really work out last time.
The complete log is available
&lt;a href="https://gist.github.com/cmr/d0e6d145af65e6d74713"&gt;here&lt;/a&gt;, and you can view it
with &lt;code&gt;git log --grep 'breaking-change' --since 6/7/2014 --until 6/14/2014&lt;/code&gt;.
I've chosen some particular breaking changes I think are more-breaking than
the others.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~[T]&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14703"&gt;has been 100% removed from the
  language&lt;/a&gt;. To create a &lt;code&gt;Box&amp;lt;[T,
  ..N]&amp;gt;&lt;/code&gt;, however, you temporarily need to do &lt;code&gt;box () ([1, 2, 3])&lt;/code&gt;, rather
  than &lt;code&gt;box [1, 2, 3]&lt;/code&gt;, which will work in the future.&lt;/li&gt;
&lt;li&gt;Patterns that shadow themselves &lt;a href="https://github.com/mozilla/rust/pull/14801"&gt;are no longer
  allowed&lt;/a&gt;, for example &lt;code&gt;let (a,
  a) = (1, 2);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some features &lt;a href="https://github.com/mozilla/rust/pull/14831"&gt;have been
  removed&lt;/a&gt; from &lt;code&gt;format!&lt;/code&gt;, namely
  pluralization and select, and escaping them has changed somewhat to no
  longer use &lt;code&gt;\&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://smallcultfollowing.com/babysteps/blog/2014/02/25/rust-rfc-stronger-guarantees-for-mutable-borrows/"&gt;"stronger guarantees for mutable
  borrows"&lt;/a&gt;
  RFC &lt;a href="https://github.com/mozilla/rust/pull/14739"&gt;has been implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;@&lt;/code&gt;-syntax &lt;a href="https://github.com/mozilla/rust/pull/14835"&gt;has been removed
  entirely&lt;/a&gt;. Together with &lt;code&gt;~[T]&lt;/code&gt;,
  this marks the end of the tyrannical rule of sigils!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transmute&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14859"&gt;no longer casts&lt;/a&gt;
  between types which have type parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="http://doc.rust-lang.org/std/cmp/trait.PartialEq.html"&gt;&lt;code&gt;PartialEq&lt;/code&gt;
  docs&lt;/a&gt; have been &lt;a href="https://github.com/mozilla/rust/pull/14733"&gt;revised for
  clarity and correctness&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The identifier name lint &lt;a href="https://github.com/mozilla/rust/pull/14740"&gt;now gives
  suggestions&lt;/a&gt; on what you could
  rename your identifier to.&lt;/li&gt;
&lt;li&gt;The loadable syntax extensions work &lt;a href="https://github.com/mozilla/rust/pull/14554"&gt;has been
  generalized&lt;/a&gt; to more arbitrary
  compiler plugins.&lt;/li&gt;
&lt;li&gt;Function call overloading &lt;a href="https://github.com/mozilla/rust/pull/14590"&gt;is now
  implemented&lt;/a&gt;, as part of the
  unboxed closure work.&lt;/li&gt;
&lt;li&gt;Unused struct fields &lt;a href="https://github.com/mozilla/rust/pull/14696"&gt;are now
  detected&lt;/a&gt; by the &lt;code&gt;dead_code&lt;/code&gt;
  lint.&lt;/li&gt;
&lt;li&gt;The docs &lt;a href="https://github.com/mozilla/rust/pull/14777"&gt;are now built with relative
  links&lt;/a&gt;, letting local, off-line
  copies work as expected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libsync&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14746"&gt;is now underneath
  &lt;code&gt;libstd&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Debuginfo type identifiers &lt;a href="https://github.com/mozilla/rust/pull/14819"&gt;are now unique,
  cross-crate&lt;/a&gt; fixing debuginfo
  with LTO.&lt;/li&gt;
&lt;li&gt;The results of compiler analysis &lt;a href="https://github.com/mozilla/rust/pull/13222"&gt;can now be dumped to
  CSV&lt;/a&gt;, which the &lt;a href="https://wiki.mozilla.org/DXR"&gt;DXR
  tool&lt;/a&gt; will use.&lt;/li&gt;
&lt;li&gt;Rotates and byte swaps &lt;a href="https://github.com/mozilla/rust/pull/14866"&gt;are now
  exposed&lt;/a&gt; as nice methods on the
  &lt;code&gt;Bitwise&lt;/code&gt; trait.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Michael Reinhard&lt;/li&gt;
&lt;li&gt;Renato Riccieri Santos Zannon&lt;/li&gt;
&lt;li&gt;Renato Zannon&lt;/li&gt;
&lt;li&gt;Valentin Tsatskin&lt;/li&gt;
&lt;li&gt;Zach Pomerantz&lt;/li&gt;
&lt;li&gt;bachm&lt;/li&gt;
&lt;li&gt;theptrk&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;New RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/114"&gt;Unboxed closures&lt;/a&gt;, the unboxed
  closures RFC to rule them all.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/115"&gt;Removing integer inference
  fallback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/116"&gt;Feature gate import shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/117"&gt;Rename &lt;code&gt;unsafe&lt;/code&gt; to &lt;code&gt;trusted&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/118"&gt;Overloaded arithmetic and logical operators should take &lt;code&gt;self&lt;/code&gt; and their
  arguments by value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/119"&gt;Add support to serialize::json for incrementally reading multiple JSON
  objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/120"&gt;Reintroduce &lt;code&gt;do&lt;/code&gt; keyword as sugar for nested match
  statements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://huonw.github.io/2014/06/10/knn-rust.html"&gt;Comparing k-NN in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huonw.github.io/2014/06/11/error-handling-in-rust-knn-case-study.html"&gt;Error handling in Rust: a k-NN case
  study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/27x6b6/los_angeles_rust_meetup/"&gt;Los Angeles Rust
  meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chris-morgan/anymap"&gt;AnyMap&lt;/a&gt;, "a safe and convenient
  store for one value of each type".&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rustbyexample.com/"&gt;Rust By Example&lt;/a&gt; now lets you execute code
  examples on-page.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/286vfx/piston_game_engine_update_notice_on_progress/"&gt;Piston game engine progress
  update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cburgdorf.github.io/Floor/doc/floor/index.html"&gt;floor&lt;/a&gt;, "a simple
  and lightweight foundation for web applications written in Rust".&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tombebbington.github.io/blog/2014/06/15/rust-libjit-wrapper/"&gt;jit.rs&lt;/a&gt;,
  a libjit wrapper&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattyhall/stompers"&gt;stompers&lt;/a&gt;, a STOMP client&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-June/010232.html"&gt;Brooklyn.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rustly.kokakiwi.net/"&gt;Rust nightlies archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bachm/rusty-tetris"&gt;Rusty Tetris&lt;/a&gt;, a tetris clone using
  Piston&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Pittsburgh-Code-Supply/events/184125612/"&gt;Introduction to
  Rust&lt;/a&gt;, a
  talk Ben Striegel is giving in Pittsburgh.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 51</title><link href="http://this-week-in-rust.org/blog/2014/06/10/this-week-in-rust-51/" rel="alternate"></link><updated>2014-06-10T22:46:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-06-10:blog/2014/06/10/this-week-in-rust-51/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This issue combines two weeks of Rust and three weeks of Servo. Additionally,
in a little over a month month, I'll be releasing &lt;a href="http://blog.octayn.net/blog/2014/06/09/future-of-twir/"&gt;an entirely reworked TWiR
website&lt;/a&gt;. Until then,
TWiR might be a bit lighter than usual.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;126 pull requests were merged in the last week.&lt;/p&gt;
&lt;h2&gt;Breaking Change Log&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;std: Remove the &lt;code&gt;as_utf16_p&lt;/code&gt; functions&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;much&lt;/span&gt; &lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="nx"&gt;expressed&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="nx"&gt;RAII&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;to_utf16&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;refactoring&lt;/span&gt; &lt;span class="nx"&gt;also&lt;/span&gt; &lt;span class="nx"&gt;takes&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;opportunity&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;properly&lt;/span&gt;
&lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt; &lt;span class="nx"&gt;aren&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="nx"&gt;unicode&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;windows&lt;/span&gt;
&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;O&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;properly&lt;/span&gt; &lt;span class="nx"&gt;returning&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;O&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;as_utf16_p&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;as_utf16_mut_p&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt;
&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;convert&lt;/span&gt; &lt;span class="nx"&gt;their&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to_utf16&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;append_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;terminated&lt;/span&gt; &lt;span class="nx"&gt;utf16&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Implement &lt;code&gt;#[plugin_registrar]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;RFC&lt;/span&gt; &lt;span class="mf"&gt;22.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;core: Move the collections traits to libcollections&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;moves&lt;/span&gt; &lt;span class="nx"&gt;Mutable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MutableMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;MutableSet&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Additionally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;removes&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;deque&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;moves&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Deque&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;trait&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;being&lt;/span&gt;
&lt;span class="nx"&gt;available&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;collections&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt; &lt;span class="nx"&gt;continues&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;reexported&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;core: Rename &lt;code&gt;container&lt;/code&gt; mod to &lt;code&gt;collections&lt;/code&gt;. Closes #12543&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Also&lt;/span&gt; &lt;span class="n"&gt;renames&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Extract librustrt out of libstd&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;As&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="nx"&gt;facade&lt;/span&gt; &lt;span class="nx"&gt;efforts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;extracts&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt;
&lt;span class="nb"&gt;out&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nb"&gt;library&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;standalone&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;librustrt.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;
&lt;span class="k"&gt;provide&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Definition&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;rtio&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Definition&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="na"&gt;-local-data&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="nx"&gt;unwinding&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="nx"&gt;libunwind&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="nx"&gt;initialization&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;shutdown&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="k"&gt;thread&lt;/span&gt;&lt;span class="na"&gt;-local-storage&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;

&lt;span class="nx"&gt;Notably&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;avoids&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;Thread&lt;/span&gt; &lt;span class="nx"&gt;creation&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;destruction.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;knowledge&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt;
  &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="nx"&gt;threading&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;seemed&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;leave&lt;/span&gt; &lt;span class="nb"&gt;out&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
  &lt;span class="sb"&gt;`rt::thread`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;librustrt.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;librustrt&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="nx"&gt;depend&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
  &lt;span class="nx"&gt;mutexes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;however.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Implementation&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;backtraces.&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;inherent&lt;/span&gt; &lt;span class="nx"&gt;requirement&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;
  &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;able&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt; &lt;span class="nx"&gt;backtraces.&lt;/span&gt; &lt;span class="nx"&gt;As&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;discussed&lt;/span&gt; &lt;span class="nx"&gt;later&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt;
  &lt;span class="nx"&gt;functionality&lt;/span&gt; &lt;span class="nx"&gt;continues&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;live&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="nx"&gt;rather&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;librustrt.&lt;/span&gt;

&lt;span class="nx"&gt;As&lt;/span&gt; &lt;span class="nx"&gt;usual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;architectural&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt;
&lt;span class="nx"&gt;possible.&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stable&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;impacted&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`std::rt`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;likely&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;changes.&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt;
&lt;span class="nx"&gt;architectural&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nb"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt; &lt;span class="nx"&gt;handles&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt; &lt;span class="nx"&gt;live&lt;/span&gt; &lt;span class="nx"&gt;directly&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`Task`&lt;/span&gt;
  &lt;span class="nx"&gt;structure.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;consequence&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;librustrt&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;knowing&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="sb"&gt;`std::io`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;
  &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="nx"&gt;handles&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;stored&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="na"&gt;-local-data.&lt;/span&gt;

  &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;handles&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;originally&lt;/span&gt; &lt;span class="nx"&gt;stored&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`Task`&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;perf&lt;/span&gt; &lt;span class="nx"&gt;reasons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
  &lt;span class="nx"&gt;TLD&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;currently&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;be.&lt;/span&gt; &lt;span class="nb"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;comparison&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="nx"&gt;prints&lt;/span&gt; &lt;span class="nx"&gt;goes&lt;/span&gt;
  &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;slowdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;appeared&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;acceptable&lt;/span&gt;
  &lt;span class="nx"&gt;perf&lt;/span&gt; &lt;span class="nx"&gt;loss&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;successful&lt;/span&gt; &lt;span class="nx"&gt;extraction&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;librustrt&lt;/span&gt; &lt;span class="nx"&gt;crate.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`rtio`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;forced&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;duplicate&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="sb"&gt;`std::io`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;As&lt;/span&gt;
  &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt; &lt;span class="nx"&gt;depends&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="sb"&gt;`std::io`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`rtio`&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;defines&lt;/span&gt; &lt;span class="nx"&gt;structures&lt;/span&gt; &lt;span class="nx"&gt;such&lt;/span&gt;
  &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addrinfo&lt;/span&gt; &lt;span class="nx"&gt;fiddly&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;etc.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;primary&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt;
  &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="sb"&gt;`rtio`&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;defines&lt;/span&gt; &lt;span class="nx"&gt;its&lt;/span&gt; &lt;span class="nx"&gt;own&lt;/span&gt; &lt;span class="sb"&gt;`IoError`&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;distinct&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt;
  &lt;span class="sb"&gt;`std::io::IoError`&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;enum&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="nx"&gt;occurred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;rather&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;platform&lt;/span&gt;&lt;span class="na"&gt;-specific&lt;/span&gt; &lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="nx"&gt;code.&lt;/span&gt;

  &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;native&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="nx"&gt;libraries&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;later&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt;
  &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;bulk&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;effort&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;put&lt;/span&gt; &lt;span class="nx"&gt;behind&lt;/span&gt; &lt;span class="nx"&gt;updating&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="nx"&gt;libraries&lt;/span&gt;
  &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="sb"&gt;`rtio`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Printing&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;along&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;backtrace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;continues&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt;
  &lt;span class="n"&gt;live&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;librustrt.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;consequence&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;above&lt;/span&gt; &lt;span class="nx"&gt;decision&lt;/span&gt;
  &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;move&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt; &lt;span class="nx"&gt;handles&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;TLD&lt;/span&gt; &lt;span class="nx"&gt;rather&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`Task`&lt;/span&gt; &lt;span class="nx"&gt;itself.&lt;/span&gt;
  &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;unwinding&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;supports&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="bp"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt;
  &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;invoked&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;fails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;allowing&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;register&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;function&lt;/span&gt;
  &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;backtrace.&lt;/span&gt;

  &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;registering&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;experimental&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
  &lt;span class="nx"&gt;ramifications&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;running&lt;/span&gt; &lt;span class="nb"&gt;code&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;unwinding&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;pretty&lt;/span&gt; &lt;span class="nx"&gt;hairy.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`std::unstable::mutex`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="sb"&gt;`std::rt::mutex`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`std::unstable::sync`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="sb"&gt;`std::rt::exclusive`&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
  &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;rewritten&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;internally&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;RAII&lt;/span&gt;
  &lt;span class="nx"&gt;guard&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;locking.&lt;/span&gt; &lt;span class="nx"&gt;Old&lt;/span&gt; &lt;span class="nb"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nb"&gt;stop&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="sb"&gt;`Exclusive`&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;favor&lt;/span&gt;
  &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="n"&gt;primitives&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="sb"&gt;`libsync`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;necessary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt; &lt;span class="nb"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nb"&gt;port&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt;
  &lt;span class="sb"&gt;`Arc&amp;lt;Exclusive&amp;lt;T&amp;gt;&amp;gt;`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;stripped&lt;/span&gt; &lt;span class="nb"&gt;down&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;fewer&lt;/span&gt; &lt;span class="nx"&gt;debugging&lt;/span&gt; &lt;span class="nx"&gt;options.&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt;
  &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;tested&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;very&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="nx"&gt;time.&lt;/span&gt;

&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Rename Iterator::len to count&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;carries&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;14678&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;surprising&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;sense&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;collide&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;That&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;however&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;redundant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;easily&lt;/span&gt; &lt;span class="n"&gt;replaced&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ExactSize&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Closes&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mf"&gt;14678.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;auto merge of #14538 : alexcrichton/rust/libcollections, r=brson&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;As&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;librand&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;shuffles&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;similar&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;depends&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;libcore&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;liballoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt;
  &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;reexported&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;stress&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;purely&lt;/span&gt; &lt;span class="nx"&gt;cosmetic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;very&lt;/span&gt; &lt;span class="nx"&gt;few&lt;/span&gt;
&lt;span class="nx"&gt;alterations&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;primitives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;notable&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;
  &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;primitives&lt;/span&gt; &lt;span class="nx"&gt;shouldn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t be necessarily usable in a freestanding&lt;/span&gt;
&lt;span class="s1"&gt;  context that has allocation. These are all reexported in their usual places in&lt;/span&gt;
&lt;span class="s1"&gt;  the standard library.&lt;/span&gt;

&lt;span class="s1"&gt;* The `hashmap`, and transitively the `lru_cache`, modules no longer reside in&lt;/span&gt;
&lt;span class="s1"&gt;  `libcollections`, but rather in libstd. The reason for this is because the&lt;/span&gt;
&lt;span class="s1"&gt;  `HashMap::new` contructor requires access to the OSRng for initially seeding&lt;/span&gt;
&lt;span class="s1"&gt;  the hash map. Beyond this requirement, there is no reason that the hashmap&lt;/span&gt;
&lt;span class="s1"&gt;  could not move to libcollections.&lt;/span&gt;

&lt;span class="s1"&gt;  I do, however, have a plan to move the hash map to the collections module. The&lt;/span&gt;
&lt;span class="s1"&gt;  `HashMap::new` function could be altered to require that the `H` hasher&lt;/span&gt;
&lt;span class="s1"&gt;  parameter ascribe to the `Default` trait, allowing the entire `hashmap` module&lt;/span&gt;
&lt;span class="s1"&gt;  to live in libcollections. The key idea would be that the default hasher would&lt;/span&gt;
&lt;span class="s1"&gt;  be different in libstd. Something along the lines of:&lt;/span&gt;

&lt;span class="s1"&gt;      // src/libstd/collections/mod.rs&lt;/span&gt;

&lt;span class="s1"&gt;      pub type HashMap&amp;lt;K, V, H = RandomizedSipHasher&amp;gt; =&lt;/span&gt;
&lt;span class="s1"&gt;            core_collections::HashMap&amp;lt;K, V, H&amp;gt;;&lt;/span&gt;

&lt;span class="s1"&gt;  This is not possible today because you cannot invoke static methods through&lt;/span&gt;
&lt;span class="s1"&gt;  type aliases. If we modified the compiler, however, to allow invocation of&lt;/span&gt;
&lt;span class="s1"&gt;  static methods through type aliases, then this type definition would&lt;/span&gt;
&lt;span class="s1"&gt;  essentially be switching the default hasher from `SipHasher` in libcollections&lt;/span&gt;
&lt;span class="s1"&gt;  to a libstd-defined `RandomizedSipHasher` type. This type&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Default&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;randomly&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;SipHasher&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;otherwise&lt;/span&gt;
  &lt;span class="nx"&gt;perform&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;SipHasher&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

  &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;future&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;seem&lt;/span&gt; &lt;span class="nx"&gt;incredibly&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;until&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="nx"&gt;comes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;hashmap&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;live&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;compromise&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt; &lt;span class="nx"&gt;preparation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;hashmap&lt;/span&gt; &lt;span class="nx"&gt;moving&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt;
  &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;previously&lt;/span&gt; &lt;span class="nx"&gt;snapshotted&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;enables&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;distinct&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Writer&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;trait&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;live&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="nx"&gt;implementations&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;parameterized&lt;/span&gt; &lt;span class="nx"&gt;over&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

  &lt;span class="nx"&gt;Due&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;custom&lt;/span&gt; &lt;span class="nx"&gt;trait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;SipHasher&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;lost&lt;/span&gt; &lt;span class="nx"&gt;its&lt;/span&gt;
  &lt;span class="nx"&gt;specialized&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;writing&lt;/span&gt; &lt;span class="nx"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;added&lt;/span&gt;
  &lt;span class="nx"&gt;backwards&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;compatibly&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;future&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;necessary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
  &lt;span class="nx"&gt;FNV&lt;/span&gt; &lt;span class="nx"&gt;hashing&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;satisfy&lt;/span&gt; &lt;span class="nx"&gt;much&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;speedier&lt;/span&gt; &lt;span class="nx"&gt;hashing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;breaking&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;get_mut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt; &lt;span class="nx"&gt;fails&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="nx"&gt;formatted&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;:?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;printed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;With&lt;/span&gt; &lt;span class="nx"&gt;backtraces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;still&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;too&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hard&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt; &lt;span class="nx"&gt;down&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;LruCache&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt;
  &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;collections&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Manual&lt;/span&gt; &lt;span class="nx"&gt;implementations&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;parameterized&lt;/span&gt; &lt;span class="nx"&gt;over&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Writer&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="nx"&gt;instead&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Writer&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Recreate a &lt;code&gt;collections&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;As&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;librand&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;shuffles&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;similar&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;depends&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;libcore&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;liballoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt;
  &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;reexported&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;stress&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;purely&lt;/span&gt; &lt;span class="nx"&gt;cosmetic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;very&lt;/span&gt; &lt;span class="nx"&gt;few&lt;/span&gt;
&lt;span class="nx"&gt;alterations&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;primitives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;notable&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;
  &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;primitives&lt;/span&gt; &lt;span class="nx"&gt;shouldn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t be necessarily usable in a freestanding&lt;/span&gt;
&lt;span class="s1"&gt;  context that has allocation. These are all reexported in their usual places in&lt;/span&gt;
&lt;span class="s1"&gt;  the standard library.&lt;/span&gt;

&lt;span class="s1"&gt;* The `hashmap`, and transitively the `lru_cache`, modules no longer reside in&lt;/span&gt;
&lt;span class="s1"&gt;  `libcollections`, but rather in libstd. The reason for this is because the&lt;/span&gt;
&lt;span class="s1"&gt;  `HashMap::new` contructor requires access to the OSRng for initially seeding&lt;/span&gt;
&lt;span class="s1"&gt;  the hash map. Beyond this requirement, there is no reason that the hashmap&lt;/span&gt;
&lt;span class="s1"&gt;  could not move to libcollections.&lt;/span&gt;

&lt;span class="s1"&gt;  I do, however, have a plan to move the hash map to the collections module. The&lt;/span&gt;
&lt;span class="s1"&gt;  `HashMap::new` function could be altered to require that the `H` hasher&lt;/span&gt;
&lt;span class="s1"&gt;  parameter ascribe to the `Default` trait, allowing the entire `hashmap` module&lt;/span&gt;
&lt;span class="s1"&gt;  to live in libcollections. The key idea would be that the default hasher would&lt;/span&gt;
&lt;span class="s1"&gt;  be different in libstd. Something along the lines of:&lt;/span&gt;

&lt;span class="s1"&gt;      // src/libstd/collections/mod.rs&lt;/span&gt;

&lt;span class="s1"&gt;      pub type HashMap&amp;lt;K, V, H = RandomizedSipHasher&amp;gt; =&lt;/span&gt;
&lt;span class="s1"&gt;            core_collections::HashMap&amp;lt;K, V, H&amp;gt;;&lt;/span&gt;

&lt;span class="s1"&gt;  This is not possible today because you cannot invoke static methods through&lt;/span&gt;
&lt;span class="s1"&gt;  type aliases. If we modified the compiler, however, to allow invocation of&lt;/span&gt;
&lt;span class="s1"&gt;  static methods through type aliases, then this type definition would&lt;/span&gt;
&lt;span class="s1"&gt;  essentially be switching the default hasher from `SipHasher` in libcollections&lt;/span&gt;
&lt;span class="s1"&gt;  to a libstd-defined `RandomizedSipHasher` type. This type&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Default&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;randomly&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;SipHasher&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;otherwise&lt;/span&gt;
  &lt;span class="nx"&gt;perform&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;SipHasher&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

  &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;future&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;seem&lt;/span&gt; &lt;span class="nx"&gt;incredibly&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;until&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="nx"&gt;comes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;hashmap&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;live&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;compromise&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;functionality&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt; &lt;span class="nx"&gt;preparation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;hashmap&lt;/span&gt; &lt;span class="nx"&gt;moving&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt;
  &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;libstd&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;libcollections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;previously&lt;/span&gt; &lt;span class="nx"&gt;snapshotted&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;enables&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;distinct&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Writer&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;trait&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;live&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="nx"&gt;implementations&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;parameterized&lt;/span&gt; &lt;span class="nx"&gt;over&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

  &lt;span class="nx"&gt;Due&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;custom&lt;/span&gt; &lt;span class="nx"&gt;trait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;SipHasher&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;lost&lt;/span&gt; &lt;span class="nx"&gt;its&lt;/span&gt;
  &lt;span class="nx"&gt;specialized&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;writing&lt;/span&gt; &lt;span class="nx"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;added&lt;/span&gt;
  &lt;span class="nx"&gt;backwards&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;compatibly&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;future&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;necessary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
  &lt;span class="nx"&gt;FNV&lt;/span&gt; &lt;span class="nx"&gt;hashing&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;satisfy&lt;/span&gt; &lt;span class="nx"&gt;much&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;speedier&lt;/span&gt; &lt;span class="nx"&gt;hashing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;breaking&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;get_mut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt; &lt;span class="nx"&gt;fails&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="nx"&gt;formatted&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;:?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;generic&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;printed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;With&lt;/span&gt; &lt;span class="nx"&gt;backtraces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;still&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;too&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hard&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt; &lt;span class="nx"&gt;down&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;LruCache&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt;
  &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;collections&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;collections&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Manual&lt;/span&gt; &lt;span class="nx"&gt;implementations&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;parameterized&lt;/span&gt; &lt;span class="nx"&gt;over&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Writer&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
  &lt;span class="nx"&gt;instead&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;Writer&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;auto merge of #14610 : alexcrichton/rust/issue-14008, r=brson&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;removes&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;M&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Any&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;parameter&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="nx"&gt;favor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;taking&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;hard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;coded&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;allows&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;
&lt;span class="nx"&gt;move&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;libcore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Previous&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;implicitly&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;transmit&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;unwrap&lt;/span&gt; &lt;span class="nx"&gt;manually&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;Closes&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;14008&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Remove generics from Option::expect&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;removes&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;M&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Any&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;parameter&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="nx"&gt;favor&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;taking&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;hard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;coded&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;allows&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;
&lt;span class="nx"&gt;move&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;libcore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Previous&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;implicitly&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;transmit&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;need&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;unwrap&lt;/span&gt; &lt;span class="nx"&gt;manually&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="nx"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;Closes&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;14008&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Drop Total from Total{Eq,Ord}&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;completes&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;renaming&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;comparison&lt;/span&gt; &lt;span class="n"&gt;hierarchy&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;renames&lt;/span&gt; &lt;span class="n"&gt;TotalEq&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;TotalOrd&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;filled&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;appropriate&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;purely&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;renaming&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;auto merge of #14556 : sfackler/rust/kill-workcache, r=alexcrichton&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;ever&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;rustpkg&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;unmaintained&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Remove libworkcache&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;ever&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;rustpkg&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;unmaintained&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Rename {Eq,Ord} to Partial{Eq,Ord}&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;ongoing&lt;/span&gt; &lt;span class="n"&gt;renaming&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;equality&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;12517&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;temporarily&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Partial&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;soon&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;renamed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ord&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;

&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;12517&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;librustc: Fix snake case errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;renamed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;align&lt;/span&gt;
&lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nx"&gt;conventions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;WriteOutputFile&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;write_output_file&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ty&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;EmptyBuiltinBounds&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;empty_builtin_bounds&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ty&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;AllBuiltinBounds&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;all_builtin_bounds&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;liveness&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;IrMaps&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;IrMaps&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;liveness&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Liveness&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Liveness&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;NameBindings&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;NameBindings&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;PrimitiveTypeTable&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;PrimitiveTypeTable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Resolver&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Resolver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;trans&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Datum&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Datum&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;trans&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;DatumBlock&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;DatumBlock&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;trans&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Rvalue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Rvalue&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;typeck&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;new_ValsAndBindings&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;unify&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ValsAndBindings&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;typeck&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;region_inference&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;RegionVarBindings&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;RegionVarBindings&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;lib{serialize, uuid}: Fix snake case errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;renamed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;align&lt;/span&gt;
&lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nx"&gt;conventions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ebml&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Doc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;seriaize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ebml&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Doc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ebml&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Decoder&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Decoder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ebml&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Encoder&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Encoder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;lib{std,core,debug,rustuv,collections,native,regex}: Fix &lt;code&gt;snake_case&lt;/code&gt; errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;renamed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;align&lt;/span&gt;
&lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nx"&gt;conventions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;MovePtrAdaptor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;MovePtrAdaptor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;MovePtrAdaptor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;MovePtrAdaptor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ReprVisitor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReprVisitor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ReprVisitor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReprVisitor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;
&lt;span class="nx"&gt;rustuv&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;homing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;HomingIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;go_to_IO_home&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;go_to_io_home&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;libsyntax: Fix &lt;code&gt;snake_case&lt;/code&gt; errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;renamed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;align&lt;/span&gt;
&lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nx"&gt;conventions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;syntax&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;mtwt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;xorPush&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;xor_push&lt;/span&gt;
&lt;span class="nx"&gt;syntax&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;auto merge of #14511 : Sawyer47/rust/osrng-rename, r=alexcrichton&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;According&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;guide&lt;/span&gt; &lt;span class="n"&gt;acronyms&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;CamelCase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Rename OSRng to OsRng&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;According&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;guide&lt;/span&gt; &lt;span class="n"&gt;acronyms&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;CamelCase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;auto merge of #14427 : alexcrichton/rust/librand, r=huonw&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;shuffles&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`rand`&lt;/span&gt; &lt;span class="nb"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;along&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;
&lt;span class="nx"&gt;reorganization.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;follows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;depends&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;libcore.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;experimental.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nb"&gt;library&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`std::rand`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;
  &lt;span class="nx"&gt;eventually&lt;/span&gt; &lt;span class="nx"&gt;become&lt;/span&gt; &lt;span class="nx"&gt;stable.&lt;/span&gt;

&lt;span class="nx"&gt;Unfortunately&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;entailed&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;breaking&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;shuffling&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;
&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="nx"&gt;around.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;breaking&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt; &lt;span class="nb"&gt;library&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Rng&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;gen_vec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;replaced&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Rng&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;gen_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt;
  &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;values.&lt;/span&gt; &lt;span class="nx"&gt;Previous&lt;/span&gt; &lt;span class="nx"&gt;behavior&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
  &lt;span class="nx"&gt;regained&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="sb"&gt;`rng.gen_iter().take(n).collect()`&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Rng&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;gen_ascii_str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;replaced&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="nx"&gt;Rng&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;gen_ascii_chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;ascii&lt;/span&gt;
  &lt;span class="nx"&gt;characters.&lt;/span&gt; &lt;span class="nx"&gt;Similarly&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;gen_iter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;behavior&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;emulated&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="sb"&gt;`rng.gen_ascii_chars().take(n).collect()`&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IsaacRng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Isaac64Rng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;XorShiftRng&lt;/span&gt;&lt;span class="p"&gt;}::&lt;/span&gt;&lt;span class="nl"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="kc"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="kc"&gt;all&lt;/span&gt;
  &lt;span class="nx"&gt;relied&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;being&lt;/span&gt; &lt;span class="nx"&gt;able&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;OSRng&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;seeding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt;
  &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="k"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;retain&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt;
  &lt;span class="nx"&gt;functionality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;implement&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`Rand`&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;they&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
  &lt;span class="nx"&gt;generated&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;generator.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;allows&lt;/span&gt;
  &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;stdlib&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;OSRng&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;create&lt;/span&gt; &lt;span class="nx"&gt;seeded&lt;/span&gt; &lt;span class="nx"&gt;instances&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;RNGs.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Rand&lt;/span&gt; &lt;span class="nx"&gt;implementations&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`Box&amp;lt;T&amp;gt;`&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="sb"&gt;`@T`&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="nx"&gt;seemed&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
  &lt;span class="nx"&gt;pretty&lt;/span&gt; &lt;span class="n"&gt;rare&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;codebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;allows&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;libcore&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;depend&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
  &lt;span class="nx"&gt;liballoc.&lt;/span&gt;  &lt;span class="nx"&gt;Additionally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;Rc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;
  &lt;span class="nx"&gt;supported.&lt;/span&gt;  &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;undesirable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;depend&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;liballoc&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;regain&lt;/span&gt;
  &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;implementations.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;WeightedChoice&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt; &lt;span class="nx"&gt;built&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="sb"&gt;`Vec&amp;lt;Weighted&amp;lt;T&amp;gt;&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;rather&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="sb"&gt;`&amp;amp;mut [Weighted&amp;lt;T&amp;gt;]`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;means&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;WeightedChoice&lt;/span&gt;
   &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;lifetime&lt;/span&gt; &lt;span class="nx"&gt;associated&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;it.&lt;/span&gt;

&lt;span class="nb"&gt;cc&lt;/span&gt; &lt;span class="vi"&gt;#13851&lt;/span&gt;

&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Recreate a &lt;code&gt;rand&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="nx"&gt;shuffles&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`rand`&lt;/span&gt; &lt;span class="nb"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;along&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;
&lt;span class="nx"&gt;reorganization.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;follows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="nx"&gt;crate&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;depends&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;libcore.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;experimental.&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="nb"&gt;library&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`std::rand`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;
  &lt;span class="nx"&gt;eventually&lt;/span&gt; &lt;span class="nx"&gt;become&lt;/span&gt; &lt;span class="nx"&gt;stable.&lt;/span&gt;

&lt;span class="nx"&gt;Unfortunately&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;entailed&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;breaking&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;shuffling&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;
&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="nx"&gt;around.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;breaking&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt; &lt;span class="nb"&gt;library&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="sb"&gt;`Rng::gen_vec()`&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;replaced&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="sb"&gt;`Rng::gen_iter()`&lt;/span&gt;
  &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;values.&lt;/span&gt; &lt;span class="nx"&gt;Previous&lt;/span&gt; &lt;span class="nx"&gt;behavior&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt;
  &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;regained&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="sb"&gt;`rng.gen_iter().take(n).collect()`&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="sb"&gt;`Rng::gen_ascii_str()`&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;replaced&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="sb"&gt;`Rng::gen_ascii_chars()`&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;ascii&lt;/span&gt;
  &lt;span class="nx"&gt;characters.&lt;/span&gt; &lt;span class="nx"&gt;Similarly&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="sb"&gt;`gen_iter()`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;behavior&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;emulated&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="sb"&gt;`rng.gen_ascii_chars().take(n).collect()`&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IsaacRng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Isaac64Rng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;XorShiftRng&lt;/span&gt;&lt;span class="p"&gt;}::&lt;/span&gt;&lt;span class="nl"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="kc"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="kc"&gt;all&lt;/span&gt;
  &lt;span class="nx"&gt;relied&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;being&lt;/span&gt; &lt;span class="nx"&gt;able&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;OSRng&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;seeding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt;
  &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="k"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;retain&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt;
  &lt;span class="nx"&gt;functionality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;implement&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`Rand`&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;they&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
  &lt;span class="nx"&gt;generated&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;generator.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;allows&lt;/span&gt;
  &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;stdlib&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;OSRng&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;create&lt;/span&gt; &lt;span class="nx"&gt;seeded&lt;/span&gt; &lt;span class="nx"&gt;instances&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;RNGs.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Rand&lt;/span&gt; &lt;span class="nx"&gt;implementations&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`Box&amp;lt;T&amp;gt;`&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="sb"&gt;`@T`&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;removed.&lt;/span&gt; &lt;span class="nx"&gt;These&lt;/span&gt; &lt;span class="nx"&gt;seemed&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
  &lt;span class="nx"&gt;pretty&lt;/span&gt; &lt;span class="n"&gt;rare&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;codebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;allows&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;depend&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
  &lt;span class="nx"&gt;liballoc.&lt;/span&gt;  &lt;span class="nx"&gt;Additionally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;pointer&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;Rc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;
  &lt;span class="nx"&gt;supported.&lt;/span&gt;  &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;undesirable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;librand&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;depend&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;liballoc&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;regain&lt;/span&gt;
  &lt;span class="nx"&gt;these&lt;/span&gt; &lt;span class="nx"&gt;implementations.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;WeightedChoice&lt;/span&gt; &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;longer&lt;/span&gt; &lt;span class="nx"&gt;built&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="sb"&gt;`Vec&amp;lt;Weighted&amp;lt;T&amp;gt;&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;rather&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="sb"&gt;`&amp;amp;mut [Weighted&amp;lt;T&amp;gt;]`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;means&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;WeightedChoice&lt;/span&gt;
  &lt;span class="nx"&gt;structure&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;lifetime&lt;/span&gt; &lt;span class="nx"&gt;associated&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;it.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`sample`&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="sb"&gt;`Rng`&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="na"&gt;-level&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
  &lt;span class="sb"&gt;`rand`&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;due&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;its&lt;/span&gt; &lt;span class="nx"&gt;dependence&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="sb"&gt;`Vec`&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;

&lt;span class="nb"&gt;cc&lt;/span&gt; &lt;span class="vi"&gt;#13851&lt;/span&gt;

&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;breaking&lt;/span&gt;&lt;span class="na"&gt;-change&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Rename UTF16Item[s] to Utf16Item[s]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;According&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;guide&lt;/span&gt; &lt;span class="n"&gt;acronyms&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;CamelCase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;auto merge of #14364 : alexcrichton/rust/libdebug, r=brson&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;well&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;:?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;libdebug&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;marked&lt;/span&gt; &lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;breaking&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;linked&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;qualifier&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;relying&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Closes&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;12019&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Move std::{reflect,repr,Poly} to a libdebug crate&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;well&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;:?&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;libdebug&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;marked&lt;/span&gt; &lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;breaking&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;linked&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;qualifier&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;relying&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Closes&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;12019&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breaking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;std: Rename strbuf operations to string&lt;/li&gt;
&lt;li&gt;std: Remove &lt;code&gt;String::from_owned_str&lt;/code&gt; as it's redundant&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Primitive types &lt;a href="https://github.com/mozilla/rust/pull/14513"&gt;now have a home in the
  documnetation&lt;/a&gt;, where their
  methods will be listed, and the traits they implement.&lt;/li&gt;
&lt;li&gt;References to owned vectors in the docs &lt;a href="https://github.com/mozilla/rust/pull/14553"&gt;have been mercilessly
  destroyed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is now a function &lt;a href="https://github.com/mozilla/rust/pull/14544"&gt;for parsing PATH environment variable-looking
  strings&lt;/a&gt; into their component
  paths.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rc::make_unique&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14522"&gt;has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Debuginfo representation of enums &lt;a href="https://github.com/mozilla/rust/pull/14486"&gt;has
  improved&lt;/a&gt; to be more consistent.&lt;/li&gt;
&lt;li&gt;Macros &lt;a href="https://github.com/mozilla/rust/pull/14298"&gt;can now be expanded in
  patterns&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is now a lint &lt;a href="https://github.com/mozilla/rust/pull/14300"&gt;that warns when one enum variant is vastly larger than
  the others&lt;/a&gt;. It is allow by
  default.&lt;/li&gt;
&lt;li&gt;Regular expressions &lt;a href="https://github.com/mozilla/rust/pull/14423"&gt;can now be stored in
  statics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustdoc &lt;a href="https://github.com/mozilla/rust/pull/14391"&gt;will now inline
  documentation&lt;/a&gt; for reexported
  items.&lt;/li&gt;
&lt;li&gt;A new &lt;a href="http://doc.rust-lang.org/complement-design-faq.html"&gt;language design
  FAQ&lt;/a&gt; &lt;a href="https://github.com/mozilla/rust/pull/14370"&gt;has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ahmed Charles&lt;/li&gt;
&lt;li&gt;Ariel Ben-Yehuda&lt;/li&gt;
&lt;li&gt;Christoph Burgdorf&lt;/li&gt;
&lt;li&gt;Florian Hartwig&lt;/li&gt;
&lt;li&gt;Jonathan Reem&lt;/li&gt;
&lt;li&gt;Nikita Pekin&lt;/li&gt;
&lt;li&gt;Randati&lt;/li&gt;
&lt;li&gt;Reilly Watson&lt;/li&gt;
&lt;li&gt;Ryman&lt;/li&gt;
&lt;li&gt;Santiago Rodriguez&lt;/li&gt;
&lt;li&gt;Sean Gillespie&lt;/li&gt;
&lt;li&gt;Sergio Benitez&lt;/li&gt;
&lt;li&gt;Sylvestre Ledru&lt;/li&gt;
&lt;li&gt;Tom Jakubowski&lt;/li&gt;
&lt;li&gt;Utkarsh Kukreti&lt;/li&gt;
&lt;li&gt;fort&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;New RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/91"&gt;Coercible and HasPrefix for Zero Cost
  Coercions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/94"&gt;Disambiguate enum variant
  names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/97"&gt;Filling in the details around unboxed
  closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/98"&gt;Uninitialized pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/100"&gt;Add a &lt;code&gt;partial_cmp&lt;/code&gt; method to
  &lt;code&gt;TotalOrd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/101"&gt;Allow multiple fixed-size subslices borrows in one
  pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/102"&gt;Auto-dereferencing non-raw
  pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/106"&gt;Add a freestanding target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/107"&gt;Pattern guards with
  bind-by-move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/108"&gt;Convenience syntax for module
  imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/109"&gt;Remove &lt;code&gt;#[crate_id]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/110"&gt;Resolve &lt;code&gt;::foo::...&lt;/code&gt; when compiling crates named
  &lt;code&gt;foo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/111"&gt;Index traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/112"&gt;Remove cross-borrowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/113"&gt;Provide a common API across &lt;code&gt;Option&lt;/code&gt; and the &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; variants of
  &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/26oxl4/are_we_web_yet_not_really/"&gt;Are we web yet? Not
  really.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/26ss21/embedded_in_academia_we_need_hardware_traps_for/"&gt;We need hardware traps for integer
  overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/26u192/piston_game_engine_update_notice_on_progress/"&gt;Piston game engine: update on
  progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/26xt8j/practicality_with_rust_error_handling/"&gt;Practicality with Rust: Error
  Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/26z1xa/debug_validation_vs_safety/"&gt;Debug validation vs
  safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thestinger/rust-core"&gt;rust-core now deprecated in favor of libcore
  upstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bjbell.wordpress.com/2014/05/31/emacs-rust-development-setup/"&gt;Emacs Rust Development
  Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/273gq2/what_was_the_result_of_the_mutpocalypse/"&gt;What was the result of the
  mutpocalypse?&lt;/a&gt;
  I am happy that it just fizzled out and died.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/276n30/swift_initial_commentary_from_graydon_hoare/"&gt;Swift - initial commentary from Graydon
  Hoare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/Panel-Systems-Programming-Languages-in-2014-and-Beyond"&gt;Systems Programming in 2014 and
  Beyond&lt;/a&gt;,
  a panel discussion featuring our very own Niko Matsakis, as well as Andrei
  Alexandrescu (D developer), Rob Pike, and Bjarne Stroustroup.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/27cphk/an_open_call_for_contributions_7_high_priority/"&gt;Open Call for Contributions: 7 High Priority Rust Libraries That Need To Be
  Written&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/27ig84/piston_01_released/"&gt;Piston 0.1
  Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/27jvdt/internet_archaeology_the_definitive_endall_source/"&gt;The definitive, end-all source for why Rust is named
  "Rust"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cmr.github.io/rust-log-viewer/"&gt;A tool for viewing &lt;code&gt;RUST_LOG&lt;/code&gt; output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/27qn6y/snowmews_architecture_part_1/"&gt;Snowmew's Architecture: Part
  1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last three weeks, we landed 77 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Walton improved Wikipedia paint time by 40x through display list optimization.&lt;/li&gt;
&lt;li&gt;Jack and many others landed a rust upgrade.&lt;/li&gt;
&lt;li&gt;Patrick Walton added reference counted flows, on the path to incremental layout support.&lt;/li&gt;
&lt;li&gt;Edit Balint reduced the number of times that we invoke rustc during the Servo build.&lt;/li&gt;
&lt;li&gt;Martin Robinson fixed many Linux rendering issues, especially on NVidia cards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Edit Balint (ebalint)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;There was a &lt;a href="https://github.com/mozilla/servo/wiki/Workweek-roadmap"&gt;workweek&lt;/a&gt;
last week, and our previous
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-05-19"&gt;two&lt;/a&gt;
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-05-13"&gt;meetings&lt;/a&gt; covered
the Rust upgrade, 32-bit support, the HTML parser, and gfx rendering.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 50</title><link href="http://this-week-in-rust.org/blog/2014/05/24/this-week-in-rust-50/" rel="alternate"></link><updated>2014-05-24T22:30:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-05-24:blog/2014/05/24/this-week-in-rust-50/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;66 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mem::uninit&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14392"&gt;has been renamed&lt;/a&gt;
  to &lt;code&gt;uninitialized&lt;/code&gt;, and everything in &lt;code&gt;mem&lt;/code&gt; is either stable or deprecated
  (to be removed). There are a &lt;a href="https://github.com/mozilla/rust/pull/14259"&gt;bunch of other
  changes&lt;/a&gt; to &lt;code&gt;mem&lt;/code&gt; that go with
  this.&lt;/li&gt;
&lt;li&gt;All uses of &lt;code&gt;~str&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14310"&gt;have been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UnsafeArc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14301"&gt;has been removed&lt;/a&gt;,
  replaced with &lt;code&gt;Arc&amp;lt;Unsafe&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rng.choose&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14319"&gt;now returns an
  &lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bitv::init_to_vec&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14295"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test shards with the built-in test runner &lt;a href="https://github.com/mozilla/rust/pull/14286"&gt;are now indexed by
  1&lt;/a&gt; in the CLI.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Result.unwrap_or_handle&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14294"&gt;has been
  renamed&lt;/a&gt; to &lt;code&gt;unwrap_or_else&lt;/code&gt; for
  consistency with &lt;code&gt;Option&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/14279"&gt;Some miscellaneous renames in libcollections&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustc is &lt;a href="https://github.com/mozilla/rust/pull/14251"&gt;more strict&lt;/a&gt; about
where it will accept a given &lt;code&gt;mod foo;&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;p&gt;There were a lot of various bugfixes and documentation additions all around.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is now support for &lt;a href="https://github.com/mozilla/rust/pull/14293"&gt;weak failure&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The docs for the cell types &lt;a href="https://github.com/mozilla/rust/pull/14304"&gt;has been massively
  improved&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bytes!()&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14275"&gt;now properly returns a static
  slice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A liballoc &lt;a href="https://github.com/mozilla/rust/pull/14230"&gt;has materialized&lt;/a&gt;,
  that contains all allocation support&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anton Löfgren&lt;/li&gt;
&lt;li&gt;Jihyeok Seo&lt;/li&gt;
&lt;li&gt;Jonathan Bailey&lt;/li&gt;
&lt;li&gt;Michael Dagitses&lt;/li&gt;
&lt;li&gt;P1start&lt;/li&gt;
&lt;li&gt;TyOverby&lt;/li&gt;
&lt;li&gt;Valerii Hiora&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/80"&gt;Allow the &lt;code&gt;unsafe&lt;/code&gt; qualifier on struct
  fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/81"&gt;Guaranteed tail-call
  optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/83"&gt;Add syntax to partially destructure &lt;code&gt;self&lt;/code&gt; in method
  signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/86"&gt;Generalize &lt;code&gt;macro_registar&lt;/code&gt; to
  &lt;code&gt;plugin_registrar&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/87"&gt;Bounds on trait objects should be separated with
  +&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/88"&gt;Macro syntax to count sequence
  repetitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/89"&gt;Loadable lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/90"&gt;Lexer syntax simplification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/guaranteeing-memory-safety-in-rust/"&gt;Guaranteeing Memory Safety in Rust (a talk by
  Niko)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://swiftcoder.wordpress.com/2014/05/23/approaches-to-resource-disposal/"&gt;Approaches to resource
  disposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tombebbington.github.io/blog/2014/05/24/introducing-rust-js/"&gt;Introducing
  js.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hydrocodedesign.com/2014/04/24/practicality-with-rust/"&gt;Practicality with Rust: Setting Up A
  Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rainbow-alex/burn"&gt;Burn, a programming language implemented in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.co.nz/2014/05/rust-for-c-programmers-part-7-data-types.html"&gt;Rust for C++ programmers - part 7: data
  types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/269t6i/cxx2rust_the_pains_of_wrapping_c_in_rust_on_the/"&gt;cxx2rust: the pains of wrapping C++ in Rust on the example of
  Qt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/269zu4/add_a_new_language_design_faq/"&gt;Add a new language design
  faq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mikejsavage/rspt"&gt;rspt: a physically based renderer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 49</title><link href="http://this-week-in-rust.org/blog/2014/05/17/this-week-in-rust-49/" rel="alternate"></link><updated>2014-05-17T22:30:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-05-17:blog/2014/05/17/this-week-in-rust-49/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;93 pull requests were merged this week, topping the &lt;a href="http://blog.octayn.net/blog/2014/03/24/this-week-in-rust-42/"&gt;previous
record&lt;/a&gt; of 91.
Good job everyone, keep up the good work!&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14128"&gt;now has a &lt;code&gt;stat&lt;/code&gt; method&lt;/a&gt;
  that does not use a path, but rather the open file itself (&lt;code&gt;fstat&lt;/code&gt;). As part
  of this, the &lt;code&gt;path&lt;/code&gt; field on &lt;code&gt;FileStat&lt;/code&gt; has been removed.&lt;/li&gt;
&lt;li&gt;Some failure in libcore &lt;a href="https://github.com/mozilla/rust/pull/14150"&gt;has been
  removed&lt;/a&gt;. &lt;code&gt;shift_ptr&lt;/code&gt; and
  &lt;code&gt;pop_ptr&lt;/code&gt; now return an &lt;code&gt;Option&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TcpStream&lt;/code&gt;s &lt;code&gt;connect&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; constructors &lt;a href="https://github.com/mozilla/rust/pull/13919"&gt;now take a string and a
  port&lt;/a&gt; rather than a &lt;code&gt;SocketAddr&lt;/code&gt;
  structure. There's some controversy around this change, as seen in the PR
  discussion. The first commit has detailed instructions for porting.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num::complex::Cmplx&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14167"&gt;has been
  renamed&lt;/a&gt; to
  &lt;code&gt;num::complex::Complex&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Process wait timeouts &lt;a href="https://github.com/mozilla/rust/pull/13957"&gt;are now
  implemented&lt;/a&gt;. See the PR for
  details.&lt;/li&gt;
&lt;li&gt;Our unicode support &lt;a href="https://github.com/mozilla/rust/pull/14159"&gt;has been cleaned
  up&lt;/a&gt;, and in the process
  &lt;code&gt;str::Normalizations&lt;/code&gt; has been renamed to &lt;code&gt;str::Decompositions&lt;/code&gt; to reflect
  what it does.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;owned&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14184"&gt;has moved&lt;/a&gt; from libcore
  to libstd, and with it &lt;code&gt;Box&lt;/code&gt; and &lt;code&gt;AnyOwnExt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;read_at_least&lt;/code&gt; method &lt;a href="https://github.com/mozilla/rust/pull/13127"&gt;has been
  added&lt;/a&gt; to &lt;code&gt;Reader&lt;/code&gt;. The &lt;code&gt;fill&lt;/code&gt;
  and &lt;code&gt;push_exact&lt;/code&gt; methods have been removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atomics&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14169"&gt;has moved&lt;/a&gt; to
  libcore.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;android-cross-path&lt;/code&gt; flat to rustc &lt;a href="https://github.com/mozilla/rust/pull/14179"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Process and &lt;code&gt;dynamic_library&lt;/code&gt; APIs &lt;a href="https://github.com/mozilla/rust/pull/13954"&gt;now use byte
  slices&lt;/a&gt; rather than &lt;code&gt;Path&lt;/code&gt;s or
  strings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_in_bare_thread&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14200"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;bitflags!&lt;/code&gt; generated &lt;code&gt;from_bits&lt;/code&gt; constructor &lt;a href="https://github.com/mozilla/rust/pull/14208"&gt;is now
  safe&lt;/a&gt; and returns an &lt;code&gt;Option&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from_utf8_owned&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14213"&gt;now returns a
  Result&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::fmt&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14115"&gt;has moved&lt;/a&gt; to
  &lt;code&gt;core::fmt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;enum variant names were accidentally leaking into child modules. &lt;a href="https://github.com/mozilla/rust/pull/14253"&gt;This is no
  more&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;p&gt;One PR from last week that apparently slipped through the cracks: &lt;a href="https://github.com/mozilla/rust/pull/14006"&gt;we are
using jemalloc again!&lt;/a&gt;.
Additionally, some changes around the new &lt;a href="https://github.com/rust-lang/rfcs/pull/39"&gt;allocator
RFC&lt;/a&gt; landed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String searching &lt;a href="https://github.com/mozilla/rust/pull/14135"&gt;now uses a two-way
  algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;libterm &lt;a href="https://github.com/mozilla/rust/pull/13401"&gt;now supports&lt;/a&gt; the win32
  console API.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;mangle&lt;/code&gt; method on &lt;code&gt;HashMap&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/14196"&gt;has been
  reintroduced&lt;/a&gt; in the form of
  &lt;code&gt;find_with_or_insert_with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The shootout-mandelbrot benchmark &lt;a href="https://github.com/mozilla/rust/pull/14203"&gt;has seen a 2x performance
  increase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The test runner filter &lt;a href="https://github.com/mozilla/rust/pull/13948"&gt;now takes a
  regex&lt;/a&gt; rather than a full path.&lt;/li&gt;
&lt;li&gt;The error reporter for unresolved name &lt;a href="https://github.com/mozilla/rust/pull/14086"&gt;hsa been vastly
  improved&lt;/a&gt; to also look for
  fields and methods on types, and methods on traits, rather than just local
  variables.&lt;/li&gt;
&lt;li&gt;Blocks &lt;a href="https://github.com/mozilla/rust/pull/14183"&gt;are now allowed&lt;/a&gt; in
  constant expressions.&lt;/li&gt;
&lt;li&gt;Windows process spawning and environment variable fetching &lt;a href="https://github.com/mozilla/rust/pull/14075"&gt;is now
  Unicode-aware&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fallback functions &lt;a href="https://github.com/mozilla/rust/pull/13932"&gt;have been
  added&lt;/a&gt; for when a given feature
  isn't available on Windows XP. &lt;code&gt;rustc&lt;/code&gt; won't run on XP due to LLVM, but
  binaries produced by it should.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alan Williams&lt;/li&gt;
&lt;li&gt;Cameron Zwarich&lt;/li&gt;
&lt;li&gt;Derek Chiang (Enchi Jiang)&lt;/li&gt;
&lt;li&gt;Hanno Braun&lt;/li&gt;
&lt;li&gt;J.C. Moyer&lt;/li&gt;
&lt;li&gt;Piotr Jawniak&lt;/li&gt;
&lt;li&gt;Zooko Wilcox-O'Hearn&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/76"&gt;Multiple trait implementations for a single impl
  block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/77"&gt;Unboxed closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/78"&gt;Extending safe mutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/79"&gt;Structs with unspecified layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;p&gt;The mutpocalypse is nigh. There is almost a full-page of reddit links to
self-posts and RFCs in response to Niko's &lt;a href="http://smallcultfollowing.com/babysteps/blog/2014/05/13/focusing-on-ownership/"&gt;Focusing on
Ownership&lt;/a&gt;
post. The situation is pretty ridiculous. I'm going to pretend it doesn't
exist, though.  Peruse reddit if you feel up to reading the dozens of
suggestions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-05-13"&gt;Weekly
  meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub's Atom editor &lt;a href="https://github.com/edubkendo/atom-racer"&gt;has Racer
  support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And, &lt;a href="http://phildawes.net/blog/2014/05/10/racer/"&gt;a detailed update on
  Racer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I've started my internship at Mozilla (working on Rust, of course), and I've
  started updating &lt;a href="http://rustlog.octayn.net/"&gt;my development log&lt;/a&gt; again.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-May/009825.html"&gt;Seattle meetup
  interest?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bindgen &lt;a href="https://github.com/crabtw/rust-bindgen/pull/81"&gt;now has a macro&lt;/a&gt;
  which can generate bindings at parse-time.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.co.nz/2014/05/rust-for-c-programmers-part-6-rc-gc-and.html"&gt;Rust for C++ programmers: part 6, Rc, Gc,
  *&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last two weeks, we landed 79 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Josh Matthews implemented a &lt;a href="https://github.com/mozilla/servo/pull/2101"&gt;new rooting strategy&lt;/a&gt; for JavaScript objects&lt;/li&gt;
&lt;li&gt;Aydin Kim fixed the &lt;a href="https://github.com/mozilla/servo/pull/2367"&gt;Android build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Glenn Watson fixed a bug with the new rooting strategy &lt;a href="https://github.com/mozilla/servo/pull/2340"&gt;during page interactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brendan Zabarauskascleaned up the way that we &lt;a href="https://github.com/mozilla/servo/pull/2336"&gt;print debug info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bryan Bell added &lt;a href="https://github.com/mozilla/servo/pull/2438"&gt;dotted border support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cameron Zwarich switched JSRef to more efficiently enforce its &lt;a href="https://github.com/mozilla/servo/pull/2435"&gt;contravariant lifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guro Bokum converted many of our &lt;a href="https://github.com/mozilla/servo/pull/2390"&gt;RefCells to Cells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matt Murphy &lt;a href="https://github.com/mozilla/servo/pull/2317"&gt;converted&lt;/a&gt; many of our uses of &lt;code&gt;~[]&lt;/code&gt; to &lt;code&gt;Vec&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Brendan Zabarauskas (bjz)&lt;/li&gt;
&lt;li&gt;Bryan Bell (bjwbell)&lt;/li&gt;
&lt;li&gt;Cameron Zwarich (zwarich)&lt;/li&gt;
&lt;li&gt;Glenn Watson (gw)&lt;/li&gt;
&lt;li&gt;Guro Bokum (jiojiajiu)&lt;/li&gt;
&lt;li&gt;Matt Murphy (murphm8)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;In the meeting &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-05-05"&gt;two weeks
ago&lt;/a&gt;, we introduced
a new team member, Cameron Zwarich (zwarich). He is joining us from Apple, and
will be working on cross-language inlining in support of SpiderMonkey, among
other things. In last week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-05-13"&gt;meeting&lt;/a&gt;, we
discussed 32-bit support for Servo, the design of the HTML parser, and
potentially replacing our Azure+Skia graphics stack.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 48</title><link href="http://this-week-in-rust.org/blog/2014/05/11/this-week-in-rust-48/" rel="alternate"></link><updated>2014-05-11T21:58:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-05-11:blog/2014/05/11/this-week-in-rust-48/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;76 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A significant amount of functionality &lt;a href="https://github.com/mozilla/rust/pull/13901"&gt;has
  moved&lt;/a&gt; from &lt;code&gt;libstd&lt;/code&gt; to a new
  &lt;code&gt;libcore&lt;/code&gt; crate, which is intended to be usable in a freestanding
  environment (it doesn't use any allocation etc). See the pull request for
  further details.&lt;/li&gt;
&lt;li&gt;All mentions of &lt;code&gt;~&lt;/code&gt; outside of &lt;code&gt;~str&lt;/code&gt; and &lt;code&gt;~[]&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13958"&gt;have been
  removed from the language&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~[T]&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13963"&gt;no longer implements
  &lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt;, and many APIs
  have been updated to use &lt;code&gt;Vec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;local_data&lt;/code&gt; API &lt;a href="https://github.com/mozilla/rust/pull/13835"&gt;has been
  modernized&lt;/a&gt; to use methods on
  keys, RAII, and removal of essentially unused features.&lt;/li&gt;
&lt;li&gt;Trait inheritence with incorrect use of lifetimes &lt;a href="https://github.com/mozilla/rust/pull/14055"&gt;has been
  fixed&lt;/a&gt;. See the second commit
  for a testcase and explanation.&lt;/li&gt;
&lt;li&gt;Cross-crate enum variant privacy &lt;a href="https://github.com/mozilla/rust/pull/14001"&gt;has been
  fixed&lt;/a&gt;. Previously, private
  variants were always usable without restriction.&lt;/li&gt;
&lt;li&gt;Format string parsing &lt;a href="https://github.com/mozilla/rust/pull/13985"&gt;has been moved outside of
  &lt;code&gt;std&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;bump_box_refcount&lt;/code&gt; function &lt;a href="https://github.com/mozilla/rust/pull/14019"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe extern fn&lt;/code&gt; definitions &lt;a href="https://github.com/mozilla/rust/pull/14005"&gt;are now
  allowed&lt;/a&gt;, with a corresponding
  change in how that type is written (previously the parser accepted &lt;code&gt;extern
  unsafe fn()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitflags!&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13897"&gt;now allows setting attributes on the generated
  type&lt;/a&gt;, and &lt;code&gt;FilePermissions&lt;/code&gt; has
  been ported to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13904"&gt;is the new syntax for
  &lt;code&gt;~T&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sockets &lt;a href="https://github.com/mozilla/rust/pull/13814"&gt;now have non-blocking
  IO&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TcpStream&lt;/code&gt; and &lt;code&gt;UnixStream&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13751"&gt;have methods to cancel
  reads/writes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is now limited support for &lt;a href="https://github.com/mozilla/rust/pull/13892"&gt;mixing &lt;code&gt;rlib&lt;/code&gt;s and
  &lt;code&gt;dylib&lt;/code&gt;s&lt;/a&gt; when linking to
  dependencies.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;stats&lt;/code&gt; crate &lt;a href="https://github.com/mozilla/rust/pull/13822"&gt;has been generalized to the &lt;code&gt;Float&lt;/code&gt;
  trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;graphviz&lt;/code&gt; crate &lt;a href="https://github.com/mozilla/rust/pull/13749"&gt;has been
  added&lt;/a&gt; for generating &lt;code&gt;dot&lt;/code&gt;
  files.&lt;/li&gt;
&lt;li&gt;Some missing cases in the &lt;code&gt;type_limits&lt;/code&gt; lint &lt;a href="https://github.com/mozilla/rust/pull/13936"&gt;have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13908"&gt;has been added&lt;/a&gt; to the
  pattern grammar.&lt;/li&gt;
&lt;li&gt;An injection bug in rustdoc's web frontend &lt;a href="https://github.com/mozilla/rust/pull/13895"&gt;has been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use of non-existent method which has the same name as an existing static
  method &lt;a href="https://github.com/mozilla/rust/pull/13685"&gt;now has a note
  attached&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Aaron Raimist&lt;/li&gt;
&lt;li&gt;Ali Smesseim&lt;/li&gt;
&lt;li&gt;Dirk Leifeld&lt;/li&gt;
&lt;li&gt;James Laverack&lt;/li&gt;
&lt;li&gt;Lucas Dohmen&lt;/li&gt;
&lt;li&gt;Phil Ruffwind&lt;/li&gt;
&lt;li&gt;Tim Brooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-05-06"&gt;weekly
meeting&lt;/a&gt;
discussed many things. I think I'm going to stop including this section of
TWiR because the meeting notes are very well-kept (thanks Lars!) and there's
often too much to effectively summarize.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/68"&gt;Remove &lt;code&gt;*mut T&lt;/code&gt;, add &lt;code&gt;*const T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/69"&gt;Add byte and byte string
  literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/71"&gt;Allow blocks in constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/73"&gt;Algebraic effect system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/74"&gt;Split Iterator into Iterator and
  FiniteIterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/rust-meetup-may-2014/"&gt;Bay Area Rust, May 2014:
  Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/253vxq/rust_lang_meetup_pittsburgh_code_supply/"&gt;New meetup at Pittsburgh Code and
  Supply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.co.nz/2014/05/rust-for-c-programmers-part-5-borrowed.html"&gt;Rust for C++ programmers - part 5: borrowed
  references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/24unld/header_compression_library_for_http2_written_in/"&gt;Header compression library for
  HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/259wwp/rustgraphics_how_rusts_type_system_might_improve/"&gt;rust-graphics&lt;/a&gt;,
  how Rust's type system might improve graphics programming&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2581s5/informal_survey_which_is_clearer_mutability_or/"&gt;Informal survey: Which is clearer, mutability or
  uniqueness?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/254q2o/teepee_design_header_representation/"&gt;Teepee design: header
  representation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bettong.net/2014/05/09/how-to-test-rust-on-travis-ci/"&gt;How to test Rust on
  travis-ci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 47</title><link href="http://this-week-in-rust.org/blog/2014/05/05/this-week-in-rust-47/" rel="alternate"></link><updated>2014-05-05T14:26:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-05-05:blog/2014/05/05/this-week-in-rust-47/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;45 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~"foo"&lt;/code&gt; and &lt;code&gt;&amp;amp;"bar"&lt;/code&gt; literals &lt;a href="https://github.com/mozilla/rust/pull/13877"&gt;have been removed from the
  language&lt;/a&gt;. The second is a noop
  and the first is replaced by &lt;code&gt;"foo".to_owned()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The various &lt;code&gt;rev_iter&lt;/code&gt; methods &lt;a href="https://github.com/mozilla/rust/pull/13648"&gt;have been
  removed&lt;/a&gt; in favor of making more
  iterators implement &lt;code&gt;DoubleEndedIterator&lt;/code&gt;. See the commit messages for more
  details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The first part of &lt;a href="https://github.com/rust-lang/rfcs/blob/master/active/0003-opt-in-builtin-traits.md"&gt;opt-in built-in
  traits&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/13868"&gt;has landed&lt;/a&gt;. The built-in
  traits can now be explicitly implemented and derived.&lt;/li&gt;
&lt;li&gt;There is &lt;a href="https://github.com/mozilla/rust/pull/13579"&gt;now a lint&lt;/a&gt; for
  negating &lt;code&gt;uint&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;There is &lt;a href="https://github.com/mozilla/rust/pull/13789"&gt;now a &lt;code&gt;debug_assert&lt;/code&gt;
  macro&lt;/a&gt; for assertions which can
  be compiled out.&lt;/li&gt;
&lt;li&gt;There is &lt;a href="https://github.com/mozilla/rust/pull/13072"&gt;now a &lt;code&gt;bitflags&lt;/code&gt;
  macro&lt;/a&gt; for generating a nice
  bitflag API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serialize&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12740"&gt;now has a streaming JSON
  parser&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We now use &lt;code&gt;-ffunction-sections&lt;/code&gt;, &lt;code&gt;-fdata-sections&lt;/code&gt;, and &lt;code&gt;--gc-sections&lt;/code&gt;,
  &lt;a href="https://github.com/mozilla/rust/pull/13833"&gt;for a 67% size reduction&lt;/a&gt; of
  hello world on Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alexandre Gagnon&lt;/li&gt;
&lt;li&gt;Ali Smesseim&lt;/li&gt;
&lt;li&gt;Emanuel Rylke&lt;/li&gt;
&lt;li&gt;James Laverack&lt;/li&gt;
&lt;li&gt;Justin Noah&lt;/li&gt;
&lt;li&gt;Michael Pratt&lt;/li&gt;
&lt;li&gt;Nicolas Silva&lt;/li&gt;
&lt;li&gt;Noam Yorav-Raphael&lt;/li&gt;
&lt;li&gt;Phil Ruffwind&lt;/li&gt;
&lt;li&gt;Wendell Smith&lt;/li&gt;
&lt;li&gt;m-r-r&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-04-29"&gt;weekly
meeting&lt;/a&gt;
discussed many RFCs.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/54"&gt;Allow some intrinsics in
  statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/55"&gt;Low level features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/56"&gt;Static values as generic
  parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/57"&gt;Text/Unicode oriented streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/58"&gt;Rename &lt;code&gt;&amp;amp;mut&lt;/code&gt; to &lt;code&gt;&amp;amp;only&lt;/code&gt;, allow &lt;code&gt;&amp;amp;only&lt;/code&gt; borrowing of non-mut
  slots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/60"&gt;Rename &lt;code&gt;StrBuf&lt;/code&gt; to &lt;code&gt;Str&lt;/code&gt; and remove &lt;code&gt;&amp;amp;str&lt;/code&gt; from the
  language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/63"&gt;Enforce module directory structure more
  strictly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/64"&gt;Longer numeric types (&lt;code&gt;u8&lt;/code&gt; to &lt;code&gt;uint8&lt;/code&gt;
  etc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/65"&gt;Change the syntax of struct literals to use
  &lt;code&gt;=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/66"&gt;Better temporary lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/67"&gt;User friendly input macros&lt;/a&gt;-&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.burntsushi.net/rust-regex-syntax-extensions"&gt;Syntax extensions and regular expressions for
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/244oog/what_to_expect_as_a_c_user/"&gt;What to expect as a C#
  user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/244zrj/ludum_dare_29_in_rust_sea_snake_escape/"&gt;Ludum Dare 29 Entry: Sea Snake
  Escape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/247744/repercussion_ludum_dare_29/"&gt;LD29 Entry:
  Repercussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/249clu/ld29_jam_entry_shadows_below/"&gt;LD29 Entry: Shadows
  Below&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/244yz6/bitfields_in_rust/"&gt;Bitfields in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.co.nz/2014/04/rust-for-c-programmers-part-4-unique.html"&gt;Rust for C++ programmers part
  4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009704.html"&gt;New moderation
  policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bvssvni/rust-empty/releases/tag/0.3"&gt;rust-empty 0.3&lt;/a&gt; has
  been released.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Fiedzia/rust-instrumentation"&gt;RMX, a Rust instrumentation
  tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/exoticorn/gba-rust"&gt;A Game Boy Advance game, written in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rust.godbolt.org/"&gt;An interactive compiler&lt;/a&gt;, which lets you
  disassemble Rust code nicely&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-May/009761.html"&gt;ClearCrypt: A new transport encryption
  library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last week, we landed 28 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lars Bergstrom landed the Rust upgrade, bringing Servo in line with April
  10th Rust in &lt;a href="https://github.com/mozilla/servo/pull/2238"&gt;#2238&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patrick Walton re-enabled parallel layout in
  &lt;a href="https://github.com/mozilla/servo/pull/2174"&gt;#2174&lt;/a&gt; and added parallel
  display list building in &lt;a href="https://github.com/mozilla/servo/pull/2235"&gt;#2235&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jgraham updated the Web Platform Tests integration to support passing some
  arguments via. env variables in
  &lt;a href="https://github.com/mozilla/servo/pull/2245"&gt;#2245&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ms2ger rewrote the handling of optional arguments in
  &lt;code&gt;getJSToNativeConversionTemplate&lt;/code&gt; in
  &lt;a href="https://github.com/mozilla/servo/pull/2244"&gt;#2244&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matt Brubeck cleaned up another dynamic borrow failure leading to pipeline
  problems in &lt;a href="https://github.com/mozilla/servo/pull/2252"&gt;#2252&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jack Moffitt cleaned up some of our Makefile and autoconf files in
  &lt;a href="https://github.com/mozilla/servo/pull/2232"&gt;#2232&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gulshan Singh fixed &lt;code&gt;TimeStamp&lt;/code&gt; to return the actual time in
  &lt;a href="https://github.com/mozilla/servo/pull/2275"&gt;#2275&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mike Blumenkrantz added the start of embedding support in
  &lt;a href="https://github.com/mozilla/servo/pull/2257"&gt;#2257&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manish Goregaokar implemented the webidl and basic implementation of XHR in
  &lt;a href="https://github.com/mozilla/servo/pull/2292"&gt;#2292&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gulshan Singh (gsingh93)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-04-28"&gt;meeting&lt;/a&gt;, we
introduced three new team members. Brendan (bjz) is a long-time Rust developer
here on a Mozilla internship. Glenn Watson (gw) is a full-time member of the
Servo team, with an initial focus on platform features. And Manish Goregaokar
will be participating in Google Summer of Code, working on XMLHttpRequest. We
covered the JS rooting changes, timing of the next Rust upgrade, the status of
Web Platform Tests, and the use of prebuilt Rust compiler binaries.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 46</title><link href="http://this-week-in-rust.org/blog/2014/04/26/this-week-in-rust-46/" rel="alternate"></link><updated>2014-04-26T14:06:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-04-26:blog/2014/04/26/this-week-in-rust-46/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This issue combines this week and last, since I was very busy with school last
week, and did not have time to write.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;153 pull requests were merged in the last two weeks.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Auto-rooting of &lt;code&gt;@&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13559"&gt;has been
  removed&lt;/a&gt;. The exact fallout of
  this isn't obvious to me, but presumably this makes some uses of &lt;code&gt;@&lt;/code&gt; not
  work.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::task::task&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13675"&gt;has been
  renamed&lt;/a&gt; to &lt;code&gt;TaskBuilder::new&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Closures can &lt;a href="https://github.com/mozilla/rust/pull/13686"&gt;no longer be
  applied&lt;/a&gt; through a &lt;code&gt;&amp;amp;&lt;/code&gt;-pointer.
  This fixes some memory unsafety.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Round&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/13597"&gt;has been
  removed&lt;/a&gt;, and is now part of
  &lt;code&gt;Float&lt;/code&gt;, and &lt;code&gt;Float&lt;/code&gt; now takes things by-value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unsafe&amp;lt;T&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13583"&gt;is now always
  &lt;code&gt;Share&lt;/code&gt;&lt;/a&gt;, regardless of whether
  or not the contained type is &lt;code&gt;Share&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Modulo (&lt;code&gt;%&lt;/code&gt; operator) on float types &lt;a href="https://github.com/mozilla/rust/pull/13410"&gt;has been
  removed&lt;/a&gt;, use the &lt;code&gt;rem&lt;/code&gt; method
  instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~[T]&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13588"&gt;is no longer growable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;Bitv&lt;/code&gt; method names &lt;a href="https://github.com/mozilla/rust/pull/13572"&gt;have
  changed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;priv&lt;/code&gt; keyword &lt;a href="https://github.com/mozilla/rust/pull/13547"&gt;is no longer
  used&lt;/a&gt;, but is still reserved.&lt;/li&gt;
&lt;li&gt;Some cases where destructors were not run &lt;a href="https://github.com/mozilla/rust/pull/13390"&gt;have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unwrap&lt;/code&gt; and &lt;code&gt;unwrap_err&lt;/code&gt; on &lt;code&gt;Result&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13479"&gt;now require the wrapper type to
  implement &lt;code&gt;Show&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some return types in &lt;code&gt;std::comm&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13448"&gt;have been made
  consistent&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There is now a &lt;a href="https://github.com/mozilla/rust/pull/13700"&gt;pure-Rust regular expression
  library&lt;/a&gt; in the standard
  library. As I've come to expect from burntsushi, the docs are fantastic.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/13723"&gt;Unix sockets&lt;/a&gt; and &lt;a href="https://github.com/mozilla/rust/pull/13688"&gt;TCP
  sockets&lt;/a&gt; now support accept with
  a timeout. &lt;a href="https://github.com/mozilla/rust/pull/13604"&gt;TcpStream::connect&lt;/a&gt; can also
  take a timeout.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/13692"&gt;64-bit Windows is now partially
  supported&lt;/a&gt;. Unwinding still
  doesn't work.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13576"&gt;is now parsed as &lt;code&gt;&amp;amp; &amp;amp;&lt;/code&gt;&lt;/a&gt;
  when appropriate.&lt;/li&gt;
&lt;li&gt;Errors about use of moved values &lt;a href="https://github.com/mozilla/rust/pull/13418"&gt;are much nicer
  now&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cloning vectors &lt;a href="https://github.com/mozilla/rust/pull/13539"&gt;is now much much
  faster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;SipHash &lt;a href="https://github.com/mozilla/rust/pull/13522"&gt;has also been
  optimized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Steve Klabnik's 30 minute introduction to Rust &lt;a href="https://github.com/mozilla/rust/pull/13416"&gt;has been added as official
  documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Aaron Turon&lt;/li&gt;
&lt;li&gt;Adolfo Ochagavía&lt;/li&gt;
&lt;li&gt;Andrew Gallant&lt;/li&gt;
&lt;li&gt;Brandon Waskiewicz&lt;/li&gt;
&lt;li&gt;Brendan McLoughlin&lt;/li&gt;
&lt;li&gt;Chris Shea&lt;/li&gt;
&lt;li&gt;Jacob Hegna&lt;/li&gt;
&lt;li&gt;James Sanders&lt;/li&gt;
&lt;li&gt;John Fresco&lt;/li&gt;
&lt;li&gt;John Simon&lt;/li&gt;
&lt;li&gt;Manish Goregaokar&lt;/li&gt;
&lt;li&gt;Meyer S. Jacobs&lt;/li&gt;
&lt;li&gt;Michael Fairley&lt;/li&gt;
&lt;li&gt;Richo Healey&lt;/li&gt;
&lt;li&gt;Ryan Mulligan&lt;/li&gt;
&lt;li&gt;Rüdiger Sonderfeld&lt;/li&gt;
&lt;li&gt;Thomas Backman&lt;/li&gt;
&lt;li&gt;iancormac84&lt;/li&gt;
&lt;li&gt;mdinger&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-04-15"&gt;Two weeks
  ago&lt;/a&gt;, a
  bunch of RFCs were discussed, as well as a breaking change log.&lt;/li&gt;
&lt;li&gt;[Last week], some more RFCs were discussed, notably the regex crate, numeric
  type inference, and disableable asserts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/44"&gt;Linker placement attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/45"&gt;Avoiding integer overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/46"&gt;Writer size hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/48"&gt;Revised trait matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/50"&gt;Disableable assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/51"&gt;Macro name resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/52"&gt;Private trait items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/53"&gt;Coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;For all Mac users, there is now
  &lt;a href="https://github.com/indirect/dash-rust/"&gt;dash-rust&lt;/a&gt;, for Rust API docs in
  Dash.&lt;/li&gt;
&lt;li&gt;Another &lt;a href="http://rustbyexample.github.io/"&gt;Rust By Example&lt;/a&gt; has been created.
  This one is much more complete and also looks pretty nice.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chrismorgan.info/blog/introducing-teepee.html"&gt;Teepee&lt;/a&gt; has been
  announced, the successor to &lt;code&gt;rust-http&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009618.html"&gt;zinc&lt;/a&gt;,
  a bare-metal Rust stack.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Vektah/idea-rust"&gt;An IntelliJ Rust plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.co.nz/search/label/rust-for-c"&gt;Rust for C++
  Programmers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reem/rust-n-queens"&gt;A very fast n-queens solver&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last week, we landed 29 PRs. There are several very large PRs waiting to land behind an impending Rust upgrade, which will bring us April 10th.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Matt Brubeck worked around a long-standing issue causing Servo to look crunched on HIDPI displays in &lt;a href="https://github.com/mozilla/servo/pull/2224"&gt;#2224&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Harry Maclean made &lt;code&gt;Node.Normalize()&lt;/code&gt; work on all its descendants in &lt;a href="https://github.com/mozilla/servo/pull/2221"&gt;#2221&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jgraham cleaned up the Web Platform Tests integration in &lt;a href="https://github.com/mozilla/servo/pull/2216"&gt;#2216&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ms2ger, among many other things, added support for the &lt;code&gt;Any&lt;/code&gt; type in dictionaries in &lt;a href="https://github.com/mozilla/servo/pull/2225"&gt;#2225&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki added helpers that significantly cleaned up script's layout queries in &lt;a href="https://github.com/mozilla/servo/pull/2210"&gt;#2210&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jdm brought back the "I tried" star for failed pages in &lt;a href="https://github.com/mozilla/servo/pull/2200"&gt;#2200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peiyong Lin implemented &lt;code&gt;Element.localName&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2209"&gt;#2209&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tom Schuster implemented &lt;code&gt;ParentNode.children&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2192"&gt;#2192&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jdm also added a basic browser context in &lt;a href="https://github.com/mozilla/servo/pull/2111"&gt;#2111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manish Goregaokar added support for tracking the WPT manifest in &lt;a href="https://github.com/mozilla/servo/pull/2187"&gt;#2187&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sankha Guria implemented &lt;code&gt;Element.prefix&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2199"&gt;#2199&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bruno Abinader implemented &lt;code&gt;createDocument&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2072"&gt;#2072&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Harry Maclean (hazz)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;In this week's &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-04-21"&gt;meeting&lt;/a&gt; we went over the Rust upgrade status, some medium-sized project brainstorming we've been doing, the Web Platform Tests support in Servo, and fixing iframes.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last week, we landed 39 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Manish Goregaokar landed support of the Web Platform Tests in &lt;a href="https://github.com/mozilla/servo/pull/2089"&gt;#2089&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ms2ger improved the integration of WPT with our build system in &lt;a href="https://github.com/mozilla/servo/pull/2162"&gt;#2162&lt;/a&gt; and &lt;a href="https://github.com/mozilla/servo/pull/2180"&gt;#2180&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Philip Horger handled treating HTTPS request as a network error in &lt;a href="https://github.com/mozilla/servo/pull/2166"&gt;#2166&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peiyong Lin cleaned up some parser code in &lt;a href="https://github.com/mozilla/servo/pull/2157"&gt;#2157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;James Sanders associated ResourceTask with URLProvenance in &lt;a href="https://github.com/mozilla/servo/pull/2152"&gt;#2152&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Josh Matthews added &lt;code&gt;Traceable&lt;/code&gt; and &lt;code&gt;Untraceable&lt;/code&gt; types to clean up rooting in &lt;a href="https://github.com/mozilla/servo/pull/2147"&gt;#2147&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lars Bergstrom changed the default rendering mode to CPU on Android &lt;a href="https://github.com/mozilla/servo/pull/2148"&gt;#2148&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon Sapin removed some unnecessary &lt;code&gt;unsafe&lt;/code&gt; code in &lt;a href="https://github.com/mozilla/servo/pull/2145"&gt;#2145&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matthew Brubeck fixed some terrible bugs in &lt;a href="https://github.com/mozilla/servo/pull/2135"&gt;#2135&lt;/a&gt; and &lt;a href="https://github.com/mozilla/servo/pull/2134"&gt;#2134&lt;/a&gt; and &lt;a href="https://github.com/mozilla/servo/pull/2130"&gt;#2130&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sanhka Guria added attribute setters and getters for &lt;code&gt;HTMLImageElement&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2054"&gt;#2054&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;In this week's &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-04-14"&gt;meeting&lt;/a&gt; we went over our Rust upgrade strategy, linking, embedding, rooting, Android support, and the commit we missed landing in one submodule for Acid2.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 45</title><link href="http://this-week-in-rust.org/blog/2014/04/13/this-week-in-rust-45/" rel="alternate"></link><updated>2014-04-13T23:06:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-04-13:blog/2014/04/13/this-week-in-rust-45/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;64 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BenchHarness&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13236"&gt;has been
  renamed&lt;/a&gt; to &lt;code&gt;Bencher&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;push_str&lt;/code&gt; and &lt;code&gt;push_char&lt;/code&gt; methods on &lt;code&gt;~str&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13440"&gt;have been
  removed&lt;/a&gt;, and a &lt;code&gt;StrBuf&lt;/code&gt; type
  added, as an analog to &lt;code&gt;Vec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Duplicate moves from the variables a &lt;code&gt;proc&lt;/code&gt; captures &lt;a href="https://github.com/mozilla/rust/pull/13413"&gt;are no longer
  allowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::libc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13315"&gt;has been extracted&lt;/a&gt;
  into its own crate.&lt;/li&gt;
&lt;li&gt;Various bugs in resolve &lt;a href="https://github.com/mozilla/rust/pull/13409"&gt;have been
  fixed&lt;/a&gt;. The fixes seem
  relatively obscure, but they're well documented if your code breaks.&lt;/li&gt;
&lt;li&gt;The functions in &lt;code&gt;flate&lt;/code&gt; now &lt;a href="https://github.com/mozilla/rust/pull/13389"&gt;return Option instead of
   failing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TotalEq&lt;/code&gt; and &lt;code&gt;TotalOrd&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13358"&gt;now
  document&lt;/a&gt; exactly what the types
  implementing them must guarantee.&lt;/li&gt;
&lt;li&gt;Some bugs with debuginfo &lt;a href="https://github.com/mozilla/rust/pull/13441"&gt;have been
  fixed&lt;/a&gt;. In particular, the
  annoying link failure with debuginfo has been fixed.&lt;/li&gt;
&lt;li&gt;Relocation model &lt;a href="https://github.com/mozilla/rust/pull/13340"&gt;is now
  configurable&lt;/a&gt; with &lt;code&gt;-C
  relocation-model&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, a lot of cleanup happened. Not much of it sticks out particularly.&lt;/p&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Boris Egorov&lt;/li&gt;
&lt;li&gt;Jim Radford&lt;/li&gt;
&lt;li&gt;Joseph Crail&lt;/li&gt;
&lt;li&gt;JustAPerson&lt;/li&gt;
&lt;li&gt;Kasey Carrothers&lt;/li&gt;
&lt;li&gt;Kevin Butler&lt;/li&gt;
&lt;li&gt;Manish Goregaokar&lt;/li&gt;
&lt;li&gt;Tobba&lt;/li&gt;
&lt;li&gt;free-Runner&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The weekly meeting was cancelled due to the videoconference system being down
for mitigating the Heartbleed vulnerability, as well as some team members
travelling or otherwise unavailable.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;p&gt;Some new RFCs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/36"&gt;Extend nullable pointer optimization to library
  types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/37"&gt;Extended method lookup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/38"&gt;Inherit use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/39"&gt;Allocator trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/40"&gt;Make libstd a facade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/41"&gt;&lt;code&gt;Invalid&lt;/code&gt; trait for space optimization of
  enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/42"&gt;Add a regexp crate to the Rust
  distribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Project Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/22y6oy/acronymy_a_web_app_written_in_rust/"&gt;Acronymy&lt;/a&gt;
has been released. This is a web application (in Rust!) for defining words as
acronyms. It's pretty fun.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmr/bitmap-rs"&gt;bitmap&lt;/a&gt; has been released&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BurntSushi/regexp/"&gt;regexp&lt;/a&gt; is a pure-Rust
  implementation of RE2, with wonderful docs and support for statically
  compiling regular expressions.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/22uirj/rustempty_02_released/"&gt;rust-empty&lt;/a&gt;
  has been updated to 0.2.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hannobraun/inotify-rs"&gt;inotify-rs&lt;/a&gt; has been released,
  bindings to inotify.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bwo/unlambda/blob/master/unlambda.rs"&gt;An unlambda
  interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aochagavia/RusticMineSweeper"&gt;RusticMineSweeper&lt;/a&gt;, a
  minesweeper clone.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/erickt/rust-mustache/tree/v0.3.0"&gt;rust-mustache&lt;/a&gt; has
  been updated to 0.3.0.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dnaq/sodiumoxide"&gt;sodiumoxide&lt;/a&gt;, the libsodium bindings,
  have been updated for 0.10.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Community&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;On April 17, there will be an &lt;a href="http://www.meetup.com/nyccpp/events/168545012/"&gt;Introduction to
  Rust&lt;/a&gt; by Clark Gaebel in new
  York City, during a C++ meetup.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009490.html"&gt;Bay Area
  Rust&lt;/a&gt;'s
  plans for May have been announced.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last week, we landed 30 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ms2ger cleaned up all of the trailing whitespace that had been nagging down
  our Critic reviews in &lt;a href="https://github.com/mozilla/servo/pull/2055"&gt;#2055&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob Parker added a reftest for &lt;code&gt;setAttribute&lt;/code&gt;-based restyling in
  &lt;a href="https://github.com/mozilla/servo/pull/2062"&gt;#2062&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sankha Narayan Guria removed XRay from the script codegen in
  &lt;a href="https://github.com/mozilla/servo/pull/2050"&gt;#2050&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peiyong Lin moved &lt;code&gt;namespaceURI&lt;/code&gt; to the &lt;code&gt;Element&lt;/code&gt; type in
  &lt;a href="https://github.com/mozilla/servo/pull/2063"&gt;#2063&lt;/a&gt; and removed all
  remaining &lt;code&gt;@&lt;/code&gt; boxes in &lt;a href="https://github.com/mozilla/servo/pull/2085"&gt;#2085&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matt Brubeck fixed bugs related clicking on links in
  &lt;a href="https://github.com/mozilla/servo/pull/2068"&gt;#2068&lt;/a&gt; and
  &lt;a href="https://github.com/mozilla/servo/pull/2084"&gt;#2084&lt;/a&gt; and
  &lt;a href="https://github.com/mozilla/servo/pull/2080"&gt;#2080&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hyun June Kim added support for pseudo-elements attached to inline elements
  in &lt;a href="https://github.com/mozilla/servo/pull/2071"&gt;#2071&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manish Goregaokar cleaned up a whole bunch of warnings left after our last
  Rust update in &lt;a href="https://github.com/mozilla/servo/pull/2045"&gt;#2045&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lars Bergstrom got Android support working in Servo master in
  &lt;a href="https://github.com/mozilla/servo/pull/2070"&gt;#2070&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jacob Parker (j3parker)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-04-07"&gt;meeting&lt;/a&gt;, we went
over our &lt;a href="https://github.com/mozilla/servo/wiki/Roadmap"&gt;Q2 roadmap&lt;/a&gt;, status
of an Android buildbot, testing, and the ever-present issue of improving our
build system.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 44</title><link href="http://this-week-in-rust.org/blog/2014/04/05/this-week-in-rust-44/" rel="alternate"></link><updated>2014-04-05T05:06:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-04-05:blog/2014/04/05/this-week-in-rust-44/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;0.10 &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009387.html"&gt;was released&lt;/a&gt; this week, and with it comes a redesign of the
websites and official nightlies.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;62 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flat_map&lt;/code&gt; methods &lt;a href="https://github.com/mozilla/rust/pull/13203"&gt;have been
  removed&lt;/a&gt; from &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, the are
  superseded by their iterator equivalents (of the same name).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FromIterator::from_iterator&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13220"&gt;has been
  renamed&lt;/a&gt; to &lt;code&gt;from_iter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::vec::{append, append_one}&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13221"&gt;have been turned into
  methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;struct fields &lt;a href="https://github.com/mozilla/rust/pull/13184"&gt;are now private by
  default&lt;/a&gt;. Similarly, fields of
  tuple structs &lt;a href="https://github.com/mozilla/rust/pull/13237"&gt;are also private by
  default&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::num&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13225"&gt;has seen some
  cleanup&lt;/a&gt;. The &lt;code&gt;cmath&lt;/code&gt; module has
  been removed from the public API and the various wrapper functions on float
  types have been removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rng::shuffle_mut&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13177"&gt;has been
  renamed&lt;/a&gt; to &lt;code&gt;shuffle&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Vectors, arrays, and slices &lt;a href="https://github.com/mozilla/rust/pull/13257"&gt;require &lt;code&gt;uint&lt;/code&gt; indices
  now&lt;/a&gt;. Previously they accepted
  any integer type.&lt;/li&gt;
&lt;li&gt;Static string constants &lt;a href="https://github.com/mozilla/rust/pull/13291"&gt;no longer include a null
  terminator&lt;/a&gt;. This was
  accidentally leftover from when all strings were implicitly
  null-terminated. This may break code that incorrectly assumed strings were
  null-terminated.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;concat_idents&lt;/code&gt; macro &lt;a href="https://github.com/mozilla/rust/pull/13295"&gt;is now feature
  gated&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RefCell::get&lt;/code&gt; and &lt;code&gt;RefCell::set&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13301"&gt;have been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rustc &lt;a href="https://github.com/mozilla/rust/pull/13284"&gt;now gives file paths&lt;/a&gt;
  when reporting duplicate crates found.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cmp&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12956"&gt;has some nice new
  documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The manual &lt;a href="https://github.com/mozilla/rust/pull/13207"&gt;now has&lt;/a&gt; an updated
  list of what attributes are valid and what they do.&lt;/li&gt;
&lt;li&gt;Built-in syntax extensions &lt;a href="https://github.com/mozilla/rust/pull/13255"&gt;are now
  documented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AtomicInt&lt;/code&gt; and &lt;code&gt;AtomicUint&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12964"&gt;now have atomic bitwise
  operations&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Show&lt;/code&gt; implementation for &lt;code&gt;Cell&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13243"&gt;has been
  fixed&lt;/a&gt; to actually print the
  contents of the Cell.&lt;/li&gt;
&lt;li&gt;Macros in statement and expression position &lt;a href="https://github.com/mozilla/rust/pull/13234"&gt;can now be delimited by square
  brackets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;k-nucleotide&lt;/code&gt; benchmark &lt;a href="https://github.com/mozilla/rust/pull/13206"&gt;has been fixed to pass the official shootout
  tests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A nasty bug which would cause &lt;code&gt;Arc&lt;/code&gt;s to leak &lt;a href="https://github.com/mozilla/rust/pull/13211"&gt;has been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Benjamin Adamson&lt;/li&gt;
&lt;li&gt;Christopher Kendell&lt;/li&gt;
&lt;li&gt;Falco Hirschenberger&lt;/li&gt;
&lt;li&gt;Gábor Lehel&lt;/li&gt;
&lt;li&gt;Ivan Petkov&lt;/li&gt;
&lt;li&gt;Scott Jenkins&lt;/li&gt;
&lt;li&gt;Timothée Ravier&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-04-01"&gt;weekly
meeting&lt;/a&gt;
discussed Vec versus &lt;code&gt;~[T]&lt;/code&gt;, the intrinsics RFC, and StrBuf.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;p&gt;Some new RFCs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/34"&gt;Check actual type parameters against their
  bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/33"&gt;Change return type of str::replace to
  MaybeOwned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/29"&gt;Bit fields and matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/27"&gt;Use different keywords for declaring tagged unions and C-style
  enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/26"&gt;Remove the &lt;code&gt;priv&lt;/code&gt; keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/24"&gt;Unify and nest structs and
  enums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Project Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/LeoTestard/rustlex"&gt;rustlex&lt;/a&gt;, a syntax extension for
  generating regular expression-based lexers.&lt;/li&gt;
&lt;li&gt;farcaller &lt;a href="http://www.reddit.com/r/rust/comments/21qogc/im_making_a_note_here_huge_embedded_success/"&gt;has shown a
  demo&lt;/a&gt;
  of Rust on an ARM dev board.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/21tplw/writing_an_asterisk_module_using_rust/"&gt;A sample Asterisk
  module&lt;/a&gt;,
  in Rust&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alan-andrade.github.io/rust/javascript/2014/03/31/parallel_js_compression.html"&gt;Parallel JS
  Compression&lt;/a&gt;
  in Rust.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tedsta/rust-brainfuck/blob/master/main.rs"&gt;A Brainfuck
  Interpreter&lt;/a&gt;
  in 43 lines.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Geal/rustfix"&gt;rustfix&lt;/a&gt;, a simple regex-based upgrading
  tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/229fze/rustiteratorcomprehensions_nest_filter_and_map/"&gt;rust-iteratorcomprehensions&lt;/a&gt;,
  a list comprehension syntax for iterators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last week, we landed 18 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Walton (along with commits from Juneyoung Cho and Hyun June Kim) landed ACID2 support in &lt;a href="https://github.com/mozilla/servo/pull/1988"&gt;#1988&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ms2ger landed a new Rust upgrade, bringing us to late March in &lt;a href="https://github.com/mozilla/servo/pull/2041"&gt;#2041&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Martin Robinson move the active timers for the &lt;code&gt;Window&lt;/code&gt; object into a &lt;code&gt;HashMap&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2002"&gt;#2002&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manish Goregaokar made attribute getter/setters case insensitive in &lt;a href="https://github.com/mozilla/servo/pull/2043"&gt;#2043&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki cleaned up &lt;code&gt;Document::create_collection&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/2031"&gt;#2031&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peiyong Lin got rid of match statements in layout queries in &lt;a href="https://github.com/mozilla/servo/pull/2022"&gt;#2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bruno de Oliveira Abinader added support for the ASCII whitespace check in &lt;a href="https://github.com/mozilla/servo/pull/2032"&gt;#2032&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Martin Robinson&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-31"&gt;meeting&lt;/a&gt;, we
discussed how to demo ACID2, gave a quick overview of our Q2 agenda, talked
about the tentative Servo workweek date (June 2), and wrapped up where the
rest of the layout features are at now that we have closed down the ACID2
push.&lt;/p&gt;
&lt;p&gt;Courtesy of Manish Goregaokar, we now have a
&lt;a href="https://badges.mozilla.org/en-US/badges/badge/Servo-Rust-upgrade"&gt;badge&lt;/a&gt; for
those brave memebers of the Servo community who participate in the Sisyphean
task of upgrading the version of Rust used in Servo. Thanks, Manish!&lt;/p&gt;
&lt;h1&gt;Community&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/21m5jf/rust_vs_go/"&gt;Rust vs Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/rustlang"&gt;Rust is now on Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/21ofma/how_similar_is_rust_to_go/"&gt;How similar is Rust to
  Go?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/21t8n8/safe_synchronization_primitives_and_their/"&gt;Safe Synchronization Primitives and their
  implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/21wu1c/simple_typebased_alias_analysis_for_rust/"&gt;Simple Type-Based Alias Analysis for
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reminder: &lt;code&gt;~[T]&lt;/code&gt; &lt;a href="http://www.reddit.com/r/rust/comments/2213vw/reminder_t_is_not_going_away/"&gt;is not going away&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/2212j2/higherkinded_polymorphism/"&gt;Higher-kinded
  polymorpihsm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/226ax6/a_more_detailed_tour_of_the_rust_compiler/"&gt;A More Detailed Tour of the Rust
  Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/228ou3/another_brain_dump_data_structures/"&gt;Another brain dump - data
  structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/227o5n/rust_me_im_a_developer_slides_and_commentary_from/"&gt;Rust Me, I'm a
  Developer!&lt;/a&gt;,
  (slides and commentary from a talk given at Stir Trek 2014)&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 43</title><link href="http://this-week-in-rust.org/blog/2014/03/29/this-week-in-rust-43/" rel="alternate"></link><updated>2014-03-29T21:56:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-03-29:blog/2014/03/29/this-week-in-rust-43/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The 0.10 release will likely be this week. 3 months from 0.9 is April 3.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;63 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;sync&lt;/code&gt; crate &lt;a href="https://github.com/mozilla/rust/pull/12900"&gt;has seen some significant
  cleanup&lt;/a&gt;. In particular,
  &lt;code&gt;RWArc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;MutexArc&amp;lt;T&amp;gt;&lt;/code&gt; have been removed. &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RWLock&amp;lt;T&amp;gt;&lt;/code&gt;
  have been introduced, and can be used as &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; and
  &lt;code&gt;Arc&amp;lt;RWLock&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to replace &lt;code&gt;RWArc&lt;/code&gt; and &lt;code&gt;MutexArc&lt;/code&gt;. There are some other
  minor changes, see the pull request.&lt;/li&gt;
&lt;li&gt;Taking a reference to a static whose type contains an &lt;code&gt;Unsafe&amp;lt;T&amp;gt;&lt;/code&gt; somewhere
  &lt;a href="https://github.com/mozilla/rust/pull/13083"&gt;is now forbidden&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Extendable&lt;/code&gt; and &lt;code&gt;FromIterator&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13039"&gt;now take their argument
  by-value&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The crate map &lt;a href="https://github.com/mozilla/rust/pull/13117"&gt;has been
  removed&lt;/a&gt;, and with it a
  significant amount of complexity. As a consequence of its removal,
  &lt;code&gt;green::start&lt;/code&gt; now takes the event loop it should use as an argument rather
  than looking in the crate map. &lt;a href="http://static.rust-lang.org/doc/master/green/index.html#starting-with-libgreen"&gt;The documentation has an
  example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The syntax for bounds on generic paths &lt;a href="https://github.com/mozilla/rust/pull/13079"&gt;has
  changed&lt;/a&gt; from
  &lt;code&gt;Foo:Bound&amp;lt;Params&amp;gt;&lt;/code&gt; to &lt;code&gt;Foo&amp;lt;Params&amp;gt;:Bound&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The default &lt;code&gt;Send&lt;/code&gt; bound on trait objects &lt;a href="https://github.com/mozilla/rust/pull/13050"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;serialize&lt;/code&gt; infrastructure &lt;a href="https://github.com/mozilla/rust/pull/13107"&gt;now supports error reporting via
  &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13160"&gt;has been renamed&lt;/a&gt; to
  &lt;code&gt;Copy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The attribute syntax &lt;a href="https://github.com/mozilla/rust/pull/13162"&gt;has
  changed&lt;/a&gt;. Rather than saying
  &lt;code&gt;#[crate_type = "bin"];&lt;/code&gt; (with a significant semicolon), you say
  &lt;code&gt;#![crate_type = "bin"]&lt;/code&gt; (no semicolon).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collections::List&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13183"&gt;has been
  removed&lt;/a&gt;. Use a vector, or
  &lt;code&gt;collections::DList&lt;/code&gt; if you really want a linked list. Persistent data
  structures will live in a different crate than &lt;code&gt;collections&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;fill&lt;/code&gt; method &lt;a href="https://github.com/mozilla/rust/pull/13049"&gt;has been added&lt;/a&gt;
  to &lt;code&gt;Reader&lt;/code&gt;, for reading an exact amount of bytes or erroring.&lt;/li&gt;
&lt;li&gt;As
  &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html"&gt;discussed&lt;/a&gt;
  on the mailing list some months ago, &lt;a href="https://github.com/mozilla/rust/pull/12991"&gt;synchronous, bounded
  channels&lt;/a&gt; have been added.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Share&lt;/code&gt;'s documentation &lt;a href="https://github.com/mozilla/rust/pull/13070"&gt;has been
  expanded&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A straggler from the doc sprint, &lt;a href="https://github.com/mozilla/rust/pull/13135"&gt;a few hundred lines of
  documentation&lt;/a&gt; have been added
  to &lt;code&gt;std&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some handy methods &lt;a href="https://github.com/mozilla/rust/pull/12780"&gt;have been
  added&lt;/a&gt; to &lt;code&gt;Json&lt;/code&gt; to make
  searching and selecting elements from JSON objects easier.&lt;/li&gt;
&lt;li&gt;There's a &lt;a href="https://github.com/mozilla/rust/pull/13108"&gt;new warn-by-default
  lint&lt;/a&gt; for deriving traits on
  types which contain raw pointers.&lt;/li&gt;
&lt;li&gt;Many confusing lifetime-related ICE's &lt;a href="https://github.com/mozilla/rust/pull/13157"&gt;have been
  fixed&lt;/a&gt;. This is good progress
  towards closing &lt;a href="https://github.com/mozilla/rust/issues/5121"&gt;the notorious issue
  5121&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We can now &lt;a href="https://github.com/mozilla/rust/pull/13143"&gt;emit debuginfo for
  &lt;code&gt;static&lt;/code&gt;s&lt;/a&gt;. Yay debuginfo!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Davis Silverman&lt;/li&gt;
&lt;li&gt;Noam Gagliardi Rabinovich&lt;/li&gt;
&lt;li&gt;Sean McArthur&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-25"&gt;meeting this
week&lt;/a&gt;
discussed various things: attribute parsing in macros, opt-in built-in traits,
SIMD, allowing square brackets in macro invocation, allowing bounds on type
parameters in structs, private fields by default, the fate of
&lt;code&gt;collections::List&lt;/code&gt;, and bounds on trait paths.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/23"&gt;Smaller refcounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/22"&gt;Deserializing to a stream of tagged
  values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/20"&gt;Allow bounds on all type
  parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Project Updates&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/KokaKiwi/rust-highlight"&gt;rust-highlight&lt;/a&gt; can be used to
  highlight Rust code in LaTeX, HTML, and JSON.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arjantop/rust-tabular"&gt;rust-tabular&lt;/a&gt;, a library for
  handling delimiter-separated values (commas, tabs, or any other character),
  as well as fixed columns of fixed width.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BurntSushi/rust-csv"&gt;rust-csv&lt;/a&gt;, a CSV library which
  implements &lt;code&gt;Encoder&lt;/code&gt; and &lt;code&gt;Decoder&lt;/code&gt; for &lt;code&gt;serialize&lt;/code&gt; support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last two weeks, we landed 33 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lars Bergstrom landed a Rust upgrade, bringing us to late February in
  &lt;a href="https://github.com/mozilla/servo/pull/1934"&gt;#1934&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ms2ger cleaned up some sketchy use of unsafe native pointers, wrapping them
  in a &lt;code&gt;JS&amp;lt;T&amp;gt;&lt;/code&gt; in &lt;a href="https://github.com/mozilla/servo/pull/1915"&gt;#1915&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matt Brubeck named the WorkQueue tasks so that we'll know where failure is
  coming from during parallel layout in
  &lt;a href="https://github.com/mozilla/servo/pull/1977"&gt;#1977&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Matt Brubeck (mbrubeck)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;Patrick Walton authored and combined the final set of changes required to get
Servo &lt;a href="https://twitter.com/pcwalton/status/449299846873108480"&gt;passing ACID2&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Matthew Brubeck has joined the Servo team full-time, coming over from the
Firefox Metro project.&lt;/p&gt;
&lt;p&gt;In the meeting &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-17"&gt;two weeks
ago&lt;/a&gt;, we discussed
the Rust upgrade, z-index support, and ACID2. In the most recent
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-24"&gt;meeting&lt;/a&gt;, we
provided an update on ACID2 and the status of Servo on Android.&lt;/p&gt;
&lt;h1&gt;Other Announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009223.html"&gt;Official Installers and
  Nightlies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 42</title><link href="http://this-week-in-rust.org/blog/2014/03/24/this-week-in-rust-42/" rel="alternate"></link><updated>2014-03-24T23:33:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-03-24:blog/2014/03/24/this-week-in-rust-42/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This weeks flips the switch from libgreen-by-default to libnative-by-default.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;91 pull requests were merged this week, topping the &lt;a href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/"&gt;previous
record&lt;/a&gt; of 89.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Logging &lt;a href="https://github.com/mozilla/rust/pull/12791"&gt;has been extracted to its own
  crate&lt;/a&gt;. Using the logging macros
  (&lt;code&gt;debug!&lt;/code&gt; etc) now requires a &lt;code&gt;#[phase(syntax, link)] extern crate log;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AtomicFlag&lt;/code&gt; type &lt;a href="https://github.com/mozilla/rust/pull/12951"&gt;has been
 removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::vec&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12772"&gt;has been renamed&lt;/a&gt; to
  &lt;code&gt;std::slice&lt;/code&gt;, and the old &lt;code&gt;std::vec_ng&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13028"&gt;moved into its
  place&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Share&lt;/code&gt; built-in trait &lt;a href="https://github.com/mozilla/rust/pull/12686"&gt;has been
  added&lt;/a&gt;. It also adds an
  &lt;code&gt;Unsafe&amp;lt;T&amp;gt;&lt;/code&gt; type, which is now the &lt;em&gt;only&lt;/em&gt; "safe" way of achieving internal
  mutability (what the &lt;code&gt;Cell&lt;/code&gt; types etc do). This &lt;code&gt;Share&lt;/code&gt; trait means that the
  type is thread-safe. See the pull request for more details. In particular,
  taking the address of a static who contains an &lt;code&gt;Unsafe&lt;/code&gt; member is not
  allowed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cast::transmute_immut_unsafe&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13015"&gt;has been
  removed&lt;/a&gt; because it is
  expressible by safe code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libnative&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12833"&gt;is now the default
  runtime&lt;/a&gt;. In the process, the
  &lt;code&gt;#[no_uv]&lt;/code&gt; attribute was renamed to &lt;code&gt;#[no_start]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Atomics &lt;a href="https://github.com/mozilla/rust/pull/13036"&gt;no longer require mutable references to
  change&lt;/a&gt;, due to the work on
  &lt;code&gt;Share&lt;/code&gt;, they can safely use interior mutability. Additionally, the generic
  atomics have been hidden and &lt;code&gt;AtomicU64&lt;/code&gt; has been removed, because not all
  targets support it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;push_bytes&lt;/code&gt; and &lt;code&gt;read_bytes&lt;/code&gt; methods on &lt;code&gt;Reader&lt;/code&gt; and &lt;code&gt;Writer&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12907"&gt;have
  been renamed&lt;/a&gt; for clarity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RefCell::with&lt;/code&gt; and &lt;code&gt;RefCell::with_mut&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13052"&gt;have been
  removed&lt;/a&gt;, because the Deref
  changes make them unnecessary.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;get&lt;/code&gt; methods on &lt;code&gt;Ref&lt;/code&gt; and &lt;code&gt;RefMut&lt;/code&gt; (helpers returned by &lt;code&gt;RefCell&lt;/code&gt;)
  &lt;a href="https://github.com/mozilla/rust/pull/13053"&gt;have been removed&lt;/a&gt;, because
  the Deref changes make them unnecessary.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Freeze&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/13076"&gt;has been
  removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::managed&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13089"&gt;has been
  removed&lt;/a&gt; from the public API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13088"&gt;now correctly uses
  &lt;code&gt;TotalEq&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;to_owned_vec&lt;/code&gt; method on &lt;code&gt;Iterator&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/13090"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;equals&lt;/code&gt; method &lt;a href="https://github.com/mozilla/rust/pull/13102"&gt;has been
  removed&lt;/a&gt; from &lt;code&gt;TotalEq&lt;/code&gt;, due to
  the recent changes in &lt;code&gt;TotalEq&lt;/code&gt;'s semantics.&lt;/li&gt;
&lt;li&gt;Trait implementations may &lt;a href="https://github.com/mozilla/rust/pull/13006"&gt;no
  longer&lt;/a&gt; implement a method
  twice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Some bugs with cross-crate autoderef &lt;a href="https://github.com/mozilla/rust/pull/13087"&gt;have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some Windows issues with non-English locales &lt;a href="https://github.com/mozilla/rust/pull/13078"&gt;have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Removing two words from a structure in libsyntax &lt;a href="https://github.com/mozilla/rust/pull/13016"&gt;shaved 100MB off the
  librustc compile&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some well-placed indirection in librustc &lt;a href="https://github.com/mozilla/rust/pull/13013"&gt;shaved 200MB off the librustc
  compile&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Discarding some data after it's no longer useful &lt;a href="https://github.com/mozilla/rust/pull/12770"&gt;shaved another 100MB off
  the librustc compile&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The new attribute syntax &lt;a href="https://github.com/mozilla/rust/pull/13037"&gt;has been
  implemented&lt;/a&gt;, though the old has
  not yet been replaced.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vec&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/13020"&gt;now in the prelude&lt;/a&gt;,
  as well as the lint for uses of &lt;code&gt;~[T]&lt;/code&gt; being made allow by default.&lt;/li&gt;
&lt;li&gt;Some false positives for crate searching &lt;a href="https://github.com/mozilla/rust/pull/13017"&gt;have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A few bugs with struct ABI on x86 &lt;a href="https://github.com/mozilla/rust/pull/12762"&gt;have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mutable slices in &lt;code&gt;static mut&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12742"&gt;are now
  allowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;@&lt;/code&gt; has been removed from rustc, &lt;a href="https://github.com/mozilla/rust/pull/12735"&gt;yielding an 11k line
  patch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigint&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12924"&gt;has seen some
  optimization&lt;/a&gt;, though not major.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href="http://www.meetup.com/Rust-Bay-Area/events/168366122/"&gt;doc sprint&lt;/a&gt;
happened last week. A bunch of pull requests for docs for this landed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::ops&lt;/code&gt; (from the rollup)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12940"&gt;&lt;code&gt;time::Tm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12942"&gt;&lt;code&gt;getopts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12944"&gt;Endian conversion in
  &lt;code&gt;std::mem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12954"&gt;&lt;code&gt;std::sync::atomics&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12955"&gt;&lt;code&gt;std::vec_ng&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12982"&gt;&lt;code&gt;std::option&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12948"&gt;&lt;code&gt;term&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Eunchong Yu&lt;/li&gt;
&lt;li&gt;Jonathan S&lt;/li&gt;
&lt;li&gt;Jorge Aparicio&lt;/li&gt;
&lt;li&gt;Ms2ger&lt;/li&gt;
&lt;li&gt;Olle Jonsson&lt;/li&gt;
&lt;li&gt;Ryan Scheel (Havvy)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-18"&gt;weekly
meeting&lt;/a&gt;
discussed using GitHub for RFCs, the docsprint, and one of the RFCs.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;p&gt;Some new RFCs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/12"&gt;Tweaked Variance Inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another struct inheritance RFC, &lt;a href="https://github.com/rust-lang/rfcs/pull/11"&gt;extending
  enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another one, &lt;a href="https://github.com/rust-lang/rfcs/pull/10"&gt;&lt;code&gt;abstract struct&lt;/code&gt; and &lt;code&gt;abstract
  enum&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/18"&gt;Unsurprising module imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/17"&gt;&lt;code&gt;Iterable&lt;/code&gt; trait family&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/16"&gt;Attributes on match arms and
  statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/15"&gt;SIMD Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/19"&gt;Opt-in builtin traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Project Updates&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/dobkeratops/rustfind"&gt;rustfind&lt;/a&gt;, doomlord's code browser
for Rust, &lt;a href="http://www.reddit.com/r/rust/comments/20q3uz/rustfind_code_browser/"&gt;has been updated&lt;/a&gt;.
This is a very nice librustc-integrated tool that supports jump-to-definition.&lt;/p&gt;
&lt;p&gt;Relatedly, I'm reminded of &lt;a href="https://github.com/dobkeratops/unfold"&gt;unfold&lt;/a&gt;,
doomlord's tool for displaying "brace context" of code. It includes an "rg"
script, which is a simple grep for item definitions.&lt;/p&gt;
&lt;p&gt;In leiu of a "This Week in Servo", Servo &lt;a href="http://imgur.com/a/O667X"&gt;has been making
progress&lt;/a&gt; on &lt;a href="http://acid2.acidtests.org/"&gt;Acid2&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Other Announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nethack4.org/blog/memory.html"&gt;Memory Management in C Programs&lt;/a&gt; --
  this is a very well written article from the nethack team. All the concepts
  discussed within apply to Rust.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.babelmonkeys.de/2014/03/18/dst.html"&gt;Dynamically Sized Types in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009087.html"&gt;Announcing the new Rust package manager,
  Cargo&lt;/a&gt;.
  It's on &lt;a href="https://github.com/carlhuda/cargo"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dwarfstd.org/ShowIssue.php?issue=140129.1"&gt;Rust is in the next DWARF
  standard!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/20nnkk/rust_and_emscripten_a_small_success/"&gt;A success story of Rust and
  emscripten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Rust-London-User-Group/"&gt;A Rust meetup group in
  London&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.com.br/2014/03/subtyping-and-coercion-in-rust.html"&gt;Subtyping and coercion in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 41</title><link href="http://this-week-in-rust.org/blog/2014/03/15/this-week-in-rust-41/" rel="alternate"></link><updated>2014-03-15T23:33:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-03-15:blog/2014/03/15/this-week-in-rust-41/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;66 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Some more string methods &lt;a href="https://github.com/mozilla/rust/pull/12797"&gt;now return
Option&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Matching on &lt;code&gt;~str&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12756"&gt;has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;IO iterators &lt;a href="https://github.com/mozilla/rust/pull/12414"&gt;now yield
IoResult&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The channel types and constructor &lt;a href="https://github.com/mozilla/rust/pull/12815"&gt;have been
renamed&lt;/a&gt;. &lt;code&gt;Chan&lt;/code&gt; is now &lt;code&gt;Sender&lt;/code&gt;,
&lt;code&gt;Port&lt;/code&gt; is now &lt;code&gt;Receiver&lt;/code&gt;, and &lt;code&gt;Chan::new&lt;/code&gt; is now &lt;code&gt;std::comm::channel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cmp::{min, max}&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12869"&gt;now require
TotalOrd&lt;/a&gt;. For floats, use
&lt;code&gt;a.min(b)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The handling of &lt;code&gt;cfg(not(a, b))&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12893"&gt;has changed
slightly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libextra&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12896"&gt;has finally been
purged&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Another great PR from the illustrious ktt3ja, the compiler &lt;a href="https://github.com/mozilla/rust/pull/12238"&gt;will now give
suggestions&lt;/a&gt; on how to fix
lifetime woes. This is an awesome usability improvement.&lt;/li&gt;
&lt;li&gt;Implementations of &lt;code&gt;Deref&lt;/code&gt; and &lt;code&gt;DerefMut&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12610"&gt;are now
considered&lt;/a&gt; for automatic
dereferencing.&lt;/li&gt;
&lt;li&gt;Partial type hints &lt;a href="https://github.com/mozilla/rust/pull/12764"&gt;are now
implemented&lt;/a&gt;, but not at the item
level (in function returns etc). The eventual goal is to have
&lt;code&gt;some_iter.collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()&lt;/code&gt; be possible.&lt;/li&gt;
&lt;li&gt;There is a &lt;a href="http://static.rust-lang.org/doc/master/guide-unsafe.html"&gt;new
guide&lt;/a&gt; for "low level and unsafe code".
&lt;a href="https://github.com/mozilla/rust/pull/12887"&gt;PR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is now a lint for &lt;a href="https://github.com/mozilla/rust/pull/12861"&gt;uses of
&lt;code&gt;~[T]&lt;/code&gt;&lt;/a&gt;. It's very verbose. The
replacement for &lt;code&gt;~[T]&lt;/code&gt;, as recommended by the lint, is &lt;code&gt;std::vec_ng::Vec&amp;lt;T&amp;gt;&lt;/code&gt;.
It implements almost everything &lt;code&gt;~[T]&lt;/code&gt; does.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12081"&gt;has been
reimplemented&lt;/a&gt; to use &lt;a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/"&gt;Robin Hood
hashing&lt;/a&gt;. It's now much
more faster, and uses less space.&lt;/li&gt;
&lt;li&gt;Support for basic backtracing &lt;a href="https://github.com/mozilla/rust/pull/12602"&gt;has been
reimplemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12561"&gt;now has simple case
folding&lt;/a&gt;. That is, basic
locale-ignorant case conversion.&lt;/li&gt;
&lt;li&gt;Inline assembly &lt;a href="https://github.com/mozilla/rust/pull/12798"&gt;now supports the &lt;code&gt;+&lt;/code&gt;
modifier&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adolfo Ochagavía&lt;/li&gt;
&lt;li&gt;Clark Gaebel&lt;/li&gt;
&lt;li&gt;Peter Marheine&lt;/li&gt;
&lt;li&gt;Piotr Czarnecki&lt;/li&gt;
&lt;li&gt;Piotr Zolnierek&lt;/li&gt;
&lt;li&gt;Robert Gawdzik&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-11"&gt;weekly
meeting&lt;/a&gt;
discussed the new hashmap, destructuring the &lt;code&gt;self&lt;/code&gt; argument, partial type
hints, coercion of returned values, as well as the requirements of unsafe
pointers and the continued existence of &lt;code&gt;*mut&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;In the last two weeks, we landed 56 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Walton made fixes to ACID in
&lt;a href="https://github.com/mozilla/servo/pull/1905"&gt;#1905&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Along with about 20 other PRs, ms2ger brought WindowTimers up to date with
the spec in &lt;a href="https://github.com/mozilla/servo/pull/1890"&gt;#1890&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pradeep Kumar implemented &lt;code&gt;position:absolute&lt;/code&gt; in
&lt;a href="https://github.com/mozilla/servo/pull/1681"&gt;#1681&lt;/a&gt; and fixed up relative
positioning in &lt;a href="https://github.com/mozilla/servo/pull/1808"&gt;#1808&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bill Yang fixed up our instructions for installation on Ubuntu Linux in
&lt;a href="https://github.com/mozilla/servo/pull/1881"&gt;#1881&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bruno Abinader fixed up HTMLCollection in
&lt;a href="https://github.com/mozilla/servo/pull/1838"&gt;#1838&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Isabelle Carter ensured that children of &lt;code&gt;position:fixed&lt;/code&gt; items make it into
the correct DisplayList in &lt;a href="https://github.com/mozilla/servo/pull/1832"&gt;#1832&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manish Goregaokar made &lt;code&gt;getElementsByName&lt;/code&gt; return a &lt;code&gt;NodeList&lt;/code&gt; in
&lt;a href="https://github.com/mozilla/servo/pull/1756"&gt;#1756&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keegan McAllister cleaned up our reftest harness and made them test both the
CPU and GPU rendering paths in
&lt;a href="https://github.com/mozilla/servo/pull/1804"&gt;#1804&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bill Yang (analyst74)&lt;/li&gt;
&lt;li&gt;Manish Goregaokar (manishearth)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings and Notes&lt;/h2&gt;
&lt;p&gt;At this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-10"&gt;meeting&lt;/a&gt;, we
discussed HTML parsing, embedding, writing modes, the ACID2 burndown, and the
Rust upgrade.&lt;/p&gt;
&lt;h1&gt;RFCs&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rfcs/blob/master/active/0001-rfc-process.md"&gt;We have a new RFC
process&lt;/a&gt;!
Every week I'll list the new RFCs and RFCs that have been accepted.
Contributing to the discussions around these RFCs is the easiest way to drive
the design of Rust.&lt;/p&gt;
&lt;p&gt;As an aside, I will no longer include any RFCs in the "Announcements" section
that are not sent to the RFC repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/1"&gt;Private Fields by Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3"&gt;Rearchitecting the attribute-usage lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/4"&gt;Unified Function Call Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/5"&gt;Virtual Structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/7"&gt;Add OsUnknown as a target operating system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/8"&gt;Redesign Compiler Intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/9"&gt;"Fat Objects" for DSTs&lt;/a&gt;, an
alternative to "Virtual Structs".&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Project Updates&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/arjantop/rust-bencode"&gt;rust-bencode&lt;/a&gt;, a pure Rust
implementation of Bencode encoding.
&lt;a href="http://en.wikipedia.org/wiki/Bencode"&gt;Bencode&lt;/a&gt; is used primarily in the
BitTorrent protocol. This implementation leverages the &lt;code&gt;serialize&lt;/code&gt; crate for
automatic Encodable/Decodable implementation as well as custom, more flexible
FromBencode/ToBencode traits.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/Kimundi/8782487"&gt;Lazily initialized statics v0.2&lt;/a&gt;.
This makes safe use of statics for types which require runtime initialization
almost trivial. It utilizes the recent overloadable deref to do optional
initialization before returning the reference to the wrapped type. It's an
example that the right amount of abstractions, but syntactic (macros) and
semantic (operator overloading) can reduce boilerplate for a more pleasant
experience.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/phildawes/racer"&gt;Racer&lt;/a&gt; - code completion for Rust. This
project is in its early stages, but can already do a fair bit of useful
completion. It is not using the parser (libsyntax) or compiler (librustc), so
it will likely always be inaccurate in some respect. Nevertheless, this may
prove to be an incredibly useful tool.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/quickcheck"&gt;QuickCheck for Rust&lt;/a&gt;. This has some
seriously great docs. QuickCheck, originally from Haskell, is a way of doing
property-based testing. You describe certain properties your code should have
and it generates random inputs, trying to find inputs that violate those
properties. This is a modern, featureful port of QuickCheck and hopefully gets
even more useful as time goes on.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/uutils/coreutils"&gt;coreutils port&lt;/a&gt; is still alive and
making progress. 32 out of 119 programs are implemented. This is a great
project to contribute to if you want a relatively self-contained,
goal-oriented task. It's great practice both for learning Unix* (some of these
utilities are quirky or not-frequently-used) and Rust.&lt;/p&gt;
&lt;p&gt;* Well, specifically GNU, which as we all know, &lt;a href="https://en.wikipedia.org/wiki/GNU"&gt;ain't
Unix&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Other Announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.fastcolabs.com/3027664/under-the-hood-of-mozillas-new-multi-core-browser-and-the-open-source-language-that-powers-i"&gt;Under The Hood Of Mozilla's New Multi-Core Browser And The Open Source
Language That Powers
It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/20ct5c/march_meetup_live_stream_link_oss_parallel_layout/"&gt;Bay Area Rust, March 2014
Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/20aj03/writing_an_os_in_rust_in_tiny_steps_steps_15/"&gt;Writing an OS in Rust in tiny
steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/8878"&gt;"Virtual fn" is a bad
idea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 40</title><link href="http://this-week-in-rust.org/blog/2014/03/11/this-week-in-rust-40/" rel="alternate"></link><updated>2014-03-11T23:45:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-03-11:blog/2014/03/11/this-week-in-rust-40/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This week was the Winter Workweek.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;66 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12667"&gt;has been cleaned up&lt;/a&gt;, and
in particular the &lt;code&gt;as_void_ptr&lt;/code&gt; and &lt;code&gt;as_mut_void_ptr&lt;/code&gt; methods are gone.&lt;/li&gt;
&lt;li&gt;Patterns are &lt;a href="https://github.com/mozilla/rust/pull/12715"&gt;no longer allowed in extern function
declarations&lt;/a&gt;. Previously, they
either silently passed or ICEd.&lt;/li&gt;
&lt;li&gt;Comparison traits &lt;a href="https://github.com/mozilla/rust/pull/12520"&gt;have been
reworked&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;DeepClone &lt;a href="https://github.com/mozilla/rust/pull/12706"&gt;has been removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Compound assignment (eg, &lt;code&gt;+=&lt;/code&gt;) &lt;a href="https://github.com/mozilla/rust/pull/12733"&gt;is no longer
allowed&lt;/a&gt; on potentially
uninitialized variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::rand&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12650"&gt;has been moved into a
&lt;code&gt;librand&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;debuginfo flags &lt;a href="https://github.com/mozilla/rust/pull/12714"&gt;have changed
slightly&lt;/a&gt;, and more limited
debuginfo is supported again (only line number information).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dereferencing &lt;a href="https://github.com/mozilla/rust/pull/12491"&gt;is now
overloadable&lt;/a&gt;. This is another
part of the smart pointer changes. Code like &lt;code&gt;let x = *Rc::new(5);&lt;/code&gt; is now
valid. There is a follow-up pull request that will automatically dereference
smart pointers where appropriate, to avoid expressions like
&lt;code&gt;foo.borrow().get().borrow_mut().get()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hexadecimal floating point literals &lt;a href="https://github.com/mozilla/rust/pull/12652"&gt;are now
available&lt;/a&gt; through a syntax
extension.&lt;/li&gt;
&lt;li&gt;Support for creating binary installer tarballs &lt;a href="https://github.com/mozilla/rust/pull/12793"&gt;has
landed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Linker arguments &lt;a href="https://github.com/mozilla/rust/pull/12688"&gt;are no longer
deduplicated&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Weak linkage etc &lt;a href="https://github.com/mozilla/rust/pull/12556"&gt;is now
possible&lt;/a&gt; via a &lt;code&gt;linkage&lt;/code&gt;
attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dmitry Promsky&lt;/li&gt;
&lt;li&gt;Mike Boutin&lt;/li&gt;
&lt;li&gt;Robert Gawdzik&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;There was no weekly meeting due to the workweek. There are &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-workweek-2014-03-03"&gt;notes and
minutes&lt;/a&gt;,
however, and there will be many &lt;a href="https://github.com/rust-lang/rfcs"&gt;RFCs&lt;/a&gt; from
it.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/20143y/leveraging_tuples_to_make_a_statically_typed/"&gt;Leveraging tuples to make a statically-typed, concatenative
EDSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://featherweightmusings.blogspot.com/2014/03/subtyping-and-coercion-in-rust.html"&gt;Subtyping and coercion in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ztahv/rust_language_support_in_atom/"&gt;Rust support for the Atom
editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 39</title><link href="http://this-week-in-rust.org/blog/2014/03/02/this-week-in-rust-39/" rel="alternate"></link><updated>2014-03-02T12:43:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-03-02:blog/2014/03/02/this-week-in-rust-39/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;83 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IterBytes and &lt;code&gt;std::to_bytes&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12492"&gt;have been
removed&lt;/a&gt;. If you were depending on
them for anything non-&lt;code&gt;Hash&lt;/code&gt; related, look into using &lt;code&gt;serialize&lt;/code&gt; instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12338"&gt;are now hygienic in
macros&lt;/a&gt;, with respect to labels.
Unfortunately there's a bug in it where &lt;a href="https://github.com/mozilla/rust/issues/12512"&gt;loop labels hide variables of the
same name&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extern fn&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12328"&gt;now always means &lt;code&gt;extern "C"
fn&lt;/code&gt;&lt;/a&gt;, rather than being
context-dependent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::run&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12380"&gt;has been removed&lt;/a&gt;,
and &lt;code&gt;std::io::process&lt;/code&gt; improved to pick up the slack.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[deriving(ToStr)]&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12412"&gt;has been
removed&lt;/a&gt; in favor of
&lt;code&gt;#[deriving(Show)]&lt;/code&gt;. &lt;code&gt;ToStr&lt;/code&gt; is now implemented over all types which implement
&lt;code&gt;Show&lt;/code&gt;, as &lt;code&gt;format!("{}" val)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flate&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12445"&gt;now returns a
&lt;code&gt;CVec&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/a&gt; rather than a &lt;code&gt;~[u8]&lt;/code&gt;,
for efficiency.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::json&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12453"&gt;has been
liberated&lt;/a&gt; and now lives in
&lt;code&gt;libserialize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap_remove&lt;/code&gt; on vectors &lt;a href="https://github.com/mozilla/rust/pull/12481"&gt;now returns an
&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A curious bug where bindings in match weren't treated as assignment &lt;a href="https://github.com/mozilla/rust/pull/12508"&gt;has
been fixed&lt;/a&gt;. See the associated
bug report for examples which this will break.&lt;/li&gt;
&lt;li&gt;Some useless reexports &lt;a href="https://github.com/mozilla/rust/pull/12485"&gt;have been
removed&lt;/a&gt; from the prelude.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Bool&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/12473"&gt;has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bug where operator overloads were over-zealous &lt;a href="https://github.com/mozilla/rust/pull/12493"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Statics are &lt;a href="https://github.com/mozilla/rust/pull/11979"&gt;no longer allowed to contain anything with
destructors&lt;/a&gt;. The exact rules are
laid out quite nicely in the PR.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collections:List&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12348"&gt;has been refactored to use
iterators&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12544"&gt;is now generic over
hashers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_eq!&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12626"&gt;now uses &lt;code&gt;{}&lt;/code&gt; instead of &lt;code&gt;{:?}&lt;/code&gt; for the error
message&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Type parameter overrides &lt;a href="https://github.com/mozilla/rust/pull/12525"&gt;are now feature
gated&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Invalid crate handling &lt;a href="https://github.com/mozilla/rust/pull/12645"&gt;is now more
graceful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::io::stdout()&lt;/code&gt; and &lt;code&gt;stderr()&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12630"&gt;are buffered by default
now&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Improper operator overloads &lt;a href="https://github.com/mozilla/rust/pull/12638"&gt;are no longer an
ICE&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There's now a warning for &lt;a href="https://github.com/mozilla/rust/pull/12595"&gt;publicly exposing private types in function
signatures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libnative&lt;/code&gt;'s Windows file handling &lt;a href="https://github.com/mozilla/rust/pull/12584"&gt;has been
rewritten&lt;/a&gt; and now actually works.
rustc uses libnative by default now.&lt;/li&gt;
&lt;li&gt;Generated binary size &lt;a href="https://github.com/mozilla/rust/pull/12616"&gt;has been brought down a
bit&lt;/a&gt;. There is much more room for
improvement.&lt;/li&gt;
&lt;li&gt;"Strict Version Hashes" &lt;a href="https://github.com/mozilla/rust/pull/12533"&gt;have been
introduced&lt;/a&gt;. This is a purely
internal change. The hash is of the crate's public ABI and rustc checks this
when linking crates together, to avoid problems such as "def id drift".&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Fagnan&lt;/li&gt;
&lt;li&gt;Felix Crux&lt;/li&gt;
&lt;li&gt;Gary M. Josack&lt;/li&gt;
&lt;li&gt;George Papanikolaou&lt;/li&gt;
&lt;li&gt;Jag Talon&lt;/li&gt;
&lt;li&gt;Johannes Löthberg&lt;/li&gt;
&lt;li&gt;Mickaël Delahaye&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-25"&gt;weekly
meeting&lt;/a&gt;
discussed TotalEq/TotalOrd, weak extern functions, channel naming, and a brief
discussion on &lt;code&gt;use&lt;/code&gt; paths being absolute.&lt;/p&gt;
&lt;p&gt;It was announced that a Sam Wright has been contracted to work on the
tutorial, and the Michael Woerister has been contracted to work on debug info.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 27 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Josh Matthews landed the massive changes to remove &lt;code&gt;@mut&lt;/code&gt; from the DOM types
in preparation for a Rust upgrade in
&lt;a href="https://github.com/mozilla/servo/pull/1735"&gt;#1735&lt;/a&gt;
&lt;a href="https://github.com/mozilla/servo/pull/1591"&gt;#1591&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1755"&gt;#1755&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki refactored our commandline options out of the rendering
crate and into a more reasonable place in
&lt;a href="https://github.com/mozilla/servo/pull/1738"&gt;#1738&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ms2ger simplified our Document implementation in
&lt;a href="https://github.com/mozilla/servo/pull/1739"&gt;#1739&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Walton removed the need to explicitly create leaf sets during
parallel layout in &lt;a href="https://github.com/mozilla/servo/pull/1700"&gt;#1700&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Harrison Gentry cleaned up some type names in
&lt;a href="https://github.com/mozilla/servo/pull/1781"&gt;#1781&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Keegan McAllister moved fontconfig in-tree on Linux in order to get a
thread-safe implementation in
&lt;a href="https://github.com/mozilla/servo/pull/1780"&gt;#1780&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Saurabh Anand made the DOM parser pass in the correct content types in
&lt;a href="https://github.com/mozilla/servo/pull/1775"&gt;#1775&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;tgkokk fixed the bindings generator to no longer produce .pyc files in
&lt;a href="https://github.com/mozilla/servo/pull/1735"&gt;#1735&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Saurabh Anand (sawrubh)&lt;/li&gt;
&lt;li&gt;Harrison Gentry (hgentry)&lt;/li&gt;
&lt;li&gt;tgkokk&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;At this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-24"&gt;meeting&lt;/a&gt;, we
discussed embedding, the JSManaged conversion, a Rust upgrade, vtables, and
recruiting efforts.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2014/02/28/rust-rfc-opt-in-builtin-traits/"&gt;RFC: Opt-in Builtin
Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/issues/9912#issuecomment-36073562"&gt;Structural single-inheritance
counter-proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2014/02/25/rust-rfc-stronger-guarantees-for-mutable-borrows/"&gt;RFC: Stronger Guarantees for Mutable
Borrows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kvark/dark"&gt;Dark&lt;/a&gt;, an experimental universal data
compressor based on the BWT-DC scheme&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/008832.html"&gt;cargo-lite
v1.1.0 release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pcwalton.github.io/blog/2014/02/25/revamped-parallel-layout-in-servo/"&gt;Revamped parallel layout in
servo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/rust-meetup-february-2014/"&gt;February Bay Area Rust
Recording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/brianmadden/rust-bloom-filter"&gt;A bloom filter implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hoeppnertill/redox-tween"&gt;A tweening library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 38</title><link href="http://this-week-in-rust.org/blog/2014/02/23/this-week-in-rust-38/" rel="alternate"></link><updated>2014-02-23T16:09:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-02-23:blog/2014/02/23/this-week-in-rust-38/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the busiest week in This Week in Rust's history, &lt;a href="http://buildbot.rust-lang.org/bors/bors.html"&gt;and the pull request
queue isn't getting any
shorter&lt;/a&gt;. This is a mixed
blessing: tons of work is getting done, but it takes forever to get merged.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;89 pull requests were merged this week. This is the most pull requests merged
in a week, ever. 10 1.0 issues were closed this week, and 0 opened.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unique vector patterns (matching on a &lt;code&gt;~[]&lt;/code&gt;) &lt;a href="https://github.com/mozilla/rust/pull/12244"&gt;has been removed from the
language&lt;/a&gt;. One can still match
against a slice.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::unstable&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12311"&gt;has been
dismantled&lt;/a&gt;. Even as we march
towards 1.0 stability, I will still consider changes to any public interface
breaking.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bitwise::population_count&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12331"&gt;has been
renamed&lt;/a&gt; to
&lt;code&gt;Bitwise::count_ones&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TaskBuilder&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12232"&gt;has seen some
cleanup&lt;/a&gt; to actually use the
emerging "builder" pattern.&lt;/li&gt;
&lt;li&gt;As part of &lt;code&gt;std::num&lt;/code&gt;s &lt;a href="https://github.com/mozilla/rust/issues/10387"&gt;continued
revamp&lt;/a&gt;, &lt;a href="https://github.com/mozilla/rust/pull/12321"&gt;the &lt;code&gt;Real&lt;/code&gt; trait has
been dismantled&lt;/a&gt; in favor of the
&lt;code&gt;Float&lt;/code&gt; trait.&lt;/li&gt;
&lt;li&gt;Another issue with imports &lt;a href="https://github.com/mozilla/rust/pull/12245"&gt;has been
fixed&lt;/a&gt;. In particular, when
importing an item where there are two items with the name, one private and one
public, the private one was accidentally imported too. This shouldn't affect
any code, as it's a fairly convoluted case.&lt;/li&gt;
&lt;li&gt;UTF-16 handling &lt;a href="https://github.com/mozilla/rust/pull/12317"&gt;has been
refactored&lt;/a&gt; to match the standard
string APIs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::test&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12343"&gt;has been
liberated&lt;/a&gt; into a &lt;code&gt;libtest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::time&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12411"&gt;has been
liberated&lt;/a&gt; into a &lt;code&gt;libtime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EnumSet&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12415"&gt;has been moved&lt;/a&gt; into
&lt;code&gt;libcollections&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Integer&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/12326"&gt;has
migrated&lt;/a&gt; to &lt;code&gt;libnum&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::hash&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11863"&gt;has been rewritten and
redesigned&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::trie&lt;/code&gt; and &lt;code&gt;std::hashmap&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12428"&gt;have been
moved&lt;/a&gt; into &lt;code&gt;libcollections&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pull request 12345 was opened. In the spirit of significant arbitrary
numbers, &lt;a href="https://github.com/mozilla/rust/pull/12345"&gt;it is absolutely
menial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustdoc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12298"&gt;will now test code blocks by
default&lt;/a&gt;, not requiring a "rust"
annotation.&lt;/li&gt;
&lt;li&gt;Unix domain sockets &lt;a href="https://github.com/mozilla/rust/pull/12103"&gt;are now
implemented&lt;/a&gt; in &lt;code&gt;libnative&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MutexArc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12336"&gt;no longer has a &lt;code&gt;Freeze&lt;/code&gt;
bound&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustdoc has seen &lt;a href="https://github.com/mozilla/rust/pull/12339"&gt;a bunch of minor
fixes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;More noteworthy, there is now &lt;a href="https://github.com/mozilla/rust/pull/12416"&gt;syntax
highlighting&lt;/a&gt; in rustdoc output!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;unnecessary_parens&lt;/code&gt; lint &lt;a href="https://github.com/mozilla/rust/pull/12366"&gt;now looks at
assignments&lt;/a&gt; for extraneous
parenthesis.&lt;/li&gt;
&lt;li&gt;A bug with infinitely recursing macro errors &lt;a href="https://github.com/mozilla/rust/pull/12370"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::str::is_utf8&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12314"&gt;has been internally
refactored&lt;/a&gt; to use 100% safe code,
as well as get a bit of a speed boost.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format!&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12349"&gt;now handles temporaries
better&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you find yourself working with libsyntax, &lt;a href="https://github.com/mozilla/rust/pull/12387"&gt;there is now a &lt;code&gt;-Z&lt;/code&gt;
option&lt;/a&gt; for dumping the AST as
JSON. This can be useful when trying to figure out what code corresponds to
what structure or enum variant.&lt;/li&gt;
&lt;li&gt;Using channels outside of the runtime &lt;a href="https://github.com/mozilla/rust/pull/12397"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generic Drop implementations with trait bounds &lt;a href="https://github.com/mozilla/rust/pull/12403"&gt;has been
fixed&lt;/a&gt;. Yay!&lt;/li&gt;
&lt;li&gt;Integer formatting &lt;a href="https://github.com/mozilla/rust/pull/12382"&gt;has been
rewritten&lt;/a&gt;. It's now cleaner, does
less allocation, and is 3-6x faster in many cases.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::io::stdin&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12422"&gt;is now buffered by
default&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All language items &lt;a href="https://github.com/mozilla/rust/pull/11603"&gt;must now be
reachable&lt;/a&gt;. Previously this caused
a linker error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Axel Viala&lt;/li&gt;
&lt;li&gt;Craig MacKenzie&lt;/li&gt;
&lt;li&gt;Douglas Young&lt;/li&gt;
&lt;li&gt;Dylan Braithwaite&lt;/li&gt;
&lt;li&gt;Ehsanul Hoque&lt;/li&gt;
&lt;li&gt;Sterling Greene&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-18"&gt;weekly
meeting&lt;/a&gt;
discussed the Hash changes, debug assertions, and commit log administrivia.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 15 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sankha Narayan Guria made drawing a single line much more efficient in
&lt;a href="https://github.com/mozilla/servo/pull/1709"&gt;#1709&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lars Bergstrom removed the last of the &lt;code&gt;@mut&lt;/code&gt;s not in script in
&lt;a href="https://github.com/mozilla/servo/pull/1712"&gt;#1712&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Junyoung Cho fixed up a bug where we were removing &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;s in
&lt;a href="https://github.com/mozilla/servo/issues/1727"&gt;#1727&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youngmin Yoo added support for the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; element in
&lt;a href="https://github.com/mozilla/servo/pull/1664"&gt;#1664&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keegan McAllister made use of the border box more consistent in layout
in &lt;a href="https://github.com/mozilla/servo/pull/1699"&gt;#1699&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peiyong Lin fixed up the naming of some of our flow methods in
&lt;a href="https://github.com/mozilla/servo/pull/1693"&gt;#1693&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon Sapin refactored the &lt;code&gt;cascade&lt;/code&gt; methods in
&lt;a href="https://github.com/mozilla/servo/pull/1706"&gt;#1706&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adam Sinnett corrected the parent type names of Text, Comment, and PI
types in &lt;a href="https://github.com/mozilla/servo/pull/1702"&gt;#1702&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patrick Walton added some inlining that sped up flow contruction even
more in &lt;a href="https://github.com/mozilla/servo/pull/1602"&gt;#1602&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Peiyong Lin (lpy)&lt;/li&gt;
&lt;li&gt;Adam Sinnett (quandrum)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;We did not have a meeting this week because of President's Day in the US.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drbawb/rust-story"&gt;&lt;code&gt;rust-story&lt;/code&gt;&lt;/a&gt;, a Rust port of the
"Reconstructing Cave Story" video series&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1y69r0/rlanerustgamedevkit/"&gt;&lt;code&gt;rust-gamedev-kit&lt;/code&gt;&lt;/a&gt;,
a collection of libraries for gamedev&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1yfdzh/the_periodic_table_of_rust_types/"&gt;Periodic Table of Rust
Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ykop6/so_i_wrote_a_dominion_simulator_in_rust_though/"&gt;A Dominion simulator, in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008763.html"&gt;Travis CI is building pull
requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1yr2uz/tetris_game_in_rust/"&gt;A terminal tetris game, in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 37</title><link href="http://this-week-in-rust.org/blog/2014/02/15/this-week-in-rust-37/" rel="alternate"></link><updated>2014-02-15T23:20:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-02-15:blog/2014/02/15/this-week-in-rust-37/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;86 pull requests were merged this week. This ties for week with most merged
pull requests. &lt;a href="http://cmr.github.io/blog/2013/09/23/this-week-in-rust/"&gt;A week in September 2013 is the other record
holder&lt;/a&gt;. To cope with
the massively inflated queue, there were two roll-ups (not counted).&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extern mod&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12017"&gt;is now written&lt;/a&gt;
&lt;code&gt;extern crate&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The big codegen compiler flags pull request I warned about last week &lt;a href="https://github.com/mozilla/rust/pull/12084"&gt;indeed
landed&lt;/a&gt;. Many &lt;code&gt;-Z&lt;/code&gt; options are now
under &lt;code&gt;-C&lt;/code&gt;, and a lot of previously-bare flags (such as &lt;code&gt;--linker&lt;/code&gt;) are now
also under &lt;code&gt;-C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::util&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11956"&gt;has been removed&lt;/a&gt;.
&lt;code&gt;swap&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; now live in &lt;code&gt;std::mem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; is once again &lt;a href="https://github.com/mozilla/rust/pull/12170"&gt;a reserved
word&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::rational&lt;/code&gt;, &lt;code&gt;extra::bigint&lt;/code&gt;, and &lt;code&gt;extra::complex&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12154"&gt;have been
moved&lt;/a&gt; into &lt;code&gt;libnum&lt;/code&gt; as part of
the libextra dissolution.&lt;/li&gt;
&lt;li&gt;The borrow checker's treatment of closures &lt;a href="https://github.com/mozilla/rust/pull/12158"&gt;has been
revamped&lt;/a&gt;. It fixes all known
soundness issues with closures. Unfortunately, it also breaks some programs
that used to compile.&lt;/li&gt;
&lt;li&gt;Channels &lt;a href="https://github.com/mozilla/rust/pull/11578"&gt;have been rewritten&lt;/a&gt;
to use the internally-upgradable design &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html"&gt;that was hashed out on the
list&lt;/a&gt;.
Rather than having a separate &lt;code&gt;SharedChan&lt;/code&gt;, &lt;code&gt;Chan&lt;/code&gt; is now cloneable.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Seek&lt;/code&gt; API &lt;a href="https://github.com/mozilla/rust/pull/12204"&gt;has changed a
bit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The breaking changes in the &lt;a href="https://github.com/mozilla/rust/pull/12248"&gt;first
rollup&lt;/a&gt; are the removal of
&lt;code&gt;ptr::offset&lt;/code&gt;, &lt;code&gt;ptr::mut_offset&lt;/code&gt;, &lt;code&gt;ptr::is_null&lt;/code&gt;, and &lt;code&gt;ptr::is_not_null&lt;/code&gt; as
free functions and the movement of &lt;code&gt;extra::hex&lt;/code&gt; and &lt;code&gt;extra::base64&lt;/code&gt; to
&lt;code&gt;libserialize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::num::Orderable&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12061"&gt;has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::ptr&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12282"&gt;saw some more
cleanup&lt;/a&gt;, most notably every
function ending in &lt;code&gt;_ptr&lt;/code&gt; has had that suffix removed. &lt;code&gt;to_unsafe_ptr&lt;/code&gt; and
&lt;code&gt;to_mut_unsafe_ptr&lt;/code&gt; have also been removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Process arguments and environment variables &lt;a href="https://github.com/mozilla/rust/pull/12283"&gt;now use the
&lt;code&gt;from_utf8_lossy&lt;/code&gt; function&lt;/a&gt; that
was introduced last week, rather than failing on invalid utf8. Additionally,
there are now &lt;code&gt;args_as_bytes&lt;/code&gt; and &lt;code&gt;env_as_bytes&lt;/code&gt; functions to get arguments
and the environment raw.&lt;/li&gt;
&lt;li&gt;The makefiles &lt;a href="https://github.com/mozilla/rust/pull/12274"&gt;have been
refactored&lt;/a&gt;, and there is now a
&lt;code&gt;make help&lt;/code&gt; and &lt;code&gt;make tips&lt;/code&gt; for hints on how to use the build system.&lt;/li&gt;
&lt;li&gt;In yet another multi-thousand-line patch by eddyb, &lt;a href="https://github.com/mozilla/rust/pull/12162"&gt;&lt;code&gt;ast_map::Path&lt;/code&gt; no
longer requires cloning&lt;/a&gt;, due to
clever devilry.&lt;/li&gt;
&lt;li&gt;green task spawning &lt;a href="https://github.com/mozilla/rust/pull/12172"&gt;was sped up by almost
5x&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We now &lt;a href="https://github.com/mozilla/rust/pull/12027"&gt;bundle and use
compiler-rt&lt;/a&gt; for intrinsics rather
than using the system libgcc. We still depend on libgcc for unwinding,&lt;/li&gt;
&lt;li&gt;The pidigits benchmark was made 20x faster &lt;a href="https://github.com/alexcrichton/rust/commit/7dc187afd8a19dad05dbf1a689e6b6f400f7bc0a"&gt;by optimizing
bigint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bruno de Oliveira Abinader&lt;/li&gt;
&lt;li&gt;Eduard Bopp&lt;/li&gt;
&lt;li&gt;Edward Wang&lt;/li&gt;
&lt;li&gt;Jake Kerr&lt;/li&gt;
&lt;li&gt;Liigo Zhuang&lt;/li&gt;
&lt;li&gt;Matthijs van der Vleuten&lt;/li&gt;
&lt;li&gt;Peiyong Lin&lt;/li&gt;
&lt;li&gt;Tobias Bucher&lt;/li&gt;
&lt;li&gt;WebeWizard&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-11"&gt;weekly
meeting&lt;/a&gt;
discussed struct construction sugar, what to allow in statics, the crate
keyword, a &lt;code&gt;finally&lt;/code&gt; macro, and implicit trait bounds.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 18 PRs.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bruno Abinader landed several DOM fixes, including
&lt;a href="https://github.com/mozilla/servo/pull/1648"&gt;#1648&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1646"&gt;#1646&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hyun June Kim landed initial &lt;code&gt;:hover&lt;/code&gt; support in
&lt;a href="https://github.com/mozilla/servo/pull/1633"&gt;#1633&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keegan McAllister restored task failure handling in
&lt;a href="https://github.com/mozilla/servo/pull/1691"&gt;#1691&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rui renamed the .rc files to .rs in the main Servo repository in
&lt;a href="https://github.com/mozilla/servo/pull/1617"&gt;#1617&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon Sapin made some updates to attribute selector namespaces in
&lt;a href="https://github.com/mozilla/servo/pull/1653"&gt;#1653&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1661"&gt;#1661&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lars Bergstrom began the removal of non-script-crate &lt;code&gt;@mut&lt;/code&gt;s in preparation
for a Rust upgrade in &lt;a href="https://github.com/mozilla/servo/pull/1663"&gt;#1663&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Austin King added some &lt;code&gt;window.console&lt;/code&gt; support in
&lt;a href="https://github.com/mozilla/servo/pull/1666"&gt;#1666&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Marek Šuppa landed a fix to our contributing document in
&lt;a href="https://github.com/mozilla/servo/pull/1649"&gt;#1649&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patrick Walton made extensive optimizations to style sharing in
&lt;a href="https://github.com/mozilla/servo/pull/1644"&gt;#1644&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Austin King (ozten)&lt;/li&gt;
&lt;li&gt;Marek Šuppa (mrshu)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-10"&gt;meeting&lt;/a&gt;, we
discussed our embedding plans, ACID2 status, improving the availability of
E-Easy issues, and doing a Rust upgrade (we are more than one month behind
Rust master).&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;p&gt;There is simply too much happening in the community to keep track of! I
recommend browsing &lt;a href="http://www.reddit.com/r/rust"&gt;the Rust subreddit&lt;/a&gt; for
goings-on. Some notable ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pzol.github.io/getting_rusty/posts/20140203_hashmap/"&gt;Rust By Example:
HashMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/bvssvni/8970459"&gt;State machines using phantom
types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://golo-lang.org/"&gt;golo-lang.org&lt;/a&gt;'s homepage design &lt;a href="http://adridu59.github.io/rust-www/"&gt;adapted to
Rust&lt;/a&gt;. There is some discussion &lt;a href="http://www.reddit.com/r/rust/comments/1xx3ll/rfc_gololangorg_ported_to_rust/"&gt;on
reddit&lt;/a&gt;
about this.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 36</title><link href="http://this-week-in-rust.org/blog/2014/02/09/this-week-in-rust-36/" rel="alternate"></link><updated>2014-02-09T22:15:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-02-09:blog/2014/02/09/this-week-in-rust-36/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There were a surprising number of breaking changes this week. The &lt;a href="https://github.com/mozilla/rust/issues/8784"&gt;libextra
dissolution continues&lt;/a&gt;. Condition
removal and the IO error overhaul also landed. &lt;code&gt;rustpkg&lt;/code&gt; was also removed, and
rustc's CLI interface has changed.  Additionally, Rust gained another
full-time developer! A big hello to Nick Cameron, I look forward to seeing his
work.&lt;/p&gt;
&lt;p&gt;It was also &lt;a href="http://octoverse.github.com/"&gt;discovered&lt;/a&gt; that we closed the
second largest number of issues of any repository on GitHub! We trailed behind
homebrew, which is almost cheating, because they use it to track issues on
over five thousand packages. Good job everyone!&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;72 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Some intrinsics &lt;a href="https://github.com/mozilla/rust/pull/12124"&gt;have been
moved&lt;/a&gt; into &lt;code&gt;std::mem&lt;/code&gt;, in
preparations of the intrinsics no longer being publically exposed.&lt;/li&gt;
&lt;li&gt;A soundness regression &lt;a href="https://github.com/mozilla/rust/pull/12117"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12086"&gt;now has range asserts&lt;/a&gt;.
This may cause invalid uses of &lt;code&gt;char&lt;/code&gt; (using invalid values) to break.&lt;/li&gt;
&lt;li&gt;The various traits in &lt;code&gt;std::fmt&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12066"&gt;now use
&lt;code&gt;&amp;amp;self&lt;/code&gt;&lt;/a&gt;, rather than a separate
parameter with an argument of type &lt;code&gt;&amp;amp;Self&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@self&lt;/code&gt; and &lt;code&gt;@Trait&lt;/code&gt; (managed trait objects) &lt;a href="https://github.com/mozilla/rust/pull/12030"&gt;have been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11987"&gt;has been removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::fmt::Default&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11948"&gt;has been
renamed&lt;/a&gt; to &lt;code&gt;Show&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;IO errors &lt;a href="https://github.com/mozilla/rust/pull/11946"&gt;have been completely
overhauled&lt;/a&gt;, and no longer use
conditions. Alex wrote &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008505.html"&gt;an
email&lt;/a&gt;
to the mailing list summarizing the changes. Especially take note of the
&lt;code&gt;if_ok!&lt;/code&gt; macro.&lt;/li&gt;
&lt;li&gt;Conditions &lt;a href="https://github.com/mozilla/rust/pull/12039"&gt;have been removed
entirely&lt;/a&gt;. A detailed post-mortem
is available on the pull request.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustc&lt;/code&gt; has seen some work on its interface. The output flags &lt;a href="https://github.com/mozilla/rust/pull/12020"&gt;have been
unified&lt;/a&gt;, replacing &lt;code&gt;-c&lt;/code&gt;,
&lt;code&gt;--emit-llvm&lt;/code&gt;, &lt;code&gt;-S&lt;/code&gt;, &lt;code&gt;--dylib&lt;/code&gt;, &lt;code&gt;--rlib&lt;/code&gt;, etc with two arguments: &lt;code&gt;--emit&lt;/code&gt; and
&lt;code&gt;--crate-type&lt;/code&gt;. There is &lt;a href="https://github.com/mozilla/rust/pull/12084"&gt;another PR in the
queue&lt;/a&gt; that replaces a bunch of
miscellaneous flags behind &lt;code&gt;-C&lt;/code&gt;. It will likely land shortly, and is something
to be aware of.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NonCopyable&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12016"&gt;has been renamed&lt;/a&gt;
to &lt;code&gt;NoPod&lt;/code&gt; to be consistent with the rest of the "marker types".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reserve&lt;/code&gt; naming &lt;a href="https://github.com/mozilla/rust/pull/11951"&gt;has been shuffled around
slightly&lt;/a&gt;. &lt;code&gt;reserve&lt;/code&gt; becomes
&lt;code&gt;reserve_exact&lt;/code&gt; and &lt;code&gt;reserve_at_least&lt;/code&gt; becomes &lt;code&gt;reserve&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SendStr&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/12098"&gt;has been removed&lt;/a&gt; in
favor of a &lt;code&gt;MaybeOwned&lt;/code&gt; type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As part of the libextra dissolution, the following crates have been
introduced:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12010"&gt;&lt;code&gt;libcollections&lt;/code&gt;&lt;/a&gt;, which has
inherited &lt;code&gt;Bitv&lt;/code&gt;, &lt;code&gt;BTree&lt;/code&gt;, &lt;code&gt;Deque&lt;/code&gt;, &lt;code&gt;DList&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;LruCache&lt;/code&gt;,
&lt;code&gt;PriorityQueue&lt;/code&gt;, &lt;code&gt;RingBuf&lt;/code&gt;, &lt;code&gt;SmallIntMap&lt;/code&gt;, &lt;code&gt;TreeMap&lt;/code&gt;, and &lt;code&gt;TreeSet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12007"&gt;&lt;code&gt;libgetopts&lt;/code&gt;&lt;/a&gt;, which has
inherited &lt;code&gt;extra::getopts&lt;/code&gt;. Additionally, &lt;code&gt;getopts::groups&lt;/code&gt; is now the &lt;em&gt;only&lt;/em&gt;
interface. It has been moved up a level, into just &lt;code&gt;getopts&lt;/code&gt;, and the old
functions have been removed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11984"&gt;&lt;code&gt;libserialize&lt;/code&gt;&lt;/a&gt;, which has
inherited &lt;code&gt;extra::serialize&lt;/code&gt; and &lt;code&gt;extra::ebml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11912"&gt;&lt;code&gt;libuuid&lt;/code&gt;&lt;/a&gt;, which has inherited
&lt;code&gt;extra::uuid&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/12012"&gt;&lt;code&gt;libsemver&lt;/code&gt;&lt;/a&gt;, which has
inherited &lt;code&gt;extra::semver&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11945"&gt;&lt;code&gt;libterm&lt;/code&gt;&lt;/a&gt;, which has inherited
&lt;code&gt;extra::term&lt;/code&gt; and &lt;code&gt;extra::terminfo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All crates are still documented, and there is a list with links at
&lt;a href="http://static.rust-lang.org/doc/master/index.html"&gt;http://static.rust-lang.org/doc/master/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;black_box&lt;/code&gt; function &lt;a href="https://github.com/mozilla/rust/pull/12105"&gt;has been added to
&lt;code&gt;extra::test&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;iter&lt;/code&gt;
method on BenchHarness can now return values. As
&lt;a href="https://github.com/mozilla/rust/pull/12119"&gt;documented&lt;/a&gt; (&lt;a href="http://static.rust-lang.org/doc/master/guide-testing.html#benchmarks-and-the-optimizer"&gt;generated
version&lt;/a&gt;),
these exist to make sure that LLVM will not optimize out benchmarks.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;fourcc!&lt;/code&gt; syntax extension &lt;a href="https://github.com/mozilla/rust/pull/12034"&gt;has been
added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;unimplemented!&lt;/code&gt; macro &lt;a href="https://github.com/mozilla/rust/pull/12090"&gt;has been
added&lt;/a&gt;, used much the same as
&lt;code&gt;unreachable!()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The [runtime libraries &lt;a href="https://github.com/mozilla/rust/pull/12073"&gt;have gained
examples&lt;/a&gt;, and
&lt;a href="http://static.rust-lang.org/doc/master/green/index.html"&gt;libgreen&lt;/a&gt; now has an
explanation of how it is structured at a high level, specifically where
concurrency and parallelism come from.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;from_utf8_lossy&lt;/code&gt; function &lt;a href="https://github.com/mozilla/rust/pull/12062"&gt;has been
added&lt;/a&gt; that replaces invalid
codepoints with the unicode replacement character (�).&lt;/li&gt;
&lt;li&gt;Network streams &lt;a href="https://github.com/mozilla/rust/pull/11894"&gt;are now
cloneable&lt;/a&gt;. This allows for
multiple tasks reading/writing a &lt;code&gt;TcpStream&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A copy-on-write Arc container &lt;a href="https://github.com/mozilla/rust/pull/11230"&gt;has been added to
libextra&lt;/a&gt;, though it's now in
&lt;code&gt;libcontainers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;SIMD types &lt;a href="https://github.com/mozilla/rust/pull/11717"&gt;are now allowed in
generics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A new mutex type that plays well with the various runtimes &lt;a href="https://github.com/mozilla/rust/pull/11866"&gt;has been
implemented&lt;/a&gt;. It is in the same
ballpark as native, pthread mutexes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arcterus&lt;/li&gt;
&lt;li&gt;Cole Mickens&lt;/li&gt;
&lt;li&gt;Colin Sherratt&lt;/li&gt;
&lt;li&gt;HeroesGrave&lt;/li&gt;
&lt;li&gt;Ivan Enderlin&lt;/li&gt;
&lt;li&gt;James Deng&lt;/li&gt;
&lt;li&gt;João Souls&lt;/li&gt;
&lt;li&gt;Marek Šuppa&lt;/li&gt;
&lt;li&gt;Q.P.Liu&lt;/li&gt;
&lt;li&gt;Yuri Kunde Schlesner&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-04"&gt;weekly
meeting&lt;/a&gt;
discussed adding a &lt;code&gt;libprim&lt;/code&gt;, operator overloading, and the 1.0 goals for
LLVM.&lt;/p&gt;
&lt;h1&gt;Meetups&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There will be a meetup &lt;a href="http://www.eventbrite.fr/e/billets-rust-paris-meetup-10528169037"&gt;in
Paris&lt;/a&gt;, on
February 25, from 18:30 to 23:30.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Rust-Bay-Area/events/156288462/"&gt;Bay Area Rust&lt;/a&gt; will
be meeting February 25, at 19:00 in San Francisco. David Renshaw will be
talking about Cap' Proto, Steven Fackler will be talking about exportable
macros, and Kevin Cantu about testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 14 PRs, but there are a substantial number of very
close pending PRs that add major layout features to Servo (e.g., lists
markers, tables, initial pseudo-class and pseudo-element support).&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bruno Abinader continued with his great DOM additions in
&lt;a href="https://github.com/mozilla/servo/pull/1634"&gt;#1634&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1622"&gt;#1622&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1604"&gt;#1604&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patrick Kim fixed borders on inline boxes in
&lt;a href="https://github.com/mozilla/servo/pull/1577"&gt;#1577&lt;/a&gt; and landed
&lt;code&gt;position:relative&lt;/code&gt; support in
&lt;a href="https://github.com/mozilla/servo/pull/1613"&gt;#1613&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patrick Walton further improved layout performance in
&lt;a href="https://github.com/mozilla/servo/pull/1630"&gt;#1630&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1615"&gt;#1615&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adrien Bustany fixed &lt;code&gt;insertBefore&lt;/code&gt; in
&lt;a href="https://github.com/mozilla/servo/pull/1621"&gt;#1621&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lars Bergstrom landed reftest stabilization fixes in
&lt;a href="https://github.com/mozilla/servo/pull/1623"&gt;#1623&lt;/a&gt; - we are almost ready to
gate landing commits on content and ref tests passing on Linux, once we get
more fonts &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=968375"&gt;installed&lt;/a&gt;
on our Linux buildbots&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adrien Bustany (abustany)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-03"&gt;meeting&lt;/a&gt;, we mainly
discussed display list construction with respect to layering and stacking
contexts.&lt;/p&gt;
&lt;p&gt;Josh Matthews' talk on Servo at FOSDEM is available
&lt;a href="http://mirrors.dotsrc.org/fosdem/2014/UD2218A/Saturday/Servo_building_a_parallel_web_browser.webm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1wvxcn/lazily_initialized_statics/"&gt;Lazily initialized
statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1wypbz/rust_gains_a_new_fulltime_developer_nick_cameron/"&gt;Rust gains a new full-time developer, Nick
Cameron&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1wz7ws/handling_io_errors/"&gt;Handling I/O
Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1x0zeu/adler32_and_crc32/"&gt;Pure-Rust Adler32 and
CRC32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1x1tvo/closures_and_the_borrow_checker/"&gt;Closures and the borrow
checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1x3ooy/lzw_compression_algorithm/"&gt;Pure-Rust LZW Compression
Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1x67wq/rust_by_example_default_arguments_named_params/"&gt;Rust by Example: Default arguments,
etc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1xaum0/standalone_rust_app/"&gt;Standalone rust
app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1xfjo7/ide_support/"&gt;IDE support?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1xdlou/playing_with_the_new_rust_io_error_handling/"&gt;Playing with the new Rust I/O error
handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1xdudv/another_failed_attempt_at_parser_combinators/"&gt;Another failed attempt at parser
combinators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1xck76/a_case_for_reflection_in_rust/"&gt;A case for reflection in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1xa8uy/a_persistent_map_implementation_like_in_clojure/"&gt;A persistent map implementation, like in Clojure and Scala, with
performance
numbers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 35</title><link href="http://this-week-in-rust.org/blog/2014/02/01/this-week-in-rust-35/" rel="alternate"></link><updated>2014-02-01T18:45:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-02-01:blog/2014/02/01/this-week-in-rust-35/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was a good week, with default type parameters, &lt;code&gt;do&lt;/code&gt; removal, &lt;code&gt;@[]&lt;/code&gt;
removal, and some code bloat reduction.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;61 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11868"&gt;has been removed&lt;/a&gt;. Replace
&lt;code&gt;do spawn { ... }&lt;/code&gt; with &lt;code&gt;spawn(proc() { ... })&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libextra&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11787"&gt;has exploded&lt;/a&gt;. &lt;a href="https://github.com/mozilla/rust/pull/11867"&gt;It
exploded some more&lt;/a&gt;. It will
continue to explode until it no longer exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[simd]&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11738"&gt;has been feature
gated&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/mozilla/rust/pull/11706"&gt;now generate static
libraries&lt;/a&gt; by default, rather than
dynamic libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@[]&lt;/code&gt; and &lt;code&gt;@str&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11974"&gt;have been removed from the
language&lt;/a&gt;. All that is left is
&lt;code&gt;@T&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Various methods on vectors &lt;a href="https://github.com/mozilla/rust/pull/11944"&gt;now return
Options&lt;/a&gt;, to be in line with the
rest of everything else.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next_power_of_two_opt&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11930"&gt;has been renamed
to&lt;/a&gt; &lt;code&gt;checked_next_power_of_two&lt;/code&gt;.
Additionally, the various functions for division in &lt;code&gt;std::uint&lt;/code&gt; were removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[no_send]&lt;/code&gt; etc &lt;a href="https://github.com/mozilla/rust/pull/11768"&gt;have been removed in favor of marker
types&lt;/a&gt;. Additionally, variance of
types and lifetimes can explicitly be annotated with these marker types. They
are zero-sized and have no runtime impact.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::borrow&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11895"&gt;has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Times&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11672"&gt;has finally been
removed&lt;/a&gt;. Good riddance.&lt;/li&gt;
&lt;li&gt;The various &lt;code&gt;CopyableVector&lt;/code&gt;-like types have &lt;a href="https://github.com/mozilla/rust/pull/11893"&gt;been
renamed&lt;/a&gt; to
&lt;code&gt;CloneableVector&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There are now lints for &lt;a href="https://github.com/mozilla/rust/pull/11754"&gt;unused
values&lt;/a&gt;. Types annotated with
&lt;code&gt;#[must_use]&lt;/code&gt; will now warn when (surprise) their results are not used.&lt;/li&gt;
&lt;li&gt;debuginfo &lt;a href="https://github.com/mozilla/rust/pull/11864"&gt;should now be fixed on OS
X&lt;/a&gt;, due to us now explicitly
setting the DWARF version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fp-elim&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11879"&gt;has been re-disabled, but only if debuginfo generation is
disabled&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Errors from &lt;code&gt;#[deriving(...)]&lt;/code&gt; have
&lt;a href="https://github.com/mozilla/rust/pull/11826"&gt;seen&lt;/a&gt; some
&lt;a href="https://github.com/mozilla/rust/pull/11834"&gt;work&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The evil environment pointers &lt;a href="https://github.com/mozilla/rust/pull/11595"&gt;has been removed from bare
functions&lt;/a&gt;, as well as &lt;code&gt;self&lt;/code&gt; now
being a mostly-normal argument, to the compiler. This was a huge effort (88
changed files with 1,436 additions and 2,138 deletions) by Eduard Burtescu,
and is awesome!&lt;/li&gt;
&lt;li&gt;Also from Eduard is &lt;a href="https://github.com/mozilla/rust/pull/11217"&gt;default type
parameters&lt;/a&gt;! They are currently
behind a feature flag, but allow you to say, for example, &lt;code&gt;struct Foo&amp;lt;T =
uint&amp;gt;&lt;/code&gt; and use &lt;code&gt;Foo&lt;/code&gt; as a bare type.&lt;/li&gt;
&lt;li&gt;The tydesc &lt;a href="https://github.com/mozilla/rust/pull/11909"&gt;is used in less
places&lt;/a&gt; to help fend off code
bloat.&lt;/li&gt;
&lt;li&gt;The occasional infinite recursion in some recursive types &lt;a href="https://github.com/mozilla/rust/pull/11839"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Take glue &lt;a href="https://github.com/mozilla/rust/pull/11723"&gt;has been removed from
tydescs&lt;/a&gt;, also to fend off code
bloat.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fail!()&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11841"&gt;also generates less code
now&lt;/a&gt;, to fend off bloat. In
particular, &lt;code&gt;fn main() { fail!() }&lt;/code&gt; now compiles 2-3x faster due to generating
less code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JeremyLetang&lt;/li&gt;
&lt;li&gt;Johannes Muenzel&lt;/li&gt;
&lt;li&gt;Keshav Kini&lt;/li&gt;
&lt;li&gt;Michael Darakananda&lt;/li&gt;
&lt;li&gt;Nathaniel Herman&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-28"&gt;weekly
meeting&lt;/a&gt;
discussed default type parameters, the unused result lint, minor changes to
the attribute syntax, how to deal with I/O splitting, and the visit glue.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 32 PRs, significantly above our usual PR landing rate!&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Walton landed a huge number of PRs that significantly improved our
performance and parallelism
&lt;a href="https://github.com/mozilla/servo/pull/1600"&gt;#1600&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1564"&gt;#1564&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1567"&gt;#1567&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1589"&gt;#1589&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1566"&gt;#1566&lt;/a&gt;
&lt;a href="https://github.com/mozilla/servo/pull/1574"&gt;#1574&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1571"&gt;#1571&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1559"&gt;#1559&lt;/a&gt;, etc.&lt;/li&gt;
&lt;li&gt;Rui (xiongmao86) fixed a linking issue in our Makefiles in
&lt;a href="https://github.com/mozilla/servo/pull/1603"&gt;#1603&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Isabelle Carter landed multiple display list support in
&lt;a href="https://github.com/mozilla/servo/pull/1579"&gt;#1579&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lars Bergstrom finally re-enabled ref tests in
&lt;a href="https://github.com/mozilla/servo/pull/1565"&gt;#1565&lt;/a&gt; and started a quest to
improve test reliability in
&lt;a href="https://github.com/mozilla/servo/pull/1597"&gt;#1597&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1570"&gt;#1570&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Bruno Abinader pushed on more DOM features in
&lt;a href="https://github.com/mozilla/servo/pull/1583"&gt;#1583&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1580"&gt;#1580&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Clark Gaebel (wowus) enabled a limit on the number of redirects Servo
follows in &lt;a href="https://github.com/mozilla/servo/pull/1562"&gt;#1562&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki cleaned up Node's &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; members
&lt;a href="https://github.com/mozilla/servo/pull/1582"&gt;#1582&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deokjin Kim implemented &lt;code&gt;whitespace:pre&lt;/code&gt; in
&lt;a href="https://github.com/mozilla/servo/pull/1547"&gt;#1547&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Kim landed border support for inline flows in
&lt;a href="https://github.com/mozilla/servo/pull/1546"&gt;#1546&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simon Sapin used his CSS wizardry to redo a performance tweak we made so
that it's actually spec-compliant in
&lt;a href="https://github.com/mozilla/servo/pull/1560"&gt;#1560&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clark Gaebel (wowus)&lt;/li&gt;
&lt;li&gt;Rui (xiongmao86)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-27"&gt;meeting&lt;/a&gt;, we
discussed moving the build of fontconfig on Linux into Servo to avoid
situations where the system version is old and not threadsafe, what's blocking
the JSManaged conversion (which is required for our next Rust upgrade), and
the status of ref and content tests.&lt;/p&gt;
&lt;p&gt;Josh Matthews is at FOSDEM this weekend, giving a
&lt;a href="http://www.joshmatthews.net/fosdemservo/"&gt;talk&lt;/a&gt; on Servo. Look for video on
air.mozilla.org shortly!&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1wqjsf/more_xxhash_benchmarks/"&gt;An xxHash implementation in
Rust&lt;/a&gt;,
as well as some benchmarks comparing to gcc and clang.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hydrocodedesign.com/2014/01/31/llvm-with-rust/"&gt;Using LLVM From Within
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vimeo.com/85253071"&gt;Felix's CodeMesh presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/a/octayn.net/spreadsheet/ccc?key=0AlWBWplsaTZvdGdSdEVzZW1BeDA5dm0zM2FFeW0ySEE&amp;amp;usp=drive_web#gid=0"&gt;A 1.0 roadmap
spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kballard/rust-lua"&gt;rust-lua&lt;/a&gt;, safe bindings to Lua 5.1&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/interviews/klock-rust?utm_source=infoq&amp;amp;utm_medium=videos_homepage&amp;amp;utm_campaign=videos_row1#.Uupx3qddN-w.reddit"&gt;InfoQ interview with
Felix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.safaribooksonline.com/2014/01/30/parameters-bounds-rust/"&gt;Parameters and Bounds in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.safaribooksonline.com/2014/01/28/network-communication-serialization-rust/"&gt;Network Communication and Serialization in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/rust-meetup-january-2014/"&gt;Recording of the Bay Area Rust January
meetup&lt;/a&gt;, wherein Brian
talks about 1.0, Niko talks about DST, Kevin talks about rust-lua, and I talk
about evangelism.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008224.html"&gt;Deprecating
rustpkg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 34</title><link href="http://this-week-in-rust.org/blog/2014/01/26/this-week-in-rust-34/" rel="alternate"></link><updated>2014-01-26T19:00:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-01-26:blog/2014/01/26/this-week-in-rust-34/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;74 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Struct fields &lt;a href="https://github.com/mozilla/rust/pull/11777"&gt;now inherit the privacy of the struct
itself&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bug in instantiability checking (determining whether a value of a given
type could ever be constructed) &lt;a href="https://github.com/mozilla/rust/pull/11661"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Zero&lt;/code&gt; and &lt;code&gt;One&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11664"&gt;have been tightened
up&lt;/a&gt;, and fewer types implement
them now.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11129"&gt;A lot of things have changed&lt;/a&gt;
regarding functions that fail or return Options. Almost everything that used
to fail now returns an Option instead.&lt;/li&gt;
&lt;li&gt;Many incorrect usages of types from &lt;code&gt;std::libc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10943"&gt;now use Rust
types&lt;/a&gt;. This might introduce an
extra &lt;code&gt;as&lt;/code&gt; or few in code using these (relatively obscure) interfaces.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invert&lt;/code&gt; on &lt;code&gt;DoubleEndedIterator&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11686"&gt;has been
renamed&lt;/a&gt; to &lt;code&gt;rev&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The numeric constants &lt;a href="https://github.com/mozilla/rust/pull/11790"&gt;have been
uppercased&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some privacy in std and extra &lt;a href="https://github.com/mozilla/rust/pull/11808"&gt;has been shuffled
around&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Most macros are &lt;a href="https://github.com/mozilla/rust/pull/11774"&gt;no longer injected as a hard-coded
string&lt;/a&gt; and in fact live in
libstd.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;-Z no-landing-pads&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11653"&gt;actually disables landing pad
generation&lt;/a&gt;. It was accidentally
broken.&lt;/li&gt;
&lt;li&gt;The FFI documentation &lt;a href="https://github.com/mozilla/rust/pull/11486"&gt;now includes a section on
callbacks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A lint for unnecessary parens on control flow conditions etc &lt;a href="https://github.com/mozilla/rust/pull/11663"&gt;has been
added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for ARM's thumb instructions &lt;a href="https://github.com/mozilla/rust/pull/11700"&gt;has been
added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;libnative &lt;a href="https://github.com/mozilla/rust/pull/11294"&gt;now implements
timers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is now &lt;a href="https://github.com/mozilla/rust/pull/11611"&gt;exponential notation for float
formatting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11682"&gt;has been added&lt;/a&gt;, which
is intended to eventually replace &lt;code&gt;~[T]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Borrow checker errors &lt;a href="https://github.com/mozilla/rust/pull/11718"&gt;now have better
spans&lt;/a&gt; and should be more
understandable.&lt;/li&gt;
&lt;li&gt;It is now possible to &lt;a href="https://github.com/mozilla/rust/pull/11744"&gt;opt out of using
rpaths&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;libnative &lt;a href="https://github.com/mozilla/rust/pull/11732"&gt;now implements
&lt;code&gt;get_host_addresses&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A new synchronization primitive, Barrier, &lt;a href="https://github.com/mozilla/rust/pull/11725"&gt;has been
added&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Andre Arko&lt;/li&gt;
&lt;li&gt;Aydin Kim&lt;/li&gt;
&lt;li&gt;Ben Harris&lt;/li&gt;
&lt;li&gt;Ben Noordhuis&lt;/li&gt;
&lt;li&gt;Chris Wong&lt;/li&gt;
&lt;li&gt;Daniel MacDougall&lt;/li&gt;
&lt;li&gt;Hong Chulju&lt;/li&gt;
&lt;li&gt;Jake Greenfield&lt;/li&gt;
&lt;li&gt;Matthias Einwag&lt;/li&gt;
&lt;li&gt;Philippe Delrieu&lt;/li&gt;
&lt;li&gt;Salem Talha&lt;/li&gt;
&lt;li&gt;Sean Chalmers&lt;/li&gt;
&lt;li&gt;Trent Ogren&lt;/li&gt;
&lt;li&gt;Virgile Andreani&lt;/li&gt;
&lt;li&gt;comex&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-21"&gt;weekly
meeting&lt;/a&gt;
discussed a bunch of open pull requests, but nothing too groudbreaking.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 19 PRs and had a Servo workweek in the Mozilla San
Francisco office from Tuesday through Friday (Monday was a US federal
holiday).&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bruno Abinader implemented Document::createHTMLDocument in
&lt;a href="https://github.com/mozilla/servo/pull/1523"&gt;#1523&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Walton implemented parallel layout for two of our three layout
passes in &lt;a href="https://github.com/mozilla/servo/pull/1493"&gt;#1493&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Kim fixed computation of image box sizes in
&lt;a href="https://github.com/mozilla/servo/pull/1520"&gt;#1520&lt;/a&gt; and text-decoration in
&lt;a href="https://github.com/mozilla/servo/pull/1506"&gt;#1506&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deokjin Kim landed the &lt;code&gt;white-space:pre&lt;/code&gt; property in
&lt;a href="https://github.com/mozilla/servo/pull/1507"&gt;#1507&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Aydin Kim and Lars Bergstrom landed fixes for Servo on Android.&lt;/li&gt;
&lt;li&gt;Teodor Szente fixed up a type signature in
&lt;a href="https://github.com/mozilla/servo/pull/1541"&gt;#1541&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lars Bergstrom changed ref tests so that they now emit a PNG showing the
image-diff between the baseline and incorrect rendering in
&lt;a href="https://github.com/mozilla/servo/pull/1544"&gt;#1544&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Teodor Szente&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;There was no separate Servo meeting, but during the workweek we discussed
details in our designs for
&lt;a href="https://etherpad.mozilla.org/Servo-workweek-layers"&gt;layers&lt;/a&gt;, &lt;a href="https://etherpad.mozilla.org/Servo-workweek-generated-content"&gt;generated
content&lt;/a&gt;,
&lt;a href="https://etherpad.mozilla.org/Servo-workweek-tables"&gt;tables&lt;/a&gt;,
&lt;a href="https://etherpad.mozilla.org/Servo-workweek-pixels"&gt;HiDPI/pixels&lt;/a&gt;, and
&lt;a href="https://etherpad.mozilla.org/Servo-workweek-displaylist"&gt;DisplayList
creation&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008214.html"&gt;Rust contribution
ideas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/SiegeLord/RustAlgebloat"&gt;RustAlgebloat&lt;/a&gt;, a linear
algebra library&lt;/li&gt;
&lt;li&gt;&lt;a href="http://glaebhoerl.tumblr.com/rust_closure_types"&gt;Table of Potential Closure
Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008088.html"&gt;rust-ci
updates&lt;/a&gt;,
categorization and documentation uploading&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/7848"&gt;Channel API
proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 33</title><link href="http://this-week-in-rust.org/blog/2014/01/18/this-week-in-rust-33/" rel="alternate"></link><updated>2014-01-18T20:21:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-01-18:blog/2014/01/18/this-week-in-rust-33/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was a big week. rvalue lifetimes and external syntax extensions landed,
as well as a bunch of codegen optimization.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;69 pull requests were merged this week. As of writing,
&lt;a href="http://buildbot.rust-lang.org/bors/bors.html"&gt;bors&lt;/a&gt; has 14 approved pull
requests waiting.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::num&lt;/code&gt;'s ongoing overhaul continues. It's going to be drastically
simplified, and not try to be a general-purpose numeric library.
&lt;a href="https://github.com/bjz/num-rs"&gt;num-rs&lt;/a&gt; is intended to provide some base
algebraic types. &lt;a href="https://github.com/mozilla/rust/pull/11504"&gt;#11504&lt;/a&gt; removes
gamma/bessel and does some cleanup of cmath.
&lt;a href="https://github.com/mozilla/rust/pull/11548"&gt;#11548&lt;/a&gt; merges Bitwise and
BitCount and removes Bounded and Bitwise from the prelude.
&lt;a href="https://github.com/mozilla/rust/pull/11622"&gt;#11622&lt;/a&gt; simplifies Primitive.&lt;/li&gt;
&lt;li&gt;Destructuring &lt;code&gt;@&lt;/code&gt; patterns are &lt;a href="https://github.com/mozilla/rust/pull/11305"&gt;no longer
supported&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The return type of &lt;code&gt;Chan::try_recv&lt;/code&gt; has been extended to &lt;a href="https://github.com/mozilla/rust/pull/11112"&gt;indicate why it
did not return a value&lt;/a&gt;. That is,
whether there was legitimately no value, or if the other end had hung up.&lt;/li&gt;
&lt;li&gt;Disk-relative paths on Windows &lt;a href="https://github.com/mozilla/rust/pull/11579"&gt;are now properly
generated&lt;/a&gt; when joining two paths.&lt;/li&gt;
&lt;li&gt;FromBase64 and FromHex &lt;a href="https://github.com/mozilla/rust/pull/11597"&gt;now use error
enums&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::io&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11598"&gt;has been shuffled around a
bit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;(Almost?) all iterator types &lt;a href="https://github.com/mozilla/rust/pull/11001"&gt;have been
renamed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;unsafe functions can &lt;a href="https://github.com/mozilla/rust/pull/11605"&gt;no longer be coerced to
closures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unnecessary (useless) visibility modifiers on &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;extern mod&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11607"&gt;are
now forbidden&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Building on last week's per-task stdout/stderr, &lt;a href="https://github.com/mozilla/rust/pull/11620"&gt;rustc's error reporting has
been cleaned up significantly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Externally loadable syntax extensions &lt;a href="https://github.com/mozilla/rust/pull/11151"&gt;have
landed&lt;/a&gt;! We can now write
syntax extensions outside of the compiler, and export macros.&lt;/li&gt;
&lt;li&gt;The "rvalue lifetime" issue has seen some &lt;a href="https://github.com/mozilla/rust/pull/11585"&gt;significant work put into
it&lt;/a&gt;. Notably, &lt;code&gt;for x in [1, 2, 3,
4].iter() { .. }&lt;/code&gt; should now work, among many other papercut annoyances with
rvalues.&lt;/li&gt;
&lt;li&gt;Error messages involving inferred integer types &lt;a href="https://github.com/mozilla/rust/pull/11513"&gt;are now much more
sane&lt;/a&gt;. Rather than &lt;code&gt;&amp;lt;V0&amp;gt;&lt;/code&gt; or
&lt;code&gt;&amp;lt;VI1&amp;gt;&lt;/code&gt;, it now prints &lt;code&gt;&amp;lt;generic integer #0&amp;gt;&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Accidentally including a semicolon on the last line of a function &lt;a href="https://github.com/mozilla/rust/pull/11482"&gt;now has a
better error message&lt;/a&gt;, if the
types line up.&lt;/li&gt;
&lt;li&gt;Some bugs with trait object coercion &lt;a href="https://github.com/mozilla/rust/pull/11525"&gt;have been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The runtime &lt;a href="https://github.com/mozilla/rust/pull/11501"&gt;now has its own
documentation&lt;/a&gt;, viewable
&lt;a href="http://static.rust-lang.org/doc/master/guide-runtime.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustdoc's search is now &lt;a href="https://github.com/mozilla/rust/pull/11438"&gt;more
forgiving&lt;/a&gt; on the input it
accepts.&lt;/li&gt;
&lt;li&gt;Inserting into tries has been optimized significantly, &lt;a href="https://github.com/mozilla/rust/pull/11546"&gt;with no unsafe
code&lt;/a&gt;. Its iterator has &lt;a href="https://github.com/mozilla/rust/pull/11497"&gt;also been
optimized&lt;/a&gt;, albeit with unsafe
code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11535"&gt;The reference-counting headers have been
removed&lt;/a&gt;. The associated
"managed-unique" concept &lt;a href="https://github.com/mozilla/rust/pull/11565"&gt;has also been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The recent OS X 10.9 breakage &lt;a href="https://github.com/mozilla/rust/pull/11604"&gt;should be
fixed&lt;/a&gt;, as we will no longer use
&lt;code&gt;ar s&lt;/code&gt; on that platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clinton Ryan&lt;/li&gt;
&lt;li&gt;Derek Guenther&lt;/li&gt;
&lt;li&gt;Lucy&lt;/li&gt;
&lt;li&gt;Petter Remen&lt;/li&gt;
&lt;li&gt;Shamir Khodzha&lt;/li&gt;
&lt;li&gt;Yehuda Katz&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-14"&gt;weekly
meeting&lt;/a&gt;
discussed associated function resolution, changes to our calling convention
(specifically the fate of the ubiquitous environment pointer), how we want to
handle feature freeze, static items with destructors, and documentation on
primitives.&lt;/p&gt;
&lt;h1&gt;Quotes of the Week&lt;/h1&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote tjc on the Rust-the-game/Rust-the-language confusion %}
who says you can't make money selling a compiler? You can, as long as you
convince people it's a video game&lt;/p&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote eddyb %}
who needs pure functional when you have pure cool?&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This week, we landed 22 PRs. There will be a Servo workweek in the
Mozilla San Francisco office next week, Tuesday through Friday.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jack Moffitt landed the huge Rust upgrade
&lt;a href="https://github.com/mozilla/servo/pull/1473"&gt;#1473&lt;/a&gt;, bringing us very close to
the 0.9 release. Hooray!&lt;/li&gt;
&lt;li&gt;Lars Bergstrom got NVidia-on-Linux working in
&lt;a href="https://github.com/mozilla/servo/pull/1487"&gt;#1487&lt;/a&gt; and fixed the content test
reliability in &lt;a href="https://github.com/mozilla/servo/pull/1500"&gt;#1500&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki implemented &lt;code&gt;removeAttribute&lt;/code&gt; on Element in
&lt;a href="https://github.com/mozilla/servo/pull/1448"&gt;#1448&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;jgraham landed innerHTML support
&lt;a href="https://github.com/mozilla/servo/pull/1450"&gt;#1450&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Bruno Abinader implemented several fixes related to DOMImplementation:
&lt;a href="https://github.com/mozilla/servo/pull/1497"&gt;#1497&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1488"&gt;#1488&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Corey Richardson fixed up an error case in startup on Linux in
&lt;a href="https://github.com/mozilla/servo/pull/1502"&gt;#1502&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Isabelle Carter landed the initial work for handling &lt;code&gt;position:fixed&lt;/code&gt; in
&lt;a href="https://github.com/mozilla/servo/pull/1440"&gt;#1440&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Corey Richardson&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-13"&gt;meeting&lt;/a&gt;, we
discussed the need to clean up our test harnesses, the removal of &lt;code&gt;@&lt;/code&gt; in
support of the next Rust upgrade, and the workweek..&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DaGenix/rust-crypto/pull/21"&gt;The first pure-Rust AES
implementation&lt;/a&gt;. According to
enix in IRC, this is also the first bit slicing implementation in a high level
language (ie, not assembly or a port of assembly).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nickdesaulniers/rust-re2"&gt;rust-re2&lt;/a&gt;, re2 bindings&lt;/li&gt;
&lt;li&gt;&lt;a href="http://words.steveklabnik.com/a-30-minute-introduction-to-rust"&gt;A 30 Minute Introduction to
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shilgapira/ObjCrust"&gt;ObjCrust&lt;/a&gt;, building an iOS static
library with Rust.A&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/"&gt;The Periodic Table of Rust
Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dnaq/sodiumoxide"&gt;Sodium Oxide&lt;/a&gt;, NaCl bindings, updated
to 0.9&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dwrensha.github.io/capnproto-rust/2014/01/15/benchmark-update.html"&gt;capnproto-rust benchmark
update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sfackler/rust-phf"&gt;rust-phf&lt;/a&gt;, compile-time hash maps. It
also serves as a demonstration of loadable syntax extensions!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1v9rgp/rust_has_dowhile_loops/"&gt;Rust has do-while
loops&lt;/a&gt;,
a dirty hack no one should use.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html"&gt;Understanding Pointers, Ownership, and Lifetimes in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hydrocodedesign.com/2014/01/17/jit-just-in-time-compiler-rust/"&gt;A Just-in-time Compiler (Written) In
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexcrichton/jba/tree/rust"&gt;jba&lt;/a&gt;, a GameBoy emulator
written in Rust.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 32</title><link href="http://this-week-in-rust.org/blog/2014/01/11/this-week-in-rust-32/" rel="alternate"></link><updated>2014-01-11T16:23:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-01-11:blog/2014/01/11/this-week-in-rust-32/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;0.9 was released this week, bringing with it a restructuring of our
documentation and the usual influx of attention.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;57 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Float literals are now &lt;a href="https://github.com/mozilla/rust/pull/11480"&gt;more
strict&lt;/a&gt;. Octal and hex float
literals are no longer allowed.&lt;/li&gt;
&lt;li&gt;A nasty soundness bug &lt;a href="http://www.reddit.com/r/rust/comments/1uxbgm/moving_ownership_via_borrowed_reference/"&gt;reported on
reddit&lt;/a&gt;
&lt;a href="https://github.com/mozilla/rust/pull/11465"&gt;has been fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt; and &lt;code&gt;println&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11416"&gt;have been removed from the
prelude&lt;/a&gt;. Use the &lt;code&gt;print!&lt;/code&gt; and
&lt;code&gt;println!&lt;/code&gt; macros instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10926/files"&gt;now supports weak
pointers&lt;/a&gt;, and it no longer
requires the wrapped type to be Freeze or Send. That is, it no longer
statically avoids cycles using the type system. It was found to be too
restrictive. The only constructor is now &lt;code&gt;Rc::new&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eof&lt;/code&gt; method on &lt;code&gt;Reader&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11376"&gt;has been
removed&lt;/a&gt;, as only files really
know when they are at eof. It is now a method on the types it makes sense for
&lt;a href="https://github.com/mozilla/rust/pull/11437"&gt;such as &lt;code&gt;MemReader&lt;/code&gt; and
&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::num&lt;/code&gt; is seeing some simplification. &lt;a href="https://github.com/mozilla/rust/pull/11412"&gt;Many traits have been merged into
&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Similarly, &lt;a href="https://github.com/mozilla/rust/pull/11402"&gt;&lt;code&gt;ApproxEq&lt;/code&gt; has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;std::io::Decorator&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/11394"&gt;has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A nasty resolve bug &lt;a href="https://github.com/mozilla/rust/pull/11370"&gt;has been
fixed&lt;/a&gt;. Importing a trait made it
available to all child modules; now it is only available in the module that
imported it, as it should be.&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/10854"&gt;method renaming&lt;/a&gt; has been
done to &lt;code&gt;Option&lt;/code&gt;. &lt;code&gt;map_default&lt;/code&gt; is now &lt;code&gt;map_or&lt;/code&gt; and &lt;code&gt;mutate_default&lt;/code&gt; is now
&lt;code&gt;mutate_or_set&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/11329"&gt;lint for unnecessary casts&lt;/a&gt;
has been added. It is set to allow by default.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11342"&gt;Mutable iterators&lt;/a&gt; have been
added to &lt;code&gt;std::trie&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A bug in rustpkg preventing it from finding any static libraries, and
libnative, &lt;a href="https://github.com/mozilla/rust/pull/11338"&gt;has been fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u64_from_be_bytes&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11448"&gt;has seen some
optimization&lt;/a&gt;, it is 3-6x faster.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;box&lt;/code&gt; has been
&lt;a href="https://github.com/mozilla/rust/pull/11055"&gt;kinda-implemented&lt;/a&gt;. &lt;code&gt;box(GC)&lt;/code&gt; and
&lt;code&gt;box(HEAP)&lt;/code&gt; now work.&lt;/li&gt;
&lt;li&gt;Typed arenas &lt;a href="https://github.com/mozilla/rust/pull/11358"&gt;have been added&lt;/a&gt;.
They're really fast!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stderr&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt; is now
&lt;a href="https://github.com/mozilla/rust/pull/11353"&gt;per-task&lt;/a&gt;, which will allow
capturing or redirecting a task's output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Andrew Chin&lt;/li&gt;
&lt;li&gt;Clinton Ryan&lt;/li&gt;
&lt;li&gt;Derek Chiang&lt;/li&gt;
&lt;li&gt;Mick Koch&lt;/li&gt;
&lt;li&gt;Nick Cameron&lt;/li&gt;
&lt;li&gt;Niels langager Ellegaard&lt;/li&gt;
&lt;li&gt;Nif Ward&lt;/li&gt;
&lt;li&gt;Raphael Catolino&lt;/li&gt;
&lt;li&gt;Rich Lane&lt;/li&gt;
&lt;li&gt;Dzmitry Malyshau&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-07"&gt;weekly
meeting&lt;/a&gt;
discussed Windows XP support, bounded channels, the Rc changes, using guard
pages, loadable syntax extensions, and functions that fail.&lt;/p&gt;
&lt;h1&gt;Quotes of the Week&lt;/h1&gt;
&lt;p&gt;"[I] find it easy to get lost in this file." -
&lt;a href="https://github.com/mozilla/rust/pull/11472/files#r8810362"&gt;kud1ing&lt;/a&gt; on
&lt;code&gt;libc.rs&lt;/code&gt;
- "A language is more than just semantics, syntax, and an implementation -
it's about an ecosystem and a community. Without that it dies." -
&lt;a href="https://botbot.me/mozilla/rust-internals/msg/9689869/"&gt;bjz&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;The Servo tree has been mostly frozen for a large part of this week, as the
nearly month-long Rust upgrade is finally getting close and we wanted to avoid
additional rebases. We did land 7 PRs, many with associated fixes, however.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Kim fixed anonymous boxes and images disappearing during line
breaking in &lt;a href="https://github.com/mozilla/servo/pull/1461"&gt;#1461&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1463"&gt;#1463&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Walton fixed a race issue with window sizes and script code in
&lt;a href="https://github.com/mozilla/servo/pull/1409"&gt;#1409&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jaeman Park landed CSS parsing and selector matching for pseudo element
:before and :after in &lt;a href="https://github.com/mozilla/servo/pull/1464"&gt;#1464&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Bruno Abinder made some DOM additions in
&lt;a href="https://github.com/mozilla/servo/pull/1466"&gt;#1466&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1472"&gt;#1472&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-06"&gt;meeting&lt;/a&gt;, we
discussed the upcoming workweek, the Rust upgrade, ARM buildbots for Rust and
Servo, and some research we're doing into the breakdown of page load.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Rust-Bay-Area/events/153909222/"&gt;Bay Area Rust Meetup:
1/28/2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=gfCtbGiHcg0"&gt;The Rust language: memory, ownership and
lifetimes&lt;/a&gt;,
Niko's presentation at Linux.conf.au&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1uy7rt/an_appeal_for_correct_capable_futureproof_math_in/"&gt;An appeal for correct, capable, future-proof math in nascent programming
languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1v10ac/thehydroimpulserustwebsite/"&gt;An in-progress redesign of the
website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1v104e/combining_rusthttp_with_routerecognizerrs_to/"&gt;Combining rust-http with route-recognizer.rs to create routable
HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mneumann/rust-toml"&gt;A TOML configuration file parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://llvm.lyngvig.org/Articles/Mapping-High-Level-Constructs-to-LLVM-IR"&gt;Mapping High-Level Constructs to LLVM
IR&lt;/a&gt;,
a peek at what drives the underbelly of the compiler&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11399"&gt;Add garbage collector to
&lt;code&gt;std::gc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/HeroesGrave/rust-workspace"&gt;rust-workspace&lt;/a&gt;, a simple
shell to make maintaining Rust projects easier&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1usupv/semantic_code_browser_for_rust/"&gt;Semantic code browser for
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/"&gt;Rvalue Lifetimes in
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://steveklabnik.github.io/nobody_knows_rust/#/"&gt;Nobody Knows Rust - Steve Klabnik's slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007753.html"&gt;0.9 Release
Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmr/rust-logo-3d/blob/master/rlogo.stl"&gt;A 3d-printable Rust
logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 31</title><link href="http://this-week-in-rust.org/blog/2014/01/06/this-week-in-rust-31/" rel="alternate"></link><updated>2014-01-06T01:09:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2014-01-06:blog/2014/01/06/this-week-in-rust-31/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;0.9 is on the brink. Perhaps this week, the next at the latest. Some hefty
changes come this week.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;63 pull requests were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@mut&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11251"&gt;has been removed&lt;/a&gt;. The
replacements are &lt;code&gt;Gc&amp;lt;RefCell&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; or, preferably, &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. See also
&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;code&gt;Pod&lt;/code&gt; types.&lt;/li&gt;
&lt;li&gt;Dereferencing of unary tuple structs and enums (tuple structs with one field
and enums with one variant) &lt;a href="https://github.com/mozilla/rust/pull/11188"&gt;has been
removed&lt;/a&gt;. An example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// previously `*x` would return 42&lt;/span&gt;
    &lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// but now you do this pattern matching&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11149"&gt;has been removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extern mod foo (name="bar")&lt;/code&gt; syntax &lt;a href="https://github.com/mozilla/rust/pull/10696"&gt;has been
removed&lt;/a&gt;. The newer &lt;code&gt;extern mod
foo = "bar"&lt;/code&gt; syntax replaces it.&lt;/li&gt;
&lt;li&gt;The hashmap iterators &lt;a href="https://github.com/mozilla/rust/pull/11242"&gt;have
changed&lt;/a&gt;. Use &lt;code&gt;.keys()&lt;/code&gt; and
&lt;code&gt;.values()&lt;/code&gt; respectively.&lt;/li&gt;
&lt;li&gt;rustc now outputs &lt;a href="https://github.com/mozilla/rust/pull/11184"&gt;1-based column
numbers&lt;/a&gt;. This shouldn't
affect any tooling that assume columns are 0-based. But, this brings us in
line with gcc.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cfg&lt;/code&gt; attribute &lt;a href="https://github.com/mozilla/rust/pull/11093"&gt;will now strip struct fields and enum
variants&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The contents of the &lt;code&gt;crate_type&lt;/code&gt; attribute &lt;a href="https://github.com/mozilla/rust/pull/11264"&gt;are now checked for
validity&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Reader&lt;/code&gt;/&lt;code&gt;Writer&lt;/code&gt; have regrown some functionality. It can now &lt;a href="https://github.com/mozilla/rust/pull/10861"&gt;read and
write strings&lt;/a&gt;, though &lt;em&gt;only&lt;/em&gt; real
UTF-8 strings. Encoding support will come later. &lt;code&gt;write_char&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11310"&gt;also
reappeared&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unwinding on ARM &lt;a href="https://github.com/mozilla/rust/pull/11301"&gt;has been
fixed&lt;/a&gt;. Still no C++!&lt;/li&gt;
&lt;li&gt;Native UDP IO &lt;a href="https://github.com/mozilla/rust/pull/11186"&gt;has been
implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;rust_fail&lt;/code&gt; function &lt;a href="https://github.com/mozilla/rust/pull/11231"&gt;has been
added&lt;/a&gt;. Break on this function to
catch failure. Should be easier to remember! Certainly better than
&lt;code&gt;_Unwind_RaiseException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some more C &lt;a href="https://github.com/mozilla/rust/pull/11208"&gt;has been converted to
Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;volatile load and store intrinsics &lt;a href="https://github.com/mozilla/rust/pull/11173"&gt;have been
added&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, it hasn't landed yet, but &lt;a href="https://github.com/mozilla/rust/pull/11151"&gt;external syntax
extensions&lt;/a&gt;, aka loadable syntax
extensions, aka procedural macros, seem to be really close to landing. This is
quite exciting!&lt;/p&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alan Andrade&lt;/li&gt;
&lt;li&gt;Carl-Anton Ingmarsson&lt;/li&gt;
&lt;li&gt;John Louis Walker&lt;/li&gt;
&lt;li&gt;Peter Zotov&lt;/li&gt;
&lt;li&gt;lyuts&lt;/li&gt;
&lt;li&gt;Matthew Auld&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;Once again, no meeting due to the holidays. There will be one on January 7,
however.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;Mozilla Corp. came back from vacation this Thursday, January 2nd. We landed 14
PRs this week.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Aydin Kim fixed Android support - hooray! - in
&lt;a href="https://github.com/mozilla/servo/pull/1445"&gt;#1445&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mike Blumenkrantz cleaned up our configure script to avoid the "configure
smashed my submodule edits" problem in
&lt;a href="https://github.com/mozilla/servo/pull/1449"&gt;#1449&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;deokjinkim fixed several font-related issues in
&lt;a href="https://github.com/mozilla/servo/pull/1454"&gt;#1454&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/servo/pull/1452"&gt;#1452&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simon Sapin refactored font styles in
&lt;a href="https://github.com/mozilla/servo/pull/1455"&gt;#1455&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Shamir Khodzha implemented &lt;code&gt;child_elements&lt;/code&gt; for filtered iteration in
&lt;a href="https://github.com/mozilla/servo/pull/1443"&gt;#1443&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;ms2ger landed several changes to attributes in
&lt;a href="https://github.com/mozilla/servo/pull/1439"&gt;#1439&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/servo/pull/1456"&gt;#1456&lt;/a&gt;, and
&lt;a href="https://github.com/mozilla/servo/pull/1460"&gt;#1460&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shamir Khodzha&lt;/li&gt;
&lt;li&gt;Mike Blumenkrantz&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/"&gt;DST, take
5&lt;/a&gt;. I
think this might be the last DST proposal, and I quite like it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007687.html"&gt;rust-redis and
rust-msgpack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dwrensha.github.io/capnproto-rust/2014/01/04/zmq-explorers.html"&gt;A capnproto-rust and zmq
example&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ucrfg/using_rust_for_an_undergraduate_os_course/"&gt;Post-mortem from the OS class taught in
Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007659.html"&gt;Using CMake with
Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/huonw/boehm-rs"&gt;boehm-rs&lt;/a&gt;, a &lt;code&gt;Gc&amp;lt;T&amp;gt;&lt;/code&gt; type with a real
GC!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wellposed/rust-OpenBLAS"&gt;rust-OpenBLAS&lt;/a&gt;, a (in-progress)
library for using OpenBLAS and LAPACK.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WebeWizard/libhttpd/tree/master"&gt;libhttpd&lt;/a&gt;, a library
for writing web servers. Intended to be similar to jetty.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 30</title><link href="http://this-week-in-rust.org/blog/2013/12/30/this-week-in-rust-30/" rel="alternate"></link><updated>2013-12-30T00:48:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-12-30:blog/2013/12/30/this-week-in-rust-30/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;
Want to get involved? &lt;a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors"&gt;We love
contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's been a slow week due to the holidays. In the next week or two 0.9 is
being released. It's an exciting release, but in more subtler ways than the
previous 3. Many small details, especially around the runtime and linking,
have changed that make Rust faster and more flexible without necessarily being
a breaking change. As always, the detailed changelog will have the
nitty-gritties.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;36 pull requests were merged this week. bors was feeling unwell for a bit,
due to a deadlock in a scheduler test that was fixed today and a deadlock in
(incorrect usage of) LLVM.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;comm&lt;/code&gt; primitives are &lt;a href="https://github.com/mozilla/rust/pull/11111"&gt;never &lt;code&gt;Freeze&lt;/code&gt;
anymore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;link&lt;/code&gt; attribute is &lt;a href="https://github.com/mozilla/rust/pull/11091"&gt;now
forbidden&lt;/a&gt; on crates. All hail
&lt;code&gt;crate_id&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/11121"&gt;All of our C++ dependencies have been
removed&lt;/a&gt;. This is only breaking
because it changes the debugging experience; &lt;code&gt;rust_begin_unwind&lt;/code&gt; is gone and
&lt;code&gt;catch throw&lt;/code&gt; doesn't work because we don't use C++ exceptions anymore. To set
a breakpoint on task failure, &lt;code&gt;break _Unwind_RaiseException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The underbelly of the runtime has been &lt;a href="https://github.com/mozilla/rust/pull/10965"&gt;completely
overhauled&lt;/a&gt;. Alex wrote an &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007565.html"&gt;email
to the
list&lt;/a&gt;
about the practical implications of this.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::result::collect&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11098"&gt;now uses an
iterator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClonableIterator&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11160"&gt;has been
renamed&lt;/a&gt; to &lt;code&gt;CloneableIterator&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;libnative has &lt;a href="https://github.com/mozilla/rust/pull/11159"&gt;process and TCP&lt;/a&gt;
implementations.&lt;/li&gt;
&lt;li&gt;Coercion of types into trait objects &lt;a href="https://github.com/mozilla/rust/pull/11156"&gt;is now
supported&lt;/a&gt;, which means &lt;code&gt;as
~SomeTrait&lt;/code&gt; and &lt;code&gt;as &amp;amp;Reader&lt;/code&gt; can be left out.&lt;/li&gt;
&lt;li&gt;I normally wouldn't mention this since it's internal to the compiler, but
Patrick made a heroic effort to &lt;a href="https://github.com/mozilla/rust/pull/11058"&gt;remove &lt;code&gt;@mut&lt;/code&gt; from all the
places&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustdoc can &lt;a href="https://github.com/mozilla/rust/pull/11120"&gt;now test doc
comments&lt;/a&gt;. See the pull request
for details on how and what is tested (also in the rustdoc manual).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sébastien Paolacci&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;There was no meeting this week due to the holiday.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;Mozilla is on an extended holiday break until January 2nd, but we still landed
2 PRs this week.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jack Moffitt re-enabled building with make to enable work on cross-targeting
ARM in &lt;a href="https://github.com/mozilla/servo/pull/1441"&gt;#1441&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;ms2ger cleaned up how we handle namespaces in DOM elements
&lt;a href="https://github.com/mozilla/servo/pull/1438"&gt;#1438&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007575.html"&gt;rust-openssl&lt;/a&gt;
has been formed from the union of sfackler's rust-ssl and erickt's rustcrypto.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lars.com/concurrency/rust/servo/2013/12/21/concurrency-rust-and-servo.html"&gt;Concurrency models, Rust, and
Servo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://words.steveklabnik.com/rust-is-surprisingly-expressive"&gt;Rust is surprisingly
expressive&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-December/007486.html"&gt;irust&lt;/a&gt;,
a basic REPL written in Ruby.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 29</title><link href="http://this-week-in-rust.org/blog/2013/12/22/this-week-in-rust-29/" rel="alternate"></link><updated>2013-12-22T06:57:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-12-22:blog/2013/12/22/this-week-in-rust-29/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;Send me an
email!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week brings a bunch of optimizations, cleanups, and the &lt;code&gt;std::comm&lt;/code&gt;
rewrite. The &lt;code&gt;pkgid&lt;/code&gt; attribute has also seen some changes.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;This week also brings a bunch of tiny bugfixes, many of which I do not mention
below. Out of the 52 PRs this week, I only mention 16. The decision to include
a PR or not is fairly arbitrary, but I try to maintain a "significance
barrier" so that the list is not huge and hard to read (and also to save me
work!). Examples of things which I will stop including mentions of are test
fixes, minor documentation changes, build infrastructure fixes, and any
cleanup to the compiler that doesn't result in a relatively significant
speedup or memory usage decrease. I don't do this out of malice, but out of
laziness and convenience. &lt;code&gt;&amp;lt;3&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;52 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::comm&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10830"&gt;has been
rewritten&lt;/a&gt;. In short, use
&lt;code&gt;Chan::new&lt;/code&gt; and &lt;code&gt;SharedChan::new&lt;/code&gt; to construct a Port/Chan pair. We're in the
ballpark of Go's performance, which is exciting. Read the PR for more details.&lt;/li&gt;
&lt;li&gt;Some more &lt;code&gt;std::vec::raw&lt;/code&gt;
&lt;a href="https://github.com/mozilla/rust/pull/10996"&gt;cleanup&lt;/a&gt; has turned some free
functions into methods. &lt;code&gt;.as_mut_buf&lt;/code&gt; and friends &lt;a href="https://github.com/mozilla/rust/pull/11029"&gt;have also been
removed&lt;/a&gt;, replaced by using
&lt;code&gt;.as_ptr&lt;/code&gt;, &lt;code&gt;.as_mut_ptr&lt;/code&gt;, and &lt;code&gt;.len&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::ebml&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11057"&gt;has been partially
de-@d&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A ton of useless traits, &lt;code&gt;ToOption&lt;/code&gt; etc,  &lt;a href="https://github.com/mozilla/rust/pull/10967"&gt;have been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A nasty bug where having an &lt;code&gt;impl&lt;/code&gt; for a type forced it to be public &lt;a href="https://github.com/mozilla/rust/pull/11019"&gt;has
been fixed&lt;/a&gt;. Some types which were
previously accessible may not be anymore, due to this.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;pkgid&lt;/code&gt; crate attribute &lt;a href="https://github.com/mozilla/rust/pull/11041"&gt;has been
renamed&lt;/a&gt; to &lt;code&gt;crate_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::sort&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11064"&gt;has been
removed&lt;/a&gt;, and there is now a
&lt;code&gt;sort&lt;/code&gt; method on mutable slices (&lt;code&gt;&amp;amp;mut [T]&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; methods on vectors have had some unsafe code added
to make them &lt;a href="https://github.com/mozilla/rust/pull/11061"&gt;3x faster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;sum&lt;/code&gt; method on &lt;code&gt;extra::stat::Stat&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10927"&gt;has been made more
accurate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;debuginfo for by-value &lt;code&gt;self&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/11033"&gt;has been
fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt; is now &lt;a href="https://github.com/mozilla/rust/pull/11024"&gt;allowed in
closures&lt;/a&gt; for early return.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crate_id&lt;/code&gt; (then &lt;code&gt;pkgid&lt;/code&gt;) &lt;a href="https://github.com/mozilla/rust/pull/10972"&gt;now
supports&lt;/a&gt; specifying the crate
name. &lt;code&gt;#foo:1.0&lt;/code&gt; as the fragment will make the crate name &lt;code&gt;foo&lt;/code&gt;, for example
&lt;code&gt;gl&lt;/code&gt; in &lt;code&gt;github.com/bjz/gl-rs#gl:1.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Pod&lt;/code&gt; kind &lt;a href="https://github.com/mozilla/rust/pull/10924"&gt;has been added&lt;/a&gt;
for types where a memcpy is a logical copy. This behaves very similarly to the
old &lt;code&gt;Copy&lt;/code&gt; kind.&lt;/li&gt;
&lt;li&gt;Stability attributes (&lt;code&gt;#[deprecated]&lt;/code&gt;, &lt;code&gt;#[experimental]&lt;/code&gt;, etc) &lt;a href="https://github.com/mozilla/rust/pull/10990"&gt;are now
checked for method calls&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Metadata reading has been made &lt;a href="https://github.com/mozilla/rust/pull/11017"&gt;4x
faster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;msys terminals are &lt;a href="https://github.com/mozilla/rust/pull/11031"&gt;now
supported&lt;/a&gt; by &lt;code&gt;extra::term&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Carter Tazio Schonwald&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-17"&gt;weekly
meeting&lt;/a&gt;
discusses some pull requests, &lt;code&gt;pkgid&lt;/code&gt;, renaming &lt;code&gt;extern mod&lt;/code&gt;, the stdlib
module hierarchy, and renaming some of the vector methods.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;We landed 19 PRs this week.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pradeep Kumar re-enabled parallel selector matching
&lt;a href="https://github.com/mozilla/servo/pull/1429"&gt;#1429&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Daniel Hedlund fixed window redraw on Linux
&lt;a href="https://github.com/mozilla/servo/pull/1414"&gt;#1414&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki significantly cleaned up the compositor source code in
&lt;a href="https://github.com/mozilla/servo/pull/1425"&gt;#1425&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simon Sapin added support for non-UTF8 stylesheets
&lt;a href="https://github.com/mozilla/servo/pull/1377"&gt;#1377&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Walton cleaned up made several PRs that clean up layout's dependency
on DOM nodes.&lt;/li&gt;
&lt;li&gt;Isabelle Carter added support for positioned offsets for layout in
&lt;a href="https://github.com/mozilla/servo/pull/1407"&gt;#1407&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;In this week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-16"&gt;meeting&lt;/a&gt;, we
discussed using the Critic review tool from Opera with github. We are
currently experimenting it, with jgraham's support. Jack also discussed his
ongoing Rust upgrade which, as always, has uncovered several interesting Rust
compiler bugs.&lt;/p&gt;
&lt;p&gt;We also sketched out our current planning
&lt;a href="https://github.com/mozilla/servo/wiki/Roadmap"&gt;roadmap&lt;/a&gt;, along with a cheat
sheet of some of the
&lt;a href="https://github.com/mozilla/servo/wiki/Research"&gt;research&lt;/a&gt; topics we're also
investigating.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The SF meetup happened. It was recorded and &lt;a href="https://air.mozilla.org/rust-meetup-december-2013/"&gt;is available on Air
Mozilla&lt;/a&gt;. The video is
well worth watching.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1t87a3/a_broad_vision_for_the_rust_docs_stack/"&gt;A broad vision for the Rust docs
stack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/"&gt;Two bugs in the borrow checker every Rust developer should know
about&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://metajack.im/2013/12/19/building-rust-code--using-make-part-2/"&gt;Building Rust Code - Using Make Part
2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1tdw88/video_2d_portaling_demo_in_rust_rustsdl2/"&gt;Video: 2D portaling demo in Rust and
rust-sdl2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1teet8/what_do_you_want_in_a_rust_book/"&gt;What do you want in a Rust
book?&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1tcat1/i_etched_myself_a_rust_logo/"&gt;An etched copper Rust
logo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blackducksw/ohcount/pull/30"&gt;Ohcount Rust support&lt;/a&gt; has
been merged, so hopefully ohloh will have more accurate information for Rust
projects soon.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 27</title><link href="http://this-week-in-rust.org/blog/2013/12/16/this-week-in-rust-27/" rel="alternate"></link><updated>2013-12-16T16:14:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-12-16:blog/2013/12/16/this-week-in-rust-27/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;! It's late this week
because bors was having some issues which bounced every pull request, and it's
no fun writing about nothing.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;61 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The first part of the &lt;code&gt;box&lt;/code&gt; changes &lt;a href="https://github.com/mozilla/rust/pull/10929"&gt;has
landed&lt;/a&gt;. &lt;code&gt;box&lt;/code&gt; is a keyword, and
in an expression is now synonymous with &lt;code&gt;~&lt;/code&gt; (ie, it allocates an owned box).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::vec::raw&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10984"&gt;has seen some
cleanup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Link meta attributes &lt;a href="https://github.com/mozilla/rust/pull/10593"&gt;have been
replaced&lt;/a&gt; with a &lt;code&gt;pkgid&lt;/code&gt;.  rustdoc
&lt;a href="https://github.com/mozilla/rust/pull/10948"&gt;also now requires&lt;/a&gt; a &lt;code&gt;pkgid&lt;/code&gt;
attribute, rather than the deprecated link meta.&lt;/li&gt;
&lt;li&gt;Some fairly obscure import syntax &lt;a href="https://github.com/mozilla/rust/pull/10808"&gt;has been
changed&lt;/a&gt;. &lt;code&gt;use {foo, bar}&lt;/code&gt; is now
permitted, and the old &lt;code&gt;use foo, bar&lt;/code&gt; is not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cell&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10791"&gt;has been removed&lt;/a&gt;.
&lt;code&gt;RefCell&lt;/code&gt; supersedes it.&lt;/li&gt;
&lt;li&gt;Attempting to implement private traits &lt;a href="https://github.com/mozilla/rust/pull/10862"&gt;no longer
works&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The coherence &lt;code&gt;-Z&lt;/code&gt; flag &lt;a href="https://github.com/mozilla/rust/pull/10909"&gt;has been
removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;self&lt;/code&gt; lifetime &lt;a href="https://github.com/mozilla/rust/pull/10897"&gt;is now
illegal&lt;/a&gt;, like the rest of the
keywords. Now, lifetime parameters are truly only identifiers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A dead code warning &lt;a href="https://github.com/mozilla/rust/pull/10477"&gt;has been
implemented&lt;/a&gt;. This is pretty
awesome and will do things like warn for test functions that are accidentally
never marked &lt;code&gt;#[test]&lt;/code&gt; and so are never called. Some bugs in it were
&lt;a href="https://github.com/mozilla/rust/pull/10870"&gt;also&lt;/a&gt;
&lt;a href="https://github.com/mozilla/rust/pull/10994"&gt;fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The benchmark runner &lt;a href="https://github.com/mozilla/rust/pull/10952"&gt;now
handles&lt;/a&gt; slow benchmarks.
Previously, it wouldn't run a benchmark that took more than 1ms. Now, it will!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;shootout-fasta&lt;/code&gt; benchmark &lt;a href="https://github.com/mozilla/rust/pull/10933"&gt;has been
rewritten&lt;/a&gt;. It's about 10x faster,
and looks nicer.&lt;/li&gt;
&lt;li&gt;Stepping through / breaking on function calls &lt;a href="https://github.com/mozilla/rust/pull/10966"&gt;no longer goes through the
function prelude&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The vector &lt;code&gt;move_iter&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10995"&gt;has been made
faster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A single &lt;a href="https://github.com/mozilla/rust/pull/10918"&gt;&lt;code&gt;#[inline]&lt;/code&gt;&lt;/a&gt;  has made
&lt;code&gt;vec::from_elem&lt;/code&gt; 20x faster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10856"&gt;now has an iterator over its
lines&lt;/a&gt;. The gotcha is that the
newlines are included in the yielded strings.&lt;/li&gt;
&lt;li&gt;Struct pattern shorthand &lt;a href="https://github.com/mozilla/rust/pull/10833"&gt;has been
improved&lt;/a&gt; by allowing ref/mut,
like &lt;code&gt;let Foo { mut x, .. } = some_foo&lt;/code&gt;, rather than the previous &lt;code&gt;let Foo {
x: mut x, .. } = some_foo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;LTO (link time optimization) &lt;a href="https://github.com/mozilla/rust/pull/10812"&gt;has been
implemented&lt;/a&gt;.  Rejoice.&lt;/li&gt;
&lt;li&gt;All landing pads (and thus unwinding!) &lt;a href="https://github.com/mozilla/rust/pull/10916"&gt;can now be
omitted&lt;/a&gt; when doing LTO.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::io::util&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10895"&gt;has been added&lt;/a&gt;
with:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LimitReader&lt;/code&gt; that will only read &lt;code&gt;n&lt;/code&gt; bytes from another reader&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NullWriter&lt;/code&gt; that ignores everything written to it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NullReader&lt;/code&gt; that is always EOF&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZeroReader&lt;/code&gt; which returns all zeroes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MultiWriter&lt;/code&gt; which will replicate a written buffer to many writers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ChainedReader&lt;/code&gt; which reads readers in order to completion&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TeeReader&lt;/code&gt; which will write to a Writer while reading&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;copy&lt;/code&gt; function which copies the full contents of a reader into a writer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows application manifests &lt;a href="https://github.com/mozilla/rust/pull/10878"&gt;are now
embedded&lt;/a&gt;, so we don't get
special cased.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;--dep-info&lt;/code&gt; flag &lt;a href="https://github.com/mozilla/rust/pull/10698"&gt;has been
added&lt;/a&gt; which is like &lt;code&gt;-MMD&lt;/code&gt; to C
compilers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;mut&lt;/code&gt; underneath &lt;code&gt;&amp;amp;&lt;/code&gt; can &lt;a href="https://github.com/mozilla/rust/pull/10787"&gt;now be
frozen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PortReader&lt;/code&gt; and &lt;code&gt;ChanWriter&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10823"&gt;have been
implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some more random distributions &lt;a href="https://github.com/mozilla/rust/pull/10859"&gt;have been
implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/mozilla/rust/pull/10874"&gt;now use&lt;/a&gt; LLVM's integrated
assembler on Windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cadence Marseille&lt;/li&gt;
&lt;li&gt;Edward Z. Yang&lt;/li&gt;
&lt;li&gt;Erik Price&lt;/li&gt;
&lt;li&gt;Fabrice Desré&lt;/li&gt;
&lt;li&gt;Jan Niklas Hasse&lt;/li&gt;
&lt;li&gt;Richard Diamond&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-10"&gt;weekly
meeting&lt;/a&gt;
discussed &lt;code&gt;enum mod&lt;/code&gt;, using types to drive inference (rather than attributes
like &lt;code&gt;#[no_send]&lt;/code&gt; etc), a formal grammar, unwinding, and some various PRs (all
mentioned above).&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;We landed 29 PRs this week.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Walton landed a number of changes to layout to avoid going back to
the DOM for properties to make layout's access to the DOM more opaque. He also
cleaned up a significant number of regressions and added a huge number of ref
tests.&lt;/li&gt;
&lt;li&gt;Keegan McAllister made content tests work in headless mode in
&lt;a href="https://github.com/mozilla/servo/pull/1382"&gt;#1382&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Daniel Glazman added namespace info to elements in
&lt;a href="https://github.com/mozilla/servo/pull/1358"&gt;#1358&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Daniel Hedlund added support for leading font metrics on Linux
&lt;a href="https://github.com/mozilla/servo/pull/1352"&gt;#1352&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;This week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-09"&gt;meeting&lt;/a&gt; discussed
an upcoming Servo workweek in SF on January 20th. We also discussed the Rust
version update and some general team frustration at a large number of
regressions lately, primarily caused by the need to disable some of our
automated testing due to instability (particularly at shutdown). This week of
work saw many of those issues fixed.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/wiki/Doc-FAQ-Cheatsheet"&gt;FAQ Cheatsheet&lt;/a&gt; -
A cookbook-style cheatsheet of how to do simple things, based on IRC FAQs.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://metajack.im/2013/12/11/building-rust-code--current-issues/"&gt;Building Rust Code - Current
Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://metajack.im/2013/12/12/building-rust-code--using-make/"&gt;Building Rust Code - Using
Make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pirapira/kissdb-rust"&gt;A Rust port of kissdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1syapv/implement_the_new_box_syntax_for_unique_pointers/"&gt;Reddit
discussion&lt;/a&gt;
of the &lt;code&gt;box&lt;/code&gt; change.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 26</title><link href="http://this-week-in-rust.org/blog/2013/12/09/this-week-in-rust-26/" rel="alternate"></link><updated>2013-12-09T13:13:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-12-09:blog/2013/12/09/this-week-in-rust-26/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;! It's a bit delayed
due to finals, but like the spinning of the Earth it goes on.&lt;/p&gt;
&lt;p&gt;Shameless plug: &lt;a href="http://www.reddit.com/r/rust/comments/1sikak/ask_cmr_to_do_things/"&gt;ask me to do
things&lt;/a&gt;
over my winter break!&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;52 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The much-discussed &lt;a href="https://github.com/mozilla/rust/pull/10364"&gt;&lt;code&gt;Result&lt;/code&gt; API
changes&lt;/a&gt; have happened. The gist
of it is that &lt;code&gt;.ok()&lt;/code&gt; and &lt;code&gt;.err()&lt;/code&gt; return Options. The other changes didn't
land, I assume they will be coming later.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/mozilla/rust/pull/10758"&gt;JIT support has been
removed&lt;/a&gt;, due to lack of maintenance and upstream
changes (this came with the LLVM upgrade).&lt;/li&gt;
&lt;li&gt;Keywords (except self) are &lt;a href="https://github.com/mozilla/rust/pull/10675"&gt;no longer allowed as lifetime
parameters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Path::init&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/10796"&gt;renamed&lt;/a&gt;
back to &lt;code&gt;Path::new&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::str::from_utf8&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10701"&gt;no longer
allocates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::util::ignore&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10701"&gt;has been
renamed&lt;/a&gt; to &lt;code&gt;std::prelude::drop&lt;/code&gt;, to
better reflect what it does.&lt;/li&gt;
&lt;li&gt;Duplicate bindings are &lt;a href="https://github.com/mozilla/rust/pull/10776"&gt;no longer
allowed&lt;/a&gt; in struct bindings. That
is, &lt;code&gt;let SomeStruct { foo, foo } = baz;&lt;/code&gt; is no longer legal.&lt;/li&gt;
&lt;li&gt;Dynamic library propagation &lt;a href="https://github.com/mozilla/rust/pull/10777"&gt;is
reimplemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::c_vec&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10736"&gt;has been
modernized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MutableVector::mut_split&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10757"&gt;has been
renamed&lt;/a&gt; to &lt;code&gt;mut_split_at&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A part of the tutorial &lt;a href="https://github.com/mozilla/rust/pull/10690"&gt;has been
rewritten&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Vim highlighting &lt;a href="https://github.com/mozilla/rust/pull/10793"&gt;has been
updated&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10844"&gt;has better error
messages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrSlice&lt;/code&gt; has &lt;a href="https://github.com/mozilla/rust/pull/10824"&gt;grown some
documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Snapshots are now &lt;a href="https://github.com/mozilla/rust/pull/10809"&gt;statically
linked&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;From the "changes I don't really understand" department, &lt;a href="https://github.com/mozilla/rust/pull/10506"&gt;trait lifetime
parameters&lt;/a&gt; are early bound in
associated functions.&lt;/li&gt;
&lt;li&gt;A race in the scheduler &lt;a href="https://github.com/mozilla/rust/pull/10817"&gt;has been
squelched&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;extra now has an &lt;a href="https://github.com/mozilla/rust/pull/10211"&gt;LRU cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;log_enabled!(level)&lt;/code&gt; macro &lt;a href="https://github.com/mozilla/rust/pull/10768"&gt;has been
added&lt;/a&gt;, for checking if the
program is being run at a given log level.&lt;/li&gt;
&lt;li&gt;Static linking &lt;a href="https://github.com/mozilla/rust/pull/10742"&gt;now has docs&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Memory usage when compiling librustc has been killed by 130MB with some
&lt;a href="https://github.com/mozilla/rust/pull/10676"&gt;well-placed indirection&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MutableVector&lt;/code&gt; has &lt;a href="https://github.com/mozilla/rust/pull/10739"&gt;another
iterator&lt;/a&gt;: &lt;code&gt;mut_chunks()&lt;/code&gt;, for
iterating over mutable slices.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reverse-complement&lt;/code&gt; shootout benchmark &lt;a href="https://github.com/mozilla/rust/pull/10799"&gt;has been
rewritten&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Alexandros Tasos&lt;/li&gt;
&lt;li&gt;Diego Ongaro&lt;/li&gt;
&lt;li&gt;Julia Evans&lt;/li&gt;
&lt;li&gt;osa1&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-12-03"&gt;weekly
meeting&lt;/a&gt;
discussed using &lt;code&gt;box&lt;/code&gt; for placement new, some rustpkg discussion, dropping the
dependency on a system C++ library, and the above &lt;code&gt;from_utf8&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt;
pull requests.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;We landed 19 PRs this week.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simon Sapin added the CSS visibility property in
&lt;a href="https://github.com/mozilla/servo/pull/1331"&gt;#1331&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Juneyoung Cho landed local bookmark navigation in
&lt;a href="https://github.com/mozilla/servo/pull/1262"&gt;#1262&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;ms2ger added reporting exceptions to JS when the DOM implementation fails in
&lt;a href="https://github.com/mozilla/servo/pull/1304"&gt;#1304&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Keegan McAllister and Patrick Kim landed several changes to continue our
push to remove @-boxes to open up more of our data to safe parallel access
across task boundaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bruno de Oliveira Abinader&lt;/li&gt;
&lt;li&gt;Daniel Hedlund&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New intern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Isabelle Carter will be joining us as part of the GNOME Outreach Program for
Women, &lt;a href="https://wiki.gnome.org/OutreachProgramForWomen"&gt;OPW&lt;/a&gt;, and will be
working on adding &lt;code&gt;position:fixed&lt;/code&gt; support to Servo. The internship runs from
December 10 through March 10.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;This week's
&lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2013-12-02"&gt;meeting&lt;/a&gt; was short
and mostly covered some build system changes that Jack is working on. In
short, we will use Rust's static linking to make it easier to distribute a
Servo binary and we are making a larger change to CMake in order to get both
more reliable parallel/incremental builds and get support for
cross-compilation.&lt;/p&gt;
&lt;h1&gt;Announcements etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s5laq/evictbt_an_issue_tracker_written_in_rust_that/"&gt;Evict-BT&lt;/a&gt;
 - an issue tracker that integrates loosely with git.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s8c0j/rust_with_emscripten/"&gt;Rust with
 Emscripten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s3jgd/day_36_on_programming_without_malloc/"&gt;Day 36: On programming without
 malloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s3osp/blast_from_the_past_pre01_raytracer_rustdev_rust/"&gt;Rust experience
 report&lt;/a&gt;
 - a pre-0.1 raytracer and response to the language.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s0aj5/rust_frontend_to_gcc/"&gt;Rust frontend to
 GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ry4ym/types_in_rust_for_beginners/"&gt;Types in Rust, for
 Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1rxj0x/thoughts_on_dst_part_4_including_a_recap_of_parts/"&gt;Thoughts on DST, part
 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pnkfelix.github.io/present-rust-codemesh2013/fklock-rust-codemesh2013.pdf"&gt;Slides from pnkfelix's codemash
 presentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1seoe1/lets_avoid_having_both_foo_and_foo_opt/"&gt;An ML thread on redundant APIs involving
 &lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1se6qa/rfc_what_do_you_want_in_a_rust_docker_image/"&gt;What do you want in a Rust Docker
 image?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s9y7o/less_is_more_lambda_the_ultimate/"&gt;A huge thread on lots of things
 Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1s8opt/sodium_oxide_fast_cryptographic_library_for_rust/"&gt;Rust bindings to
 libsodium/NaCl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 25</title><link href="http://this-week-in-rust.org/blog/2013/11/30/this-week-in-rust-25/" rel="alternate"></link><updated>2013-11-30T15:56:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-11-30:blog/2013/11/30/this-week-in-rust-25/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly newsletter
summarizing Rust's progress and community activity. As always, if you have
something you'd like to be featured, just &lt;a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion"&gt;send me an
email&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last week was very slow, but this week more than makes up for it I think!
Static linking landed, and there's been some nice cleanup of error messages
and various APIs.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;59 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Names of methods creating iterators have &lt;a href="https://github.com/mozilla/rust/pull/10622"&gt;changed
  drastically&lt;/a&gt; to remove the
  &lt;code&gt;_iter&lt;/code&gt; suffix. This reflects that iterators are a primary focus of APIs.
  The PR description has all of the changes summarized.&lt;/li&gt;
&lt;li&gt;We now have &lt;a href="https://github.com/mozilla/rust/pull/10528"&gt;static linking
  support&lt;/a&gt;! It does, however,
  involve some changes with how the &lt;code&gt;link&lt;/code&gt; attribute works. The error messages
  should guide you to the fixes.&lt;/li&gt;
&lt;li&gt;In preparation for the placement new changes, the &lt;code&gt;Path&lt;/code&gt; constructor has
  been &lt;a href="https://github.com/mozilla/rust/pull/10697"&gt;renamed from &lt;code&gt;new&lt;/code&gt; to
  &lt;code&gt;init&lt;/code&gt;&lt;/a&gt;,.&lt;/li&gt;
&lt;li&gt;Some overly-permissive borrow checking for &lt;code&gt;&amp;amp;mut &amp;amp;mut&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10519"&gt;has been
  fixed&lt;/a&gt;. This is fairly obscure,
  most code shouldn't have hit it.&lt;/li&gt;
&lt;li&gt;The parser is &lt;a href="https://github.com/mozilla/rust/pull/10642"&gt;more strict&lt;/a&gt;
  about what it accepts as a doc comment. Now, only &lt;code&gt;///&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;  are
  counted as introducing doc comments (previously, &lt;code&gt;////&lt;/code&gt; and &lt;code&gt;/***&lt;/code&gt; would
  also introduce a doc comment).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::{uint, int}::{min, max}&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10719"&gt;have been
  removed&lt;/a&gt;. They were identical to
  the functions in &lt;code&gt;std::cmp&lt;/code&gt;, so use those instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::json&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10727"&gt;has been rid of @
  boxes&lt;/a&gt;, and now uses idiomatic
  constructor names.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;type_id&lt;/code&gt; intrinsic &lt;a href="https://github.com/mozilla/rust/pull/10722"&gt;now uses a language item as its return
  value&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/10662"&gt;cleanup&lt;/a&gt; has been done to
  &lt;code&gt;std::rt::thread&lt;/code&gt;, which is an interface to native threads (rather than
  tasks).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; blocks are &lt;a href="https://github.com/mozilla/rust/pull/10581"&gt;no longer
  allowed&lt;/a&gt; in non-&lt;code&gt;proc&lt;/code&gt; contexts.
  This means that &lt;code&gt;do&lt;/code&gt; can not be used with a function whose last argument is
  not a &lt;code&gt;proc&lt;/code&gt;. A fairly large &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006999.html"&gt;thread on the mailing
  list&lt;/a&gt;
  is ongoing about this change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LittleLock&lt;/code&gt; now &lt;a href="https://github.com/mozilla/rust/pull/10660"&gt;uses RAII&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;C-like enums are &lt;a href="https://github.com/mozilla/rust/pull/10652"&gt;now represented as an
  integer&lt;/a&gt; rather than a struct,
  at the LLVM level. This affects ABI.&lt;/li&gt;
&lt;li&gt;Linked failure &lt;a href="https://github.com/mozilla/rust/pull/10603"&gt;has been
  removed&lt;/a&gt; from the runtime.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::term&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10637"&gt;no longer uses &lt;code&gt;@mut
  Writer&lt;/code&gt;&lt;/a&gt;, instead taking the
  writer to use by value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;, previously known as &lt;code&gt;Mut&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;a href="https://github.com/mozilla/rust/pull/10514"&gt;has finally
  landed&lt;/a&gt;, for all your dynamic
  borrow checking needs.&lt;/li&gt;
&lt;li&gt;A lint for unknown attributes &lt;a href="https://github.com/mozilla/rust/pull/10316"&gt;has finally been
  added&lt;/a&gt;. The compiler will now
  warn when it sees an attribute it doesn't recognize.&lt;/li&gt;
&lt;li&gt;A lock-free &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;Chase-Lev
  deque&lt;/a&gt;
  has &lt;a href="https://github.com/mozilla/rust/pull/10678"&gt;been added to the runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The shootout-spectralnorm benchmark &lt;a href="https://github.com/mozilla/rust/pull/10704"&gt;has been
  resurrected&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unknown feature gates &lt;a href="https://github.com/mozilla/rust/pull/10680"&gt;are now
  linted&lt;/a&gt;, rather than being a
  hard failure.&lt;/li&gt;
&lt;li&gt;The AST is &lt;a href="https://github.com/mozilla/rust/pull/10693"&gt;now frozen&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GenericPort&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10688"&gt;now has an
  iterator&lt;/a&gt; over the messages it
  receives.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodeId&lt;/code&gt;, &lt;code&gt;CrateNum&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, and &lt;code&gt;Mrk&lt;/code&gt; (types in libsyntax) &lt;a href="https://github.com/mozilla/rust/pull/10670"&gt;have been
  shrunk to 32 bits&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The restriction on macros expanding to a single item &lt;a href="https://github.com/mozilla/rust/pull/10649"&gt;has been
  lifted&lt;/a&gt;. This obviates the need
  for macros hackily expanding to a module containing the desired items. Do
  note that this only works when the macro is in "item position", or where an
  item is expected. There is an
  &lt;a href="https://github.com/mozilla/rust/issues/10681"&gt;issue&lt;/a&gt; open for lifting this
  restriction.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;thread_local&lt;/code&gt; attribute &lt;a href="https://github.com/mozilla/rust/pull/10312"&gt;has been
  added&lt;/a&gt;, which exposes a
  platform's native TLS, a la C11/C++11 &lt;code&gt;thread_local&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cross compilation to win64 (via mingw-w64) &lt;a href="https://github.com/mozilla/rust/pull/10578"&gt;is now
  supported&lt;/a&gt;. There were also a
  &lt;a href="https://github.com/mozilla/rust/pull/10631"&gt;bunch of fixes&lt;/a&gt; on real win64.&lt;/li&gt;
&lt;li&gt;The parser gives a &lt;a href="https://github.com/mozilla/rust/pull/10641"&gt;better error
  message&lt;/a&gt; when it encounters an
  unclosed delimiter it didn't expect.&lt;/li&gt;
&lt;li&gt;There is a &lt;a href="https://github.com/mozilla/rust/pull/10475"&gt;better error
  message&lt;/a&gt; when a module name is
  used as a type (the motivating example being &lt;code&gt;impl SomeTrait for some_module&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;JSON decoding &lt;a href="https://github.com/mozilla/rust/pull/10625"&gt;now gives better
  errors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Linker optimizations are &lt;a href="https://github.com/mozilla/rust/pull/10620"&gt;now
  used&lt;/a&gt; on Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;p&gt;Our first-time contributors this week are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Andreas Ots&lt;/li&gt;
&lt;li&gt;Eric Biggers&lt;/li&gt;
&lt;li&gt;Jannis Harder&lt;/li&gt;
&lt;li&gt;Kiet Tran&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-26"&gt;weekly
meeting&lt;/a&gt;
discussed bootstrap times, the &lt;code&gt;thread_local&lt;/code&gt; PR, mutexes, and the GC. In
particular, it was decided that we should have nightlies.&lt;/p&gt;
&lt;h1&gt;This Week in Servo&lt;/h1&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.&lt;/p&gt;
&lt;p&gt;This was a short week due to the US Thanksgiving holiday, but there were still
17 landed PRs this week.&lt;/p&gt;
&lt;h2&gt;Notable additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hyunjune Kim and Sammy Kim landed some border style extensions in
  &lt;a href="http://github.com/mozilla/servo/pull/1322"&gt;#1276&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Youngmin Yoo, Seonghyun Kim, and Jaemin Moon landed overflow:hidden in
  &lt;a href="http://github.com/mozilla/servo/pull/1298"&gt;#1298&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Isabelle Carter landed changing the unrendered portion of content to use the
  doc's background color in &lt;a href="http://github.com/mozilla/servo/pull/1210"&gt;#1210&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Patrick Walton has been experimenting with some very promising parallel
  layout work, which he described in a
  &lt;a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/1nKmBvFewIs"&gt;message&lt;/a&gt;
  to the mailing list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meetings&lt;/h2&gt;
&lt;p&gt;This week's &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-25"&gt;meeting&lt;/a&gt;
covered the poor situation with Nvidia support on Linux, fleshed out the string
interning plan during CSS selector parsing/matching, and went into some Servo
and Rust-related build issues.&lt;/p&gt;
&lt;h1&gt;Announcements etc&lt;/h1&gt;
&lt;p&gt;Do note that all the links are pulled directly from the
&lt;a href="https://reddit.com/r/rust"&gt;subreddit&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1rf8rz/matrix_multiply_performance_in_rust/"&gt;Matrix Multiply Performance in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sebcrozet/nrays"&gt;nrays&lt;/a&gt; - a 3d/4d raytracer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/sprocketnes-practical-systems-programming-in-rust/"&gt;SprocketNES: Practical Systems Programming in
  Rust&lt;/a&gt;.
  Contrary to the title, this is actually a recording of the presentations at
  the Bay Area meetup.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/uutils/coreutils"&gt;uutils&lt;/a&gt; - an attempt at writing
  universal (as in cross-platform) CLI utils in Rust&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmr/lets-build-a-compiler"&gt;lbac&lt;/a&gt; - a Rust port of Jack
  Crenshaw's "Let's Build a Compiler"&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 24</title><link href="http://this-week-in-rust.org/blog/2013/11/23/this-week-in-rust-24/" rel="alternate"></link><updated>2013-11-23T17:58:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-11-23:blog/2013/11/23/this-week-in-rust-24/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;47 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Non-ASCII identifiers are &lt;a href="https://github.com/mozilla/rust/pull/10605"&gt;feature
  gated&lt;/a&gt;, due to open questions
  about how it should be done. They aren't being removed, just deferred to
  post-1.0.&lt;/li&gt;
&lt;li&gt;Some more closure reform has gone through. &lt;code&gt;~fn&lt;/code&gt; has been removed, &lt;a href="https://github.com/mozilla/rust/pull/10561"&gt;use
  &lt;code&gt;proc&lt;/code&gt; instead&lt;/a&gt;. &lt;code&gt;&amp;amp;fn&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/10568"&gt;also
  short for this world&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::util::NonCopyable&lt;/code&gt; had its dummy constructor
  &lt;a href="https://github.com/mozilla/rust/pull/10575"&gt;removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All of the functions in rustrt &lt;a href="https://github.com/mozilla/rust/pull/10440"&gt;have been prefixed with
  &lt;code&gt;rust_&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Items inside functions &lt;a href="https://github.com/mozilla/rust/pull/10443"&gt;no longer accept privacy
  modifiers&lt;/a&gt;, since it is
  meaningless.&lt;/li&gt;
&lt;li&gt;Reachable &lt;code&gt;extern fn&lt;/code&gt;s are &lt;a href="https://github.com/mozilla/rust/pull/10539"&gt;no longer marked
  internal&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Gc&amp;lt;T&amp;gt;&lt;/code&gt; stub &lt;a href="https://github.com/mozilla/rust/pull/10576"&gt;has been added&lt;/a&gt;.
  New code should use this instead of &lt;code&gt;@T&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..&lt;/code&gt; is now &lt;a href="https://github.com/mozilla/rust/pull/10366"&gt;the pattern to use&lt;/a&gt;
  when ignoring multiple elements in a pattern.&lt;/li&gt;
&lt;li&gt;Stepping through &lt;code&gt;if&lt;/code&gt; in a debugger &lt;a href="https://github.com/mozilla/rust/pull/10552"&gt;should be much smoother
  now&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg -O&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10526"&gt;will now actually
  optimize&lt;/a&gt; the package it is
  building.&lt;/li&gt;
&lt;li&gt;Did you know we can make tags files for the Rust codebase? &lt;code&gt;make
  TAGS.{vi,emacs}&lt;/code&gt;! It no longer generates tags for &lt;a href="https://github.com/mozilla/rust/pull/10508"&gt;all of LLVM and
  libuv&lt;/a&gt;, too.&lt;/li&gt;
&lt;li&gt;The pidigits benchmark &lt;a href="https://github.com/mozilla/rust/pull/10555"&gt;has been
  resurrected&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A native mutex type &lt;a href="https://github.com/mozilla/rust/pull/10479"&gt;now
  exists&lt;/a&gt;, and it doesn't depend
  on C++.&lt;/li&gt;
&lt;li&gt;Some more derived methods are &lt;a href="https://github.com/mozilla/rust/pull/10557"&gt;marked for
  inlining&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bunch more &lt;a href="https://github.com/mozilla/rust/pull/10495"&gt;native file IO&lt;/a&gt;
  was implemented, too.&lt;/li&gt;
&lt;li&gt;We now have support for the &lt;a href="https://github.com/mozilla/rust/pull/10527"&gt;win64 calling
  convention&lt;/a&gt;. Additionally, the
  ABI of &lt;code&gt;extern fn&lt;/code&gt;s is now actually used.&lt;/li&gt;
&lt;li&gt;The tutorial &lt;a href="https://github.com/mozilla/rust/pull/10589"&gt;now covers alternatives to
  ownership&lt;/a&gt; much better.&lt;/li&gt;
&lt;li&gt;A lint for unsafe blocks &lt;a href="https://github.com/mozilla/rust/pull/10599"&gt;has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A minor bug with privacy &lt;a href="https://github.com/mozilla/rust/pull/10583"&gt;has been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;p&gt;Our first-time contributors this week are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dave Hodder&lt;/li&gt;
&lt;li&gt;Ian Daniher&lt;/li&gt;
&lt;li&gt;Isaac Dupree&lt;/li&gt;
&lt;li&gt;g3xzh&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-19"&gt;weekly
meeting&lt;/a&gt;
discussed static linking, changing how &lt;code&gt;let _ = foo&lt;/code&gt; is handled, task joining,
autoderef, and user-defined vector types.&lt;/p&gt;
&lt;h1&gt;Announcements, etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="http://adridu59.github.io/rust-tuts/"&gt;new
  tutorial&lt;/a&gt; project
  has sprung up.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Servo&lt;/h1&gt;
&lt;p&gt;Thanks to Lars Bergstrom for This Week in Servo! Servo is Rust's sister
project, and I think it's nice to be able to see a highlevel of its progress.
Maybe TWiS will graduate to a separate blog someday.&lt;/p&gt;
&lt;h2&gt;This Week in Servo&lt;/h2&gt;
&lt;p&gt;Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language. Starting this week, TWiR will include a status
update from Servo.&lt;/p&gt;
&lt;p&gt;There were 14 landed PRs this week.&lt;/p&gt;
&lt;h3&gt;Notable additions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Patrick Walton rewrote flow construction so that we can make it incremental
  and parallelizable in https://github.com/mozilla/servo/pull/1271&lt;/li&gt;
&lt;li&gt;Ryan Choi added support for transparant PNG files in
  https://github.com/mozilla/servo/pull/1288&lt;/li&gt;
&lt;li&gt;Junyoung Cho added the ACID2 test file, which is one of the big focuses of
  the team over the coming months, in
  https://github.com/mozilla/servo/pull/1287&lt;/li&gt;
&lt;li&gt;In his first Servo PR, Adenilson Cavalcanti contributed a help message for
  the binary in https://github.com/mozilla/servo/pull/1277&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Meetings&lt;/h3&gt;
&lt;p&gt;Having spent the prior week at a workweek with Samsung in Korea (where there
were several presentations on both Rust and Servo!
https://github.com/mozilla/servo/wiki/Videos-and-presentations ), the meeting
was pretty light this week. It mainly &lt;a href="https://github.com/mozilla/servo/wiki/Meeting-2013-11-18"&gt;covered&lt;/a&gt; getting more formal
tracking of the work required for ACID2 and prioritizing Windows support.&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 23</title><link href="http://this-week-in-rust.org/blog/2013/11/19/this-week-in-rust-23/" rel="alternate"></link><updated>2013-11-19T01:42:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-11-19:blog/2013/11/19/this-week-in-rust-23/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;46 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::rt::io&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10423"&gt;has moved on&lt;/a&gt; to
  become &lt;code&gt;std::io&lt;/code&gt;. Yay!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;#[fixed_stack_segment]&lt;/code&gt; attribute &lt;a href="https://github.com/mozilla/rust/pull/10407"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt; casts to functions are &lt;a href="https://github.com/mozilla/rust/pull/9788"&gt;no longer
  allowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The return value of the &lt;code&gt;io::process&lt;/code&gt; is no longer an int, but &lt;a href="https://github.com/mozilla/rust/pull/10109"&gt;an enum that
  also represents termination by
  signal&lt;/a&gt;. It's also ostensibly
  more portable: to check if a subprocess succeeded, just call &lt;code&gt;.success()&lt;/code&gt; on
  the return value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cast::unsafe_copy&lt;/code&gt; has &lt;a href="https://github.com/mozilla/rust/pull/10497"&gt;has been
  removed&lt;/a&gt;. It is identical to
  &lt;code&gt;std::ptr::read_ptr&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Trailing &lt;code&gt;::&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/10420"&gt;no longer
  allowed&lt;/a&gt; in paths&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vectors have &lt;a href="https://github.com/mozilla/rust/pull/10417"&gt;more overflow
  checking&lt;/a&gt;. This was the cause
  of a few mysterious segfaults.&lt;/li&gt;
&lt;li&gt;Crate maps &lt;a href="https://github.com/mozilla/rust/pull/10422"&gt;can now be generated for
  libraries&lt;/a&gt;, for when you want to
  embed a Rust library in a non-Rust application.&lt;/li&gt;
&lt;li&gt;Creation of buffered readers/writers &lt;a href="https://github.com/mozilla/rust/pull/10424"&gt;has been optimized a
  bit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you use OS X, you'll be happy to see that the frivolous "no debug symbols
  in executable" warning &lt;a href="https://github.com/mozilla/rust/pull/10198"&gt;has been stomped
  out&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The missing-documentation lint is &lt;a href="https://github.com/mozilla/rust/pull/10277"&gt;now more
  accepting&lt;/a&gt;, and won't warn about
  private items.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BufWriter&lt;/code&gt;, an implementation of Writer for already-existing buffers, &lt;a href="https://github.com/mozilla/rust/pull/10451"&gt;is
  now implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The native IO backend has seen &lt;a href="https://github.com/mozilla/rust/pull/10457"&gt;a good
  boost&lt;/a&gt;; it will now be
  seamlessly fallen back to when the libuv backend isn't available (you can
  test this out by adding &lt;code&gt;#[no_uv];&lt;/code&gt; to your crates).&lt;/li&gt;
&lt;li&gt;A lint for numeric literals which overflow their type &lt;a href="https://github.com/mozilla/rust/pull/10018"&gt;has been
  implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Buffer&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/10466"&gt;has been
  added&lt;/a&gt; to &lt;code&gt;std::io&lt;/code&gt;, with
  &lt;code&gt;read_line&lt;/code&gt;, &lt;code&gt;read_until&lt;/code&gt;, and &lt;code&gt;read_char&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The error message when the trait's method declaration and the method
  declaration in the implementation aren't the same &lt;a href="https://github.com/mozilla/rust/pull/10509"&gt;now includes the trait
  name&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The libuv bindings were &lt;a href="https://github.com/mozilla/rust/pull/10321"&gt;largely
  rewritten&lt;/a&gt; for performance, at
  the sacrifice of some flexibility (which was of questionable value).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;-prefixed variables &lt;a href="https://github.com/mozilla/rust/pull/10518"&gt;no
  longer&lt;/a&gt; get an unused &lt;code&gt;mut&lt;/code&gt;
  warning.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;p&gt;Our first-time contributors this week are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jaemin Moon&lt;/li&gt;
&lt;li&gt;Jay Anderson&lt;/li&gt;
&lt;li&gt;Joe Schafer&lt;/li&gt;
&lt;li&gt;Matthew Iselin&lt;/li&gt;
&lt;li&gt;Zach Kamsler&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;There was no meeting this week, as a bunch of the core developers were in
South Korea for the Servo workweek with Samsung.&lt;/p&gt;
&lt;h2&gt;Announcements etc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006686.html"&gt;(ML) Rethinking Linking in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006550.html"&gt;(ML) The future of M:N
  threading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006714.html"&gt;(ML) Type system
  thoughts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006431.html"&gt;(ML)Changing
  roles&lt;/a&gt;,
  Tim's "going-away" post. He did great work on rustpkg, and I hope he finds
  time to continue to contribute to Rust.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.theincredibleholk.org/blog/2013/11/18/booting-to-rust/"&gt;Booting to Rust (with
  UEFI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2013/11/14/treating-vectors-like-any-other-container/"&gt;Treating Vectors Like Any Other
  Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adrientetar.legtux.org/blog_fr.php?post=0"&gt;Moving forward with Rust
  website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>These Weeks in Rust 22</title><link href="http://this-week-in-rust.org/blog/2013/11/09/these-weeks-in-rust-22/" rel="alternate"></link><updated>2013-11-09T05:21:00-05:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-11-09:blog/2013/11/09/these-weeks-in-rust-22/</id><summary type="html">&lt;p&gt;Welcome to a mega-&lt;em&gt;This Week in Rust&lt;/em&gt;. I was swamped this past week with
schoolwork, so TWiR was put off. This week's combines the past two weeks of
progress. These past two weeks were fairly exciting in terms of language and
library progress. The next few weeks should be even more exciting.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;There were 108 PRs merged these past two weeks.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The very long-awaited &lt;a href="https://github.com/mozilla/rust/pull/9613"&gt;enum discriminant size
  patch&lt;/a&gt; has landed. This will
  affect FFI. Size of enum discriminant is now configurable via the &lt;code&gt;repr&lt;/code&gt;
  attribute, and will by default shrink to the smallest needed.&lt;/li&gt;
&lt;li&gt;The extension traits for &lt;code&gt;Reader&lt;/code&gt; and &lt;code&gt;Writer&lt;/code&gt; have &lt;a href="https://github.com/mozilla/rust/pull/10079"&gt;been transformed into
  default methods on their respective
  trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Non-string literals are now
  &lt;a href="https://github.com/mozilla/rust/pull/10166"&gt;disallowed&lt;/a&gt; in attributes.&lt;/li&gt;
&lt;li&gt;Type parameters are now
  &lt;a href="https://github.com/mozilla/rust/pull/10189"&gt;forbidden&lt;/a&gt; on inner statics
  (statics inside functions).&lt;/li&gt;
&lt;li&gt;The interface to flush stdout &lt;a href="https://github.com/mozilla/rust/pull/10218"&gt;has
  changed&lt;/a&gt;. It was previously
  unsound by allowing aliased &lt;code&gt;&amp;amp;mut&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Result&lt;/code&gt;'s API has changed &lt;a href="https://github.com/mozilla/rust/pull/10119"&gt;quite a
  bit&lt;/a&gt;, to be more consistent with
  &lt;code&gt;Option&lt;/code&gt;, and hopefully simpler.&lt;/li&gt;
&lt;li&gt;Linker arguments &lt;a href="https://github.com/mozilla/rust/pull/10199"&gt;no longer&lt;/a&gt;
  propagate across crates. This means that if you link to a crate, its linker
  arguments won't be automatically added when your crate is linked.&lt;/li&gt;
&lt;li&gt;The memory intrinsics &lt;a href="https://github.com/mozilla/rust/pull/10251"&gt;have been
  simplified&lt;/a&gt;. A single intrinsic
  for &lt;code&gt;memcpy&lt;/code&gt;/&lt;code&gt;memmove&lt;/code&gt;/&lt;code&gt;memset&lt;/code&gt; is now exposed, rather than one per
      platform.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#[link(name = "...")]&lt;/code&gt; is now &lt;a href="https://github.com/mozilla/rust/pull/10260"&gt;taken into
  account&lt;/a&gt; by rustc when creating
  build artifacts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::rt::io::file&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10179"&gt;has been fleshed out and
  tweaked&lt;/a&gt;. In particular, it has
  been renamed to &lt;code&gt;std::rt::io::fs&lt;/code&gt;, many previously-free functions are now
  associated functions on &lt;code&gt;std::rt::io::File&lt;/code&gt;, and &lt;code&gt;FileInfo&lt;/code&gt; has been renamed
  to &lt;code&gt;FileStat&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Calling variadic functions with the C FFI &lt;a href="https://github.com/mozilla/rust/pull/10064"&gt;is now
  implemented&lt;/a&gt;. This is a pretty
  sweet change. The only thing missing in our C FFI now is unions.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/mozilla/rust/pull/10243"&gt;now have&lt;/a&gt; octal numeric
  literals, for all your esoteric numeric needs!&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;Any&lt;/code&gt; type &lt;a href="https://github.com/mozilla/rust/pull/9967"&gt;has been added&lt;/a&gt;,
  and it is now possible to retrieve the object a task failed with. Previously
  tasks could only fail with a string, now they can fail with anything.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;concat!&lt;/code&gt; syntax extension &lt;a href="https://github.com/mozilla/rust/pull/9740"&gt;has been
  added&lt;/a&gt; for compile-time string
  concatenation.&lt;/li&gt;
&lt;li&gt;Timers are &lt;a href="https://github.com/mozilla/rust/pull/10083"&gt;now also ports&lt;/a&gt;, and
  the creator of a timer can cancel it.&lt;/li&gt;
&lt;li&gt;As the first part of closure reform, &lt;code&gt;proc&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/10132"&gt;now sugar&lt;/a&gt; for &lt;code&gt;~once
  fn&lt;/code&gt;, and &lt;code&gt;|A| -&amp;gt; B&lt;/code&gt; (and &lt;code&gt;fn(A) -&amp;gt; B&lt;/code&gt; for bare functions) &lt;a href="https://github.com/mozilla/rust/pull/10187"&gt;are now
  allowed&lt;/a&gt; in types.&lt;/li&gt;
&lt;li&gt;The section in the tutorial on vectors and strings &lt;a href="https://github.com/mozilla/rust/pull/10354"&gt;has been
  rewritten&lt;/a&gt; for correctness with
  modern Rust.&lt;/li&gt;
&lt;li&gt;A bunch of C++ has been removed and rewritten. &lt;a href="https://github.com/mozilla/rust/pull/10290"&gt;Thread
  creation&lt;/a&gt;, &lt;a href="https://github.com/mozilla/rust/pull/10094"&gt;memory
  regions&lt;/a&gt; (used for debugging and
  &lt;code&gt;@&lt;/code&gt;-boxes, from what I can tell), and an &lt;a href="https://github.com/mozilla/rust/pull/10163/files"&gt;unused
  &lt;code&gt;array_list&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Bounds check failures are &lt;a href="https://github.com/mozilla/rust/pull/10113"&gt;now marked as a cold
  path&lt;/a&gt;, and a &lt;code&gt;cold&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10127"&gt;function
  attribute&lt;/a&gt; has been added.&lt;/li&gt;
&lt;li&gt;The build system &lt;a href="https://github.com/mozilla/rust/pull/10203"&gt;can cross-compile to iOS
  now&lt;/a&gt;, even though Rust doesn't
  actually run on that platform (yet!).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::rand&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10223"&gt;now implements the Gamma
  distribution&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cross-crate destructor inlining &lt;a href="https://github.com/mozilla/rust/pull/10242"&gt;now
  works&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;type_id&lt;/code&gt; intrinsic &lt;a href="https://github.com/mozilla/rust/pull/10182"&gt;has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Everything in the runtime that uses &lt;code&gt;libuv&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/10058"&gt;split into its own
  crate&lt;/a&gt;. This means that the
  runtime really is pluggable: you can implement your own event loop and so
  forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;p&gt;Welcome to our new contributors!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brian&lt;/li&gt;
&lt;li&gt;Carol Willing&lt;/li&gt;
&lt;li&gt;Dirkjan Bussink&lt;/li&gt;
&lt;li&gt;Guillaume Pinot&lt;/li&gt;
&lt;li&gt;Gyorgy Andrasek&lt;/li&gt;
&lt;li&gt;Joshua Yanovski&lt;/li&gt;
&lt;li&gt;Mat Carberry&lt;/li&gt;
&lt;li&gt;Noufal Ibrahim&lt;/li&gt;
&lt;li&gt;Robert Irelan&lt;/li&gt;
&lt;li&gt;Tomas Sedovic&lt;/li&gt;
&lt;li&gt;Jennifer Ward&lt;/li&gt;
&lt;li&gt;Patrick Kim&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At .85 new contributors a day, we'll soon dwarf every other language in the
"awesome volunteer" category.&lt;/p&gt;
&lt;h1&gt;Weekly Meetings&lt;/h1&gt;
&lt;p&gt;Last week's
&lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-29"&gt;meeting&lt;/a&gt;
discussed segmented stacks (spoiler: &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-November/006314.html"&gt;they're not coming
back&lt;/a&gt; )
and placement new (we want it, how do we want it?).&lt;/p&gt;
&lt;p&gt;This week's
&lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-11-05"&gt;meeting&lt;/a&gt;
discussed the future of libextra, more stack things, octal literals, vector
representation, and temporary ("rvalue") lifetimes.&lt;/p&gt;
&lt;h1&gt;Announcements etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reminder from ~~the Ministry of Truth~~ ChrisMorgan&lt;/strong&gt;: Rust is awesome.&lt;/li&gt;
&lt;li&gt;Rust Skåne, &lt;a href="http://www.foocafe.org/event/a-friendly-introduction-to-rust"&gt;has an event page
  now&lt;/a&gt;. It will
  be December 3 at 17:30 in Foo Cafe.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/"&gt;Integermingled Parameter
  Lists&lt;/a&gt;,
  and &lt;a href="http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/"&gt;take
  2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/haxney/speculate"&gt;speculate&lt;/a&gt; - a parallel speculative
  execution library.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/luqmana/mcchat"&gt;mcchat&lt;/a&gt; - a pure-Rust Minecraft chat
  client.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 21</title><link href="http://this-week-in-rust.org/blog/2013/10/28/this-week-in-rust-21/" rel="alternate"></link><updated>2013-10-28T16:20:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-10-28:blog/2013/10/28/this-week-in-rust-21/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust!&lt;/em&gt; This week marks the addition
of some more feature gates, removal of &lt;code&gt;std::io&lt;/code&gt;, and some feature proposals.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;47 PRs were merged this week, and we passed issue number 10000.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Most of the crypto in the stdlib &lt;a href="https://github.com/mozilla/rust/pull/9744"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::io&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9901"&gt;has been removed&lt;/a&gt;,
  with corresponding improvements in &lt;code&gt;std::rt::io&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;frame_address&lt;/code&gt; intrinsic &lt;a href="https://github.com/mozilla/rust/pull/10040"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt;-ptrs are &lt;a href="https://github.com/mozilla/rust/pull/9923"&gt;now feature-gated&lt;/a&gt;,
  reflecting the fact that they will exist in a very different form once they
  are finished.&lt;/li&gt;
&lt;li&gt;All of the logging that used &lt;code&gt;fmt&lt;/code&gt; (&lt;code&gt;debug!&lt;/code&gt; and so forth) &lt;a href="https://github.com/mozilla/rust/pull/10006"&gt;have been
  transitioned to &lt;code&gt;format!&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asm!&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10009"&gt;is also featured gated&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys::log_str&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9937"&gt;has moved&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The long-awaited addition of &lt;code&gt;mut&lt;/code&gt; in patterns &lt;a href="https://github.com/mozilla/rust/pull/10026"&gt;has finally
  happened&lt;/a&gt;. &lt;code&gt;let (mut x, y) = (1,
  2);&lt;/code&gt; works.&lt;/li&gt;
&lt;li&gt;The scheduler now uses &lt;a href="https://github.com/mozilla/rust/pull/10080"&gt;lock free data
  structures&lt;/a&gt;, which are supposed
  to perform much better.&lt;/li&gt;
&lt;li&gt;The homing code &lt;a href="https://github.com/mozilla/rust/pull/10070"&gt;now does less
  work&lt;/a&gt;, which does one third as
  many &lt;code&gt;write&lt;/code&gt;'s.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdout&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/10060"&gt;is now buffered&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/10054"&gt;non-libuv event loop&lt;/a&gt; has
  been added.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::rand&lt;/code&gt; has seen &lt;a href="https://github.com/mozilla/rust/pull/9810"&gt;more&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/10015"&gt;work&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9654"&gt;now supports arbitrary
  dependencies&lt;/a&gt;, such as C
  libraries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mut&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/9989"&gt;now allowed on self&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nested comments &lt;a href="https://github.com/mozilla/rust/pull/9936"&gt;are now
  allowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg&lt;/code&gt; will now [find crates in the current directory], so you can say
  &lt;code&gt;rustpkg build&lt;/code&gt; in a source dir and it will build in a workspace.&lt;/li&gt;
&lt;li&gt;Some new float intrinsics &lt;a href="https://github.com/mozilla/rust/pull/9986"&gt;have been
  exposed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;println!&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9979"&gt;allocates less&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Igor Bukanov&lt;/li&gt;
&lt;li&gt;Mark Rowe&lt;/li&gt;
&lt;li&gt;Michael Letterle&lt;/li&gt;
&lt;li&gt;reedlepee&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Announcements etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There will be a
  &lt;a href="http://www.meetup.com/Rust-Bay-Area/events/143439552/"&gt;meetup&lt;/a&gt; in the San
  Fransisco Mozilla office. Patrick Walton will be talking about sprocketnes.
  If you're in the area, you should definitely go!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hiho.io/rust-ci/"&gt;rust-ci&lt;/a&gt; has been created, which lets you have
  travis automatically rebuild and test your repo daily, to reduce
  language/library breakage.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/erickt/rust-mustache"&gt;rust-mustache&lt;/a&gt; and
  &lt;a href="https://github.com/erickt/rust-zmq"&gt;rust-zmq&lt;/a&gt; have been updated for master.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1pdrv6/short_talk_about_rust_at_scalaio_in_paris_october/"&gt;Short talk about Rust at Scala.IO in Paris (October
  25th)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1pe2lc/a_bit_of_functional_programming_in_rust_or_a/"&gt;A Bit of Functional Programming in Rust, or A Misguided First Look at Rust
  for ML
      Programmers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1p52tj/a_draft_proposal_for_single_inheritance_in_rust/"&gt;A draft proposal for single
  inheritance&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1p4vnk/iterators_yielding_mutable_references/"&gt;Iterators yielding mutable
  references&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1p4qeh/servo_transitions_from_libcss_to_a_new_css/"&gt;Servo transitions from libcss to a new CSS library written in
  Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1owhwi/on_stack_safety/"&gt;On stack
  safety&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 20</title><link href="http://this-week-in-rust.org/blog/2013/10/19/this-week-in-rust-20/" rel="alternate"></link><updated>2013-10-19T10:49:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-10-19:blog/2013/10/19/this-week-in-rust-20/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly summary of Rust's
progress and happenings in the community.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;48 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slices are now represented as &lt;a href="https://github.com/mozilla/rust/pull/9885"&gt;number of elements, not number of
  bytes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt!&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9919"&gt;completely
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some fields in &lt;code&gt;std::comm&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9935"&gt;have been made
  private&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::sys::refcount&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9922"&gt;has been
  moved&lt;/a&gt; to
  &lt;code&gt;std::managed::refcount&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/9896/files#diff-69196c6d2488bf8d5b3471084e854407L22"&gt;A bunch of
  functions&lt;/a&gt;
  have moved from &lt;code&gt;std::sys&lt;/code&gt; to &lt;code&gt;std::mem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;once fn&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/9863"&gt;now a feature gate&lt;/a&gt;
  rather than a &lt;code&gt;-Z&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Path&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9655"&gt;completely
  rewritten&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::flatpipes&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9886"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jemalloc&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9933"&gt;removed from the
  runtime&lt;/a&gt;. The &lt;a href="https://github.com/mozilla/rust/issues/9925"&gt;associated
  issue&lt;/a&gt; is quite scary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustdoc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9946"&gt;struct field
  visibility&lt;/a&gt; is now corrected (it
  stripped fields where it should not have).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustdoc&lt;/code&gt; also &lt;a href="https://github.com/mozilla/rust/pull/9941"&gt;uses the actual privacy
  rules&lt;/a&gt; to strip methods.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format!&lt;/code&gt; now gives &lt;a href="https://github.com/mozilla/rust/pull/9932"&gt;much better&lt;/a&gt;
  error messages for invalid format strings.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fmt::Default&lt;/code&gt; trait, used for default formatting with &lt;code&gt;format!&lt;/code&gt;, is
  &lt;a href="https://github.com/mozilla/rust/pull/9938"&gt;now documented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include_bin!&lt;/code&gt; has been optimized, and the &lt;code&gt;k-nucleotides&lt;/code&gt; benchmark now
  compiles &lt;a href="https://github.com/mozilla/rust/pull/9851"&gt;187x faster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Vectors now have &lt;a href="https://github.com/mozilla/rust/pull/9907"&gt;&lt;code&gt;starts_with&lt;/code&gt; and &lt;code&gt;ends_with&lt;/code&gt;
  methods&lt;/a&gt;, which take slices.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;abort&lt;/code&gt; intrinsic &lt;a href="https://github.com/mozilla/rust/pull/9860"&gt;has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Vectors now have a &lt;a href="https://github.com/mozilla/rust/pull/9608"&gt;&lt;code&gt;get_opt&lt;/code&gt;
  method&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New contributors&lt;/h2&gt;
&lt;p&gt;A new section for new contributors! The new contributors this week are (as
reported by git):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chris Sainty&lt;/li&gt;
&lt;li&gt;Eduard Burtescu&lt;/li&gt;
&lt;li&gt;Erik Lyon&lt;/li&gt;
&lt;li&gt;Harry Marr&lt;/li&gt;
&lt;li&gt;Sébastien Chauvel&lt;/li&gt;
&lt;li&gt;Vijay Korapaty&lt;/li&gt;
&lt;li&gt;Ziad Hatahet&lt;/li&gt;
&lt;li&gt;chitra&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-15"&gt;weekly
meeting&lt;/a&gt;
discussed removing rusti, changing the attribute syntax, destructors in
statics, and more multi-crate packages with rustpkg.&lt;/p&gt;
&lt;h1&gt;Announcements etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Rust (and Servo) are participating in the &lt;a href="https://groups.google.com/forum/#!topic/mozilla.dev.servo/7kX_E0FlfkA"&gt;GNOME Outreach Program for
  Women&lt;/a&gt;.
  A bunch of people have already come into IRC about it.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://exercism.io"&gt;http://exercism.io&lt;/a&gt; &lt;a href="https://github.com/kytrinyx/exercism.io/pull/866"&gt;is getting full Rust
  support&lt;/a&gt;. This is a very
  cool resource, and could help a lot getting newcomers acclimated.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-October/006034.html"&gt;Unified Function/method Call Syntax and further
  simplification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1osbq2/safe_manual_memory_management_in_cyclone_research/"&gt;Safe Memory Management in
  Cyclone&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opensourcebridge.org/sessions/970"&gt;Audio&lt;/a&gt; from Tim's talk in June is
  finally available!&lt;/li&gt;
&lt;li&gt;An
  &lt;a href="https://github.com/mozilla/rust/wiki/Operating-system-development"&gt;OSdev&lt;/a&gt;
  community has sprung up! The channel is &lt;code&gt;#rust-osdev&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1omw47/should_io_use_conditions/"&gt;Should I/O use
  conditions?&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1opo36/pointers_in_rust_a_guide/"&gt;Pointers in Rust: A
  Guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I am on a &lt;a href="http://cmr.github.io/blog/2013/10/14/rust-hiatus/"&gt;Rust hiatus&lt;/a&gt;,
  for the time being. TWiR will still be happening, as you are reading it
  right now.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thestinger/rust-core"&gt;rust-core&lt;/a&gt; - A stub standard
  library.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 19</title><link href="http://this-week-in-rust.org/blog/2013/10/12/this-week-in-rust-19/" rel="alternate"></link><updated>2013-10-12T22:53:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-10-12:blog/2013/10/12/this-week-in-rust-19/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. This week introduces raw
string literals, the removal of the &lt;code&gt;rust&lt;/code&gt; tool, feature gating, and the
privacy overhaul.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;Only 51 PRs were merged this week, though the ones that were were fairly
large.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visibility and privacy have been defined, and the new semantics are slightly
  incompatible with the old. The details are
  &lt;a href="https://github.com/mozilla/rust/pull/9735"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Feature gating has been &lt;a href="https://github.com/mozilla/rust/pull/9703"&gt;added to the
  compiler&lt;/a&gt;. This allows us to
  mask language features that we don't want to commit to for 1.0. The compiler
  will tell you when you are using an "experimental" feature. The current
  experimentals are glob imports, macro definitions, and struct-like variants
  in enums. This is an important step forward for 1.0 which,
  &lt;a href="http://www.reddit.com/r/rust/comments/1o90f9/fn_types_in_rust_take_3/ccq8qev"&gt;apparently&lt;/a&gt;,
  is right around the corner.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rust&lt;/code&gt; tool &lt;a href="https://github.com/mozilla/rust/pull/9785"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;'s API has been &lt;a href="https://github.com/mozilla/rust/pull/9359"&gt;massively
  simplified&lt;/a&gt;, and changed to be
  composable.&lt;/li&gt;
&lt;li&gt;Strings are &lt;a href="https://github.com/mozilla/rust/pull/9750"&gt;no longer allowed to be modified in safe
  code&lt;/a&gt;. Things like &lt;code&gt;let s =
  ~"abcdefg"; s[4] = 0x99;&lt;/code&gt; are now rejected. This is because it allows one to
  create invalid (non-UTF8) string values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::rc&lt;/code&gt; has &lt;a href="https://github.com/mozilla/rust/pull/9794"&gt;graduated to
  &lt;code&gt;std::rc&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::tempfile::mkdtemp&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9802"&gt;has been replaced with an RAII
  wrapper&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::rand&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9695"&gt;has been improved&lt;/a&gt;,
  but changes the public API of Rng a bit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntConvertible&lt;/code&gt; has been removed in favor of &lt;a href="https://github.com/mozilla/rust/pull/9250"&gt;&lt;code&gt;ToPrimitive&lt;/code&gt; and
  &lt;code&gt;FromPrimitive&lt;/code&gt;&lt;/a&gt;, which can be
  derived for enums, making interacting with C APIs substantially more
  &lt;a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/9674"&gt;Raw strings&lt;/a&gt; are now supported.
  The basic syntax is &lt;code&gt;r"Foo"&lt;/code&gt;, but also &lt;code&gt;r###"Foo"###&lt;/code&gt;, for arbitrary
  nesting of raw strings.&lt;/li&gt;
&lt;li&gt;rustpkg's remote fetching &lt;a href="https://github.com/mozilla/rust/pull/9741"&gt;is
  fixed&lt;/a&gt;, but &lt;a href="https://github.com/mozilla/rust/issues/9482"&gt;other
  &lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/issues/9781"&gt;problems&lt;/a&gt; prevent it from
  being fully usable right now.&lt;/li&gt;
&lt;li&gt;debuginfo namespace handling &lt;a href="https://github.com/mozilla/rust/pull/9658"&gt;has been
  unified&lt;/a&gt;, and marks the ability
  to build all of Rust (libstd, libextra, compiler and tools) with debuginfo,
  which is very awesome.&lt;/li&gt;
&lt;li&gt;Small structs &lt;a href="https://github.com/mozilla/rust/pull/9759"&gt;are immediate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When there are unbalanced delimiters, &lt;a href="https://github.com/mozilla/rust/pull/9756"&gt;the opening delimiters leading up to
  it&lt;/a&gt; are printed, avoiding the
  "Expected a }, saw EOF at line 9001" problem.&lt;/li&gt;
&lt;li&gt;libuv and jemalloc are only &lt;a href="https://github.com/mozilla/rust/pull/9772"&gt;built once, rather than once per
  stage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Macros &lt;a href="https://github.com/mozilla/rust/pull/9753"&gt;now take attributes&lt;/a&gt; and,
  in turn, can be documented.&lt;/li&gt;
&lt;li&gt;In the opposite direction, &lt;a href="https://github.com/mozilla/rust/pull/9783"&gt;macros can now expand to items with
  attributes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There were some &lt;a href="https://github.com/mozilla/rust/pull/9664"&gt;minor logging
  changes&lt;/a&gt;, the biggest result of
  which is that inlined functions won't be logged by the modules they're
  inlined into.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/9749"&gt;&lt;code&gt;std::rt::io::native&lt;/code&gt; has been
  implemented&lt;/a&gt;. The idea of this is
  to live in &lt;code&gt;std::io::native&lt;/code&gt; and to use the OS's native APIs rather than
  libuv, and also to not require the scheduler or any other runtime support.&lt;/li&gt;
&lt;li&gt;rustpkg &lt;a href="https://github.com/mozilla/rust/pull/9732"&gt;marks checked out repos as
  read-only&lt;/a&gt;, to prevent
  modifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-08"&gt;weekly
meeting&lt;/a&gt;
discussed some administrative things, the removal of crypto code, the removal
of the &lt;code&gt;rust&lt;/code&gt; tool, and functions.&lt;/p&gt;
&lt;h1&gt;Announcements etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1o35ns/fuse_userspace_library_in_rust/"&gt;rust-fuse&lt;/a&gt;
  - a FUSE userspace library in Rust. This is pure Rust, not using libfuse.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1o46cv/ears_a_simple_library_for_playing_sounds/"&gt;ears&lt;/a&gt;
  - a simple library for playing sounds.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pcmattman/rustic"&gt;rustic&lt;/a&gt; - another operating system
  project.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-October/005981.html"&gt;Refactoring the milestones on the issue
  tracker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2013/10/10/fn-types-in-rust/"&gt;Fn Types in Rust, Take
  3&lt;/a&gt;
  - another attempt at tackling the problems with closures.&lt;/li&gt;
&lt;li&gt;mcpherrin in &lt;code&gt;#rust&lt;/code&gt; says "Hello, everyone!"&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 18</title><link href="http://this-week-in-rust.org/blog/2013/10/06/this-week-in-rust-18/" rel="alternate"></link><updated>2013-10-06T18:25:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-10-06:blog/2013/10/06/this-week-in-rust-18/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;Only 63 PRs were merged this week. Currently in the queue is the massive
privacy change, the path rewrite, enum descriminant shrinking, a &lt;code&gt;rand&lt;/code&gt;
rework, a lock-free scheduler message queue, and libuv signal bindings.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9519"&gt;removed from the
  language&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9665"&gt;removed&lt;/a&gt;. The
  transition to &lt;code&gt;continue&lt;/code&gt; is complete.&lt;/li&gt;
&lt;li&gt;A macro ignoring tokens now &lt;a href="https://github.com/mozilla/rust/pull/9673"&gt;throws an
  error&lt;/a&gt; rather than silently
  ignoring it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntConvertible&lt;/code&gt; has been
  &lt;a href="https://github.com/mozilla/rust/pull/9250"&gt;replaced&lt;/a&gt; with &lt;code&gt;ToPrimitive&lt;/code&gt; and
  &lt;code&gt;FromPrimitive&lt;/code&gt;. This also heralds the ability to derive to/from int methods
  on enums.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Everything Else&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rustpkg&lt;/code&gt; can &lt;a href="https://github.com/mozilla/rust/pull/9741"&gt;fetch remote packages
  again&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of unsafe code surrounding logging &lt;a href="https://github.com/mozilla/rust/pull/9593"&gt;has been
  remove&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of work was done to make more things immediate. A
  &lt;a href="https://github.com/mozilla/rust/pull/9643"&gt;bugfix&lt;/a&gt;, &lt;a href="https://github.com/mozilla/rust/pull/9656"&gt;small
  tuples&lt;/a&gt;, &lt;a href="https://github.com/mozilla/rust/pull/9677"&gt;small
  enums&lt;/a&gt;, and &lt;a href="https://github.com/mozilla/rust/pull/9699"&gt;unit/C-like
  enums&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of work went into decreasing our memory usage. The massive spike at
  the beginning &lt;a href="https://github.com/mozilla/rust/pull/9612"&gt;has been fixed&lt;/a&gt;.
  The tcx (type context, holds the result of &lt;em&gt;all&lt;/em&gt; compiler analysis) is also
  free'd before translation now, reducing memory usage by a good &lt;a href="https://github.com/mozilla/rust/pull/9686"&gt;500+
  MB&lt;/a&gt;. Another cache during
  constant evaluation &lt;a href="https://github.com/mozilla/rust/pull/9722"&gt;reduces memory usage by
  200MB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We're now &lt;a href="https://github.com/mozilla/rust/pull/9662"&gt;bundling our
  dependencies&lt;/a&gt; on Windows, making
  it easier to bootstrap and to setup a working Rust environment.&lt;/li&gt;
&lt;li&gt;All of the really old obsolete syntax checkers &lt;a href="https://github.com/mozilla/rust/pull/9712"&gt;have been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Hyperlinking between crates is &lt;a href="https://github.com/mozilla/rust/pull/9691"&gt;now
  reimplemented&lt;/a&gt; in rustdoc.&lt;/li&gt;
&lt;li&gt;Gearing up for its removal, &lt;a href="https://github.com/mozilla/rust/pull/9599"&gt;all &lt;code&gt;fmt!&lt;/code&gt; usage in the compiler has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-10-01"&gt;weekly
meeting&lt;/a&gt;
discussed a bunch of proposed changes, including rustpkg submodules, removing
float (which has already happened), raw string literals (which have a patch
almost finished), and the changes to the Option API.&lt;/p&gt;
&lt;h1&gt;Announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jeaye/ncurses-rs"&gt;ncurses-rs&lt;/a&gt; - a safe wrapper that
  keeps the same ncurses interface you know and "love", but more rustic.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/wiki/The%20Rusticon"&gt;The Rusticon&lt;/a&gt; - A
  living glossary of Rust terms.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1nqzth/zeromq_helping_us_block_malicious_domains_in_real/"&gt;A production use of
  Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ntnvf/understanding_the_servo_strategy/"&gt;Understanding the Servo
  Strategy&lt;/a&gt;
  - The Servo presentation given at the various Mozilla Summits&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1nmarr/dynamic_typing_implemented_as_library_code/"&gt;Dynamic Typing implemented as a
  library&lt;/a&gt;
  - a pretty cool use of our reflection.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ni84a/running_rust_tests_on_travis_ci/"&gt;Running Rust Tests on Travis
  CI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ngqgr/rust_bindings_for_fuse_filesystem_in_userspace/"&gt;Rust bindings for
  FUSE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetups&lt;/h1&gt;
&lt;p&gt;Haven't had a meetup section in a long time, but two are forming!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Rust-Bay-Area/"&gt;Francisco Bay Area&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/rust-skane/"&gt;Rust Skåne (Lund, Sweden)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 17</title><link href="http://this-week-in-rust.org/blog/2013/09/30/this-week-in-rust-17/" rel="alternate"></link><updated>2013-09-30T13:11:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-09-30:blog/2013/09/30/this-week-in-rust-17/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;! This week saw the release of
0.8, the removal of &lt;code&gt;@fn&lt;/code&gt;, and a bunch of other changes. The tutorial has been
updated significantly, surrounding pointers and boxes, so you should re-read
those sections if you're still feeling shaky on when you should use which.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;There were 79 PRs merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf!&lt;/code&gt; and &lt;code&gt;printfln!&lt;/code&gt; have been
  &lt;a href="https://github.com/mozilla/rust/pull/9550"&gt;removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; is now a keyword, a &lt;a href="https://github.com/mozilla/rust/pull/9504"&gt;synonym for
  &lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;, preceeding &lt;code&gt;loop&lt;/code&gt;'s
  removal (https://github.com/mozilla/rust/issues/9467)&lt;/li&gt;
&lt;li&gt;Item visibility is &lt;a href="https://github.com/mozilla/rust/pull/9432"&gt;properly encoded in
  metadata&lt;/a&gt;, so code which used
  private items that may have worked before is now rejected.&lt;/li&gt;
&lt;li&gt;Char literals which should have been escaped &lt;a href="https://github.com/mozilla/rust/pull/9335"&gt;are now rejected when they
  aren't escaped&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;impl Foo for T;&lt;/code&gt; is now &lt;a href="https://github.com/mozilla/rust/pull/9336"&gt;disallowed&lt;/a&gt;.
  Use &lt;code&gt;impl Foo for T {}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@fn&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9310"&gt;removed from the
  language&lt;/a&gt;. Replace it with
  &lt;code&gt;@Trait&lt;/code&gt; objects, if you really need &lt;code&gt;@fn&lt;/code&gt; (you probably don't).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9301"&gt;no longer takes a crate
  map&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some more keywords have been
  &lt;a href="https://github.com/mozilla/rust/pull/9389"&gt;reserved&lt;/a&gt;: &lt;code&gt;alignof&lt;/code&gt;,
  &lt;code&gt;offsetof&lt;/code&gt;, and &lt;code&gt;sizeof&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Everything else&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A ton of documentation work was put in this week. The box section of the
  tutorial has been &lt;a href="https://github.com/mozilla/rust/pull/9589"&gt;rewritten&lt;/a&gt;,
  and there's a new &lt;a href="https://github.com/mozilla/rust/pull/9439"&gt;rustpkg
  tutorial&lt;/a&gt; too. The module
  tutorial saw the file section
  &lt;a href="https://github.com/mozilla/rust/pull/9398"&gt;extended&lt;/a&gt;. There was a bunch of
  module documentation updated/added too.&lt;/li&gt;
&lt;li&gt;rustdoc(_ng) also saw a lot of work. It &lt;a href="https://github.com/mozilla/rust/pull/9402"&gt;completely
  replaced&lt;/a&gt; the old rustdoc, as
  well as seeing a &lt;a href="https://github.com/mozilla/rust/pull/9577"&gt;lot&lt;/a&gt; of
  &lt;a href="https://github.com/mozilla/rust/pull/9475"&gt;fixes&lt;/a&gt;. Huge thanks to Alex
  Crichton for all the work with it!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::vec&lt;/code&gt; has seen some &lt;a href="https://github.com/mozilla/rust/pull/9583"&gt;nice
  changes&lt;/a&gt; to &lt;code&gt;connect_vec&lt;/code&gt; and
  &lt;code&gt;concat_vec&lt;/code&gt; (they were really awful before).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg test&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/9549"&gt;implemented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type_use&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9538"&gt;removed&lt;/a&gt;.
  This did some nasty things and LLVM's &lt;code&gt;mergefunc&lt;/code&gt; pass will do a better job
  of the same optimization (once it's enabled).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_c_str&lt;/code&gt; is now &lt;a href="https://github.com/mozilla/rust/pull/9352"&gt;optimized&lt;/a&gt;
  to be allocation-free for short vectors.&lt;/li&gt;
&lt;li&gt;The logging system, when using the new formatting code (so &lt;code&gt;debug2&lt;/code&gt; etc) is
  &lt;a href="https://github.com/mozilla/rust/pull/9261"&gt;allocation-free&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::rand&lt;/code&gt; has seen some
  &lt;a href="https://github.com/mozilla/rust/pull/9362"&gt;cleanup&lt;/a&gt;, in preparation for its
  overhaul.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-24"&gt;weekly
meeting&lt;/a&gt;
discussed a bunch of things, the main things of importance to me being:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt; -&amp;gt; &lt;code&gt;continue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowing nested comments&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kenz-gelsoft/wxRust"&gt;wxRust&lt;/a&gt; - A binding to the
  wxWidgets toolkit.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1neu74/the_start_of_a_sinatra_clone/"&gt;widmann&lt;/a&gt;
  -  A Sinatra clone&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1nab2s/rustdev_opengl_glrs_updated_with_command_line/"&gt;gl-rs&lt;/a&gt;
  has been updated to generate only bindings for a select version / set of
  extensions.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1n8y5b/debugging_rust_in_eclipse/"&gt;Debugging Rust in
  Eclipse&lt;/a&gt;
  - Michael Woerister's final GSoC post. He did really great work this
  summer!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/steveklabnik/rust_for_rubyists"&gt;Rust for Rubyists&lt;/a&gt; has
  been open sourced!&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://code.google.com/p/claymore-game/"&gt;Claymore&lt;/a&gt; project has just
  come to my attention. Apparently it has been going on for quite some time.
  There are some screenshots at &lt;a href="http://claymore-dev.blogspot.com/"&gt;http://claymore-dev.blogspot.com/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JeremyLetang/rustenstein3D/"&gt;rustenstein3d&lt;/a&gt; - a
  Wolfenstein3D engine&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eevee/clio"&gt;clio&lt;/a&gt;, a roguelike. This one also slipped
  under my radar for a while.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thestinger/rust-gmp"&gt;rust-gmp&lt;/a&gt; has been updated for
  0.8/master.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmr/rustdoc_ng"&gt;rustdoc_ng&lt;/a&gt;, being merged into mainline,
  has concluded as a project.&lt;/li&gt;
&lt;li&gt;And, of course, the &lt;a href="http://www.reddit.com/r/rust/comments/1n7q8v/08_released/"&gt;0.8
  release&lt;/a&gt;
  discussion on reddit.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="rust"></category><category term="programming"></category></entry><entry><title>This Week in Rust 16</title><link href="http://this-week-in-rust.org/blog/2013/09/23/this-week-in-rust-16/" rel="alternate"></link><updated>2013-09-23T13:08:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-09-23:blog/2013/09/23/this-week-in-rust-16/</id><summary type="html">&lt;p&gt;Welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. We're gearing up for a 0.8
release, tentatively planned for Thursday. Additionally, a huge welcome of
Alex Crichton to the Rust team! He's been doing some great work, it's
wonderful to have another full-time Rust dev.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;There were 86 PRs merged this week.&lt;/p&gt;
&lt;h2&gt;rustdoc_ng&lt;/h2&gt;
&lt;p&gt;rustdoc_ng was merged into mainline and enabled as the new rustdoc, in time
for 0.8. This makes me incredibly happy, as it marks the conclusion of my
quest to a better rustdoc. Not to say that rustdoc is finished or perfect,
but it's already much better than the old rustdoc. My sincere thanks go to
Jordi Boggiano (Seldaek), who worked unceasingly to create a beautiful,
usable frontend, and to Meret Vollenweider (meretv) for donating her amazing
design skills. Also thanks to Huon Wilson (dbaupp) for moral support and
creating the awesome DocFolder interface that passes over the documentation
use. And, of course, to Alex Crichton, who pushed these past few days to port
the static site generator to Rust and to integrate it into the build system.&lt;/p&gt;
&lt;p&gt;The new docs have replaced the old docs. You can view them &lt;a href="http://static.rust-lang.org/doc/master/std/index.html"&gt;on the Rust
website&lt;/a&gt;. Still to-do
is proper cross-crate doc hyperlinking. To run it on your own crate, build a
recent Rust and do &lt;code&gt;rustdoc html path/to/your/crate.rs&lt;/code&gt;. It will eventually be
integrated into &lt;code&gt;rustpkg&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extra::par&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9380"&gt;removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some unsound functional struct updates (FSU, &lt;code&gt;{a: 5, ..b}&lt;/code&gt;) &lt;a href="https://github.com/mozilla/rust/pull/9350"&gt;are now
  disallowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cfg debug&lt;/code&gt; is no longer required. If you want to disable debug logging,
  use &lt;a href="https://github.com/mozilla/rust/pull/9278"&gt;&lt;code&gt;--cfg ndebug&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The various uses of &lt;code&gt;NaN&lt;/code&gt; are now &lt;a href="https://github.com/mozilla/rust/pull/9321"&gt;lowercased to
  &lt;code&gt;nan&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::util::unreachable&lt;/code&gt; has been removed in factor of the
  &lt;a href="https://github.com/mozilla/rust/pull/9320"&gt;&lt;code&gt;unreachable!&lt;/code&gt;&lt;/a&gt; macro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::future&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9285"&gt;cleaned
  up&lt;/a&gt; a bit, including some method
  shuffling/renames.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::getopts&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/9267"&gt;cleaned
  up&lt;/a&gt; as well, with most free
  functions now being methods.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;from_str&lt;/code&gt; methods in the numeric modules have been
  &lt;a href="https://github.com/mozilla/rust/pull/9275"&gt;removed&lt;/a&gt; in favor of the FromStr
  trait and the &lt;code&gt;from_str&lt;/code&gt; free function in the prelude. Same for
  &lt;a href="https://github.com/mozilla/rust/pull/9209"&gt;&lt;code&gt;from_str_radix&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Drop&lt;/code&gt; trait now uses &lt;a href="https://github.com/mozilla/rust/pull/9244"&gt;&lt;code&gt;&amp;amp;mut
  self&lt;/code&gt;&lt;/a&gt;, as part of the transition
  to by-value drops.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::json&lt;/code&gt; uses a &lt;a href="https://github.com/mozilla/rust/pull/9231"&gt;different
  encoding&lt;/a&gt; when encoding/decoding
  enums, so any Rust-generated JSON before this patch will now be rejected by
  the decoder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;debuginfo now works for &lt;a href="https://github.com/mozilla/rust/pull/9168"&gt;recursive
  types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can now &lt;a href="https://github.com/mozilla/rust/pull/9213"&gt;pass parameters&lt;/a&gt; to
  the generated test with &lt;code&gt;rust test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extern fn&lt;/code&gt;s from external crates now use the &lt;a href="https://github.com/mozilla/rust/pull/9196"&gt;declared
  ABI&lt;/a&gt;, rather than assuming cdecl.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CString&lt;/code&gt; has gained an
  &lt;a href="https://github.com/mozilla/rust/pull/9220"&gt;&lt;code&gt;as_str&lt;/code&gt;&lt;/a&gt; method.&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/9108"&gt;overflow bugs&lt;/a&gt; in &lt;code&gt;vec&lt;/code&gt; and
  &lt;code&gt;str&lt;/code&gt; have been fixed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statics&lt;/code&gt; are now &lt;a href="https://github.com/mozilla/rust/pull/9130"&gt;properly
  inlined&lt;/a&gt; cross-crate.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;bytes!&lt;/code&gt; macro's error reporting has been &lt;a href="https://github.com/mozilla/rust/pull/9245"&gt;tightened
  up&lt;/a&gt; to make it more obvious where
  the error is.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg init&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9236"&gt;has been added&lt;/a&gt;,
  to create a new workspace.&lt;/li&gt;
&lt;li&gt;File IO in newrt has been &lt;a href="https://github.com/mozilla/rust/pull/9235"&gt;massively
  reworked&lt;/a&gt; and is much more
  complete than the oldrt.&lt;/li&gt;
&lt;li&gt;The exact meaning of "unsafety" &lt;a href="https://github.com/mozilla/rust/pull/9258"&gt;is now
  documented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\0&lt;/code&gt; escapes in strings &lt;a href="https://github.com/mozilla/rust/pull/9248"&gt;is now
  supported&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rustpkg&lt;/code&gt; now thinks in terms of crates, not packages, to you can now have
  &lt;a href="https://github.com/mozilla/rust/pull/9263"&gt;multiple crates in a single
  package&lt;/a&gt; and have things work
  correctly.&lt;/li&gt;
&lt;li&gt;newrt has &lt;a href="https://github.com/mozilla/rust/pull/9260/files"&gt;pipes and process
  support&lt;/a&gt; now.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format!&lt;/code&gt; now allows &lt;a href="https://github.com/mozilla/rust/pull/9299"&gt;trailing
  commas&lt;/a&gt; in its arguments.&lt;/li&gt;
&lt;li&gt;The lexer now throws &lt;a href="https://github.com/mozilla/rust/pull/9308"&gt;vastly better
  errors&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Weekly Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-17"&gt;weekly
meeting&lt;/a&gt;
discussed quite a bit, most interesting to me was the crypto discussion,
putting &lt;code&gt;macro_rules!&lt;/code&gt; behind an experimental flag, and the default arguments
discussion.&lt;/p&gt;
&lt;h1&gt;Project announcements etc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/williamw520/rustymem"&gt;rustymem&lt;/a&gt; - a pure-rust memcached
  library.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1myesy/where_to_learn_more_about_rusts_concurrency_model/"&gt;"Where to learn more about Rust's concurrency
  model?"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.github.com/jeaye/q3/master/pics/016_1_animated_skele.png"&gt;q3 now has skeletal
  animation!&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="programming"></category><category term="rust"></category></entry><entry><title>This Week in Rust 15</title><link href="http://this-week-in-rust.org/blog/2013/09/15/this-week-in-rust-15/" rel="alternate"></link><updated>2013-09-15T17:59:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-09-15:blog/2013/09/15/this-week-in-rust-15/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. We're gearing up
for the 0.8 release in 2-3 weeks. It looks like it's going to be a really
solid release. I'll write another &lt;code&gt;State of Rust&lt;/code&gt;, hopefully before it is
released.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;68 PRs were merged this week.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::iterator&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9065"&gt;has been
  renamed&lt;/a&gt; to &lt;code&gt;std::iter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;std::num::Primitive&lt;/code&gt; trait is &lt;a href="https://github.com/mozilla/rust/pull/9051"&gt;now
  constrained&lt;/a&gt; by the &lt;code&gt;Clone&lt;/code&gt; and
  &lt;code&gt;DeepClone&lt;/code&gt; traits, as well as
  &lt;a href="https://github.com/mozilla/rust/pull/9182"&gt;&lt;code&gt;Orderable&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/9062"&gt;more free functions&lt;/a&gt; have
  been removed from &lt;code&gt;std::vec&lt;/code&gt;. &lt;code&gt;unzip&lt;/code&gt; now takes an iterator, a
  &lt;code&gt;Permutations&lt;/code&gt; iterator has been added, and some rarely-used, obsolete,
  functions were removed.&lt;/li&gt;
&lt;li&gt;A bunch of changes to &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9115"&gt;were
  made&lt;/a&gt;. Specifically, &lt;code&gt;chain&lt;/code&gt; was
  changed to &lt;code&gt;and_then&lt;/code&gt; and &lt;code&gt;unwrap_or_default&lt;/code&gt; to &lt;code&gt;unwrap_or&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;rustpkg &lt;a href="https://github.com/mozilla/rust/pull/9151"&gt;builds into
  target-specific&lt;/a&gt; subdirectories
  now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Additions and fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;debuginfo now has &lt;a href="https://github.com/mozilla/rust/pull/9097"&gt;namespace
  support&lt;/a&gt;. Looking at all the
  various PRs Michael has opened over the summer, it seems DWARF is a very
  flexible, nice debuginfo format, but gdb and LLVM don't support it very
  well.&lt;/li&gt;
&lt;li&gt;Correct &lt;code&gt;range_step&lt;/code&gt; and &lt;code&gt;range_step_inclusive&lt;/code&gt; iterators &lt;a href="https://github.com/mozilla/rust/pull/9199"&gt;have been
  added&lt;/a&gt;. They are correct in cases
  of overflow, and are generic.&lt;/li&gt;
&lt;li&gt;A handy &lt;code&gt;sleep&lt;/code&gt; function &lt;a href="https://github.com/mozilla/rust/pull/9191"&gt;has been
  added&lt;/a&gt; to newrt.&lt;/li&gt;
&lt;li&gt;File IO in newrt &lt;a href="https://github.com/mozilla/rust/pull/9165"&gt;works on
  windows&lt;/a&gt; now.&lt;/li&gt;
&lt;li&gt;A bug where nested items in a default method weren't compiled &lt;a href="https://github.com/mozilla/rust/pull/9162"&gt;has been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A rendezvous concurrency structure, much like Ada's, &lt;a href="https://github.com/mozilla/rust/pull/8908"&gt;has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Buffered IO wrappers &lt;a href="https://github.com/mozilla/rust/pull/9091"&gt;have been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;nmatsakis landed a PR that &lt;a href="https://github.com/mozilla/rust/pull/9088"&gt;closed 7 issues at
  once&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustpkg now uses &lt;code&gt;extra::workcache&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/9034"&gt;to prevent recompilation of
  already-compiled crates&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-09-10"&gt;Tuesday
meeting&lt;/a&gt;
discussed the github commit policy, implicit copyability, patterns, and the
fate of &lt;code&gt;&amp;amp;const&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Other things&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Eric Reed (ecr)'s intern presentation: &lt;a href="https://air.mozilla.org/intern-presentations-reed/"&gt;An I/O System for
  Rust&lt;/a&gt;. Unfortunately,
  the audio cuts out.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/singingboyo/evict"&gt;Evict-BT&lt;/a&gt;, a git-integrated issue
  tracker.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/wiki/Computer-Graphics-and-Game-Development"&gt;Computer Graphics and Game
  Development&lt;/a&gt;.
  Also note the &lt;code&gt;#rust-gamedev&lt;/code&gt; channel.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FlaPer87/rust-for-real"&gt;rust-for-real&lt;/a&gt;, a collection of
  Rust examples to aid in learning. Needs more examples!&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 14</title><link href="http://this-week-in-rust.org/blog/2013/09/07/this-week-in-rust-14/" rel="alternate"></link><updated>2013-09-07T18:30:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-09-07:blog/2013/09/07/this-week-in-rust-14/</id><summary type="html">&lt;p&gt;Welcome to another &lt;em&gt;This Week in Rust&lt;/em&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;65 pull requests were merged this week, and bors has had some idle time when
there wasn't anything approved in the queue.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::os::glob&lt;/code&gt; has been replaced with a &lt;a href="https://github.com/mozilla/rust/pull/8914"&gt;pure Rust
  version&lt;/a&gt;, for cross-platform and
  compatability reasons.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::str::from_bytes&lt;/code&gt; has been
  &lt;a href="https://github.com/mozilla/rust/pull/8997"&gt;renamed&lt;/a&gt; to
  &lt;code&gt;std::str::from_utf8&lt;/code&gt;, to be explicit about what it accepts.&lt;/li&gt;
&lt;li&gt;Casting to bool with &lt;code&gt;as&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/8980"&gt;no longer
  allowed&lt;/a&gt;, and surrogate
  characters are no longer allowed in strings.&lt;/li&gt;
&lt;li&gt;char is &lt;a href="https://github.com/mozilla/rust/pull/8974"&gt;no longer&lt;/a&gt; treated as an
  integer type (meaning it can't be casted to/from them), which removes the
  ability for safe code to create invalid characters.&lt;/li&gt;
&lt;li&gt;Opening a listening socket and actually listening on it &lt;a href="https://github.com/mozilla/rust/pull/8954"&gt;have been
  split&lt;/a&gt;. If you're jiggy with the
  jive, listen and accept are now separate operations. (&lt;em&gt;ed&lt;/em&gt;: this used to say
  bind and accept wereseparate; thanks to ecr for the correction.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Additions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; var hygiene has &lt;a href="https://github.com/mozilla/rust/pull/9026"&gt;landed&lt;/a&gt;.
  I'm sure this has cool implications, but I don't really know what they are.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://github.com/mozilla/rust/pull/8903"&gt;&lt;code&gt;export_name&lt;/code&gt; attribute&lt;/a&gt; has
  been added to control what symbol name something is exported as (similar to
  &lt;code&gt;no_mangle&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;ExactSize&lt;/code&gt; trait &lt;a href="https://github.com/mozilla/rust/pull/8884"&gt;has been
  added&lt;/a&gt; to mark an iterator that
  always accurately reports its size in the &lt;code&gt;size_hint&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ToStr&lt;/code&gt; has been &lt;a href="https://github.com/mozilla/rust/pull/8960"&gt;implemented&lt;/a&gt;
  for char and Ascii.&lt;/li&gt;
&lt;li&gt;Safe accessors of &lt;code&gt;MutexArc&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/8966"&gt;have been
  implemented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A bytes iterator &lt;a href="https://github.com/mozilla/rust/pull/8935"&gt;has been added&lt;/a&gt;
  for newrt readers.&lt;/li&gt;
&lt;li&gt;Stream is &lt;a href="https://github.com/mozilla/rust/pull/8984"&gt;automatically
  implemented&lt;/a&gt; for types which
  implement Reader and Writer from newrt.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;unreachable&lt;/code&gt; macro &lt;a href="https://github.com/mozilla/rust/pull/8992"&gt;has been
  added&lt;/a&gt; for better error reporting
  than a function could do.&lt;/li&gt;
&lt;li&gt;newrt &lt;a href="https://github.com/mozilla/rust/pull/9000"&gt;can now do&lt;/a&gt; simple DNS
  resolution.&lt;/li&gt;
&lt;li&gt;strptime/strftime &lt;a href="https://github.com/mozilla/rust/pull/9016"&gt;now support&lt;/a&gt;
  fractional seconds, out to tenths of a nanosecond.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Changes etc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Name mangling &lt;a href="https://github.com/mozilla/rust/pull/8875"&gt;has been
  improved&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust_log.cpp&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/8880"&gt;has been
  converted&lt;/a&gt; into pure Rust.&lt;/li&gt;
&lt;li&gt;Debuginfo &lt;a href="https://github.com/mozilla/rust/pull/8855"&gt;now does closure
  capture&lt;/a&gt; and very large structs.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/8947"&gt;bunch&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/8927"&gt;of&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/8928"&gt;repr&lt;/a&gt; improvements landed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;There was no meteting this week listed on the wiki or that I saw.&lt;/p&gt;
&lt;h1&gt;Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/glycerine/rust-nanomsg"&gt;rust-nanomsg&lt;/a&gt; - bindings to the
  nanomsg library.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 13</title><link href="http://this-week-in-rust.org/blog/2013/08/31/this-week-in-rust-13/" rel="alternate"></link><updated>2013-08-31T19:10:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-08-31:blog/2013/08/31/this-week-in-rust-13/</id><summary type="html">&lt;p&gt;Hello and welcome to the lucky 13th issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. Graydon has
stepped down as project lead. It seems to be a bit ambiguous whether he'll
still be working on the project. Brian (brson) will be taking over as lead.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8857"&gt;Some functions have been removed from
  &lt;code&gt;std::str&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8823"&gt;The unit test framework now uses RUST_TEST_TASKS instead of
  RUST_THREADS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8718"&gt;&lt;code&gt;typeof&lt;/code&gt; is now a reserved
  keyword&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8807"&gt;&lt;code&gt;offset_inbounds&lt;/code&gt; has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8797"&gt;Some edge cases with writing to a borrowed &lt;code&gt;&amp;amp;mut&lt;/code&gt; have been
  closed&lt;/a&gt;, rejecting more incorrect
  programs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8772"&gt;Option no longer implements
  Add&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8700"&gt;Some pass handling stuff has
  changed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8744"&gt;Enum descriminants are now always
  u64&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8750"&gt;String byte conversion functions which return an Option have been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8764"&gt;The main tutorial links to the condition and error handling
  tutorials&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8438"&gt;A trait for default initialization has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8757"&gt;debuginfo tests have been enabled on Windows, and debuginfo generation
  works on Windows!&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8777"&gt;A better, more complete module tutorial has been
  written&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8771"&gt;Some fixes to repr (the code that powers &lt;code&gt;%?&lt;/code&gt; in fmt) have been
  made&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8697"&gt;&lt;code&gt;rustpkg build&lt;/code&gt; with no arguments now behaves a bit
  differently&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8645"&gt;&lt;code&gt;std::run&lt;/code&gt; has been reimplemented on top of
  libuv&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8838"&gt;Frame pointer elimination has been
  re-disabled&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8840"&gt;LLVM has been updated, giving us mingw-w64
  support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8819"&gt;Unit tests have been enabled on
  Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8802"&gt;Some compile speedups landed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-27"&gt;Tuesday
meeting&lt;/a&gt;
discussed rustpkg's timeline, extern fns, and LLVM asserts.&lt;/p&gt;
&lt;h1&gt;Projects, discussion, and announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Jeaye says that anyone having problems with the q3 repo should re-clone. If
  that doesn't fix it, pop into IRC: #q3 on irc.freenode.net.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tim.dreamwidth.org/1820526.html"&gt;"Making rustpkg work"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1lai9u/nphysics_a_2d_and_3d_rigid_body_physics_engine/"&gt;"nphysics: a 2d and 3d rigid body physics engine for
  Rust"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1l8hd4/first_university_computer_science_class_taught/"&gt;"First university computer science class taught in
  Rust"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 12</title><link href="http://this-week-in-rust.org/blog/2013/08/25/this-week-in-rust-12/" rel="alternate"></link><updated>2013-08-25T12:54:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-08-25:blog/2013/08/25/this-week-in-rust-12/</id><summary type="html">&lt;p&gt;Hello and welcome to the 12th issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. Sorry for the
brevity, though most weeks are probably going to be like this, as I've started
uni and have much less free time than in the summer.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in master?&lt;/h1&gt;
&lt;p&gt;A whopping 71 pull requests were merged this week, and issue churn remains
negative at -32.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8560"&gt;&lt;strong&gt;&lt;code&gt;yield&lt;/code&gt; is now reserved as a
  keyword&lt;/strong&gt;&lt;/a&gt;, with the hope of
  maybe using it for generators.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8666"&gt;The type of &lt;code&gt;extern fn foo&lt;/code&gt; is now &lt;code&gt;extern "C" fn&lt;/code&gt;, rather than
  &lt;code&gt;*u8&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8679"&gt;Some free functions in &lt;code&gt;extra::json&lt;/code&gt; were turned into associated functions
  on the Json enum&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8558"&gt;&lt;code&gt;XorShiftRng::new()&lt;/code&gt; now uses a random
  seed&lt;/a&gt;. This is only breaking if
  you were depending on that constant seed, which you shouldn't have.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Library changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8710"&gt;&lt;code&gt;extra::getopts&lt;/code&gt; aligns based on codepoint count and not byte
  count&lt;/a&gt;, as a step towards more
  correct unicode handling.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8637"&gt;&lt;code&gt;fprintf&lt;/code&gt; has been added, as well as some &lt;code&gt;ifmt&lt;/code&gt;
  cleanup&lt;/a&gt;.
  &lt;a href="https://github.com/mozilla/rust/pull/8740"&gt;The new runtime has seen a lot of
  optimization&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8655"&gt;File IO has been added to the new
  runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8616"&gt;Some parsing errors related to ports have been fixed in
  &lt;code&gt;extra::url&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8590"&gt;CharIterator has seen some optimization too, with reverse iterators being
  much closer in performance to forward iterators
  now&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8602"&gt;sysconf names have been added for
  android&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8631"&gt;The new runtime now has threadsafe
  IO&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8566"&gt;A callback optimization has sped up message passing benchmarks to the tune
  of 40%&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8584"&gt;jemalloc is back&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Compiler changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8736"&gt;gnueabihf actually uses hard floats
  now&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8695"&gt;Frame pointer elimination is no longer
  disabled&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8684"&gt;Some debuginfo fixes landed&lt;/a&gt;.
  Supposedly, libstd can now be compiled with &lt;code&gt;-Z debug-info&lt;/code&gt;. Yay!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8596"&gt;Stack unwinding on 32-bit windows now
  works&lt;/a&gt;. This is a major step
  forward for Windows support, I'm very excited to see it land.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8659"&gt;A handful of default method bugs have been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8562"&gt;Inheriting from kinds now sorta
  works&lt;/a&gt;, you can do &lt;code&gt;trait Foo:
  Freeze&lt;/code&gt;, for example.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8519"&gt;Supertrait methods can now be used from a trait
  object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The rest of pnkfelix's visitor trait rewrite series landed.
  &lt;a href="https://github.com/mozilla/rust/pull/8539"&gt;2&lt;/a&gt;,
  &lt;a href="https://github.com/mozilla/rust/pull/8619"&gt;3&lt;/a&gt;,
  &lt;a href="https://github.com/mozilla/rust/pull/8623"&gt;4&lt;/a&gt;, and
  &lt;a href="https://github.com/mozilla/rust/pull/8638"&gt;5&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8535"&gt;Foreign function wrappers have been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8328"&gt;LLVM has been updated&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Docs etc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8563"&gt;A new condition tutorial has been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8725"&gt;Some docs for trait bounds have been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-20"&gt;Tuesday
meeting&lt;/a&gt;
discussed cycle time and how to fix it.&lt;/p&gt;
&lt;h1&gt;Projects and discussion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bjz/gl-rs"&gt;gl-rs&lt;/a&gt; is now ready for use, since the
  foreign function wrappers have been removed!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/omasanori/msgpack-rust"&gt;msgpack-rust&lt;/a&gt; has been created.
  It ties into &lt;code&gt;extra::serialize&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jensnockert/dueboot"&gt;A template for Arduino Due
  projects&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1kxz7y/benchmarks_round_two_parallel_go_rust_d_scala_and/"&gt;Parallel cross-language level generation
  benchmarks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ktjrw/a_week_with_mozillas_rust/"&gt;A Week with
  Rust&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 11</title><link href="http://this-week-in-rust.org/blog/2013/08/19/this-week-in-rust-11/" rel="alternate"></link><updated>2013-08-19T00:33:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-08-19:blog/2013/08/19/this-week-in-rust-11/</id><summary type="html">&lt;p&gt;Hello and welcome to the 11th edition of &lt;code&gt;This Week in Rust&lt;/code&gt;! I'm starting uni
this week, so if you notice I'm not quite as omnipresent and omniprescient as
usual, that'd be why. &lt;strong&gt;Please&lt;/strong&gt; &lt;a href="mailto:corey@octayn.net"&gt;send me an email&lt;/a&gt;
if you would like your pull request, project, or blog post mentioned. I would
hate to overlook something cool or important.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;The Mozilla Intern talks happened this past week or so. The ones I know about
relating to Rust are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/intern-presentation-sullivan/"&gt;Default Methods in Rust
  (sully)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/ben-blum-from-the-research-team-presents-types-of-types-in-rust/"&gt;Types of Types in Rust
  (bblum)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/2013-intern-todd/"&gt;A Work-stealing Runtime for Rust
  (toddaaro)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/eston-schweickart-from-the-research-team-presents-a-forest-of-quadtrees-the-graphics-of-servo/"&gt;A Forest of Quadtrees: The Graphics of
  Servo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/2013-intern-presentations-august-13/"&gt;Layout in Servo: Parallel and Rustic Tree Traversals
  (eatkinson)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/2013-intern-kuehn/"&gt;Architecting Servo: Pipelines and Parallelism
  (tikue)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Congratulations to them all. The interns did a ton of great work over the
summer.&lt;/p&gt;
&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;There were only 46 PRs merged this week. I don't quite know why that number is
so low this week. It certainly wasn't for lack of PRs: the queue has been
constantly backlogged. Issue churn was -26, yay!&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8526"&gt;Some functions in Result and Either were replaced to work with external
  iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8423"&gt;The &lt;code&gt;priv&lt;/code&gt; and &lt;code&gt;pub&lt;/code&gt; visibility modifiers are now forbidden on contexts
  where they have no meaning&lt;/a&gt;. For
  example, marking a struct field &lt;code&gt;pub&lt;/code&gt;, or a module &lt;code&gt;priv&lt;/code&gt;. The compiler
  errors for this are quite informative, and the conversion is purely
  mechanical.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8532"&gt;&lt;code&gt;to_c_str&lt;/code&gt; now raises a condition if the string contains interior &lt;code&gt;NUL&lt;/code&gt;s,
  as it is impossible to create a valid C string with interior
  &lt;code&gt;NUL&lt;/code&gt;s&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Library improvments, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8446"&gt;&lt;code&gt;ifmt!&lt;/code&gt;, the new formatter, has been
  finished&lt;/a&gt;. Yay!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8453"&gt;&lt;code&gt;extra::stats::write_boxplot&lt;/code&gt; now works with negative or zero sample
  values&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8452"&gt;Some missing pieces in libstd have been filled
  in&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8491"&gt;A &lt;code&gt;sample&lt;/code&gt; method has been added to &lt;code&gt;RngUtil&lt;/code&gt;, for resevior
  sampling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Compiler improvements, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8527"&gt;A ton of work was done on a new
  visitor&lt;/a&gt;. This is the first of a
  series of five.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8483"&gt;Vector repeat exprs (&lt;code&gt;[0, ..16]&lt;/code&gt;) are now allowed in
  statics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8477"&gt;A hint has been added for incorrect use of static
  methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8497"&gt;Trait object coercion to &lt;code&gt;&amp;amp;Trait&lt;/code&gt; has been fixed to handle freezing and
  reborrowing more correctly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8329"&gt;Debuginfo of lexical scopes and variable shadowing has been massively
  improved&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8410"&gt;A &lt;code&gt;--target-cpu&lt;/code&gt; flag has been added to select the target CPU, rather than
  always using "generic"&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8455"&gt;Support for owned and borrowed trait objects has been made better
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8421"&gt;An &lt;code&gt;address_insignificant&lt;/code&gt; attribute has been
  added&lt;/a&gt;. LLVM will do merging of
  statics marked with that attribute.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8408"&gt;Intrinsics for checked overflow on add, sub, and mul have been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tools, documentation, etc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8469"&gt;The tutorial was translated into
  Japanese&lt;/a&gt;. I think this is the
  first translation of anything, so it's a pretty big milestone I think.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meeting&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-13"&gt;Tuesday
meeting&lt;/a&gt;
discussed turning jemalloc back on, default arguments, and method invocation
ordering. It also discussed the new IO code and stage0 stdtest.&lt;/p&gt;
&lt;h1&gt;Notable discourse&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bluishcoder.co.nz/2013/08/15/phantom_types_in_rust.html"&gt;Phantom Types in
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1k6hua/rustdev_rfc_runtimeless_libstd/"&gt;RFC: Runtimeless
  libstd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;External projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/erickt/rust-elasticsearch"&gt;Bindings to elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/erickt/rust-zmq"&gt;zeromq bindings have been updated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/huonw/spellck"&gt;A spellchecker for Rust code, written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1kd8ah/rustencoding_character_encoding_support_for_rust/"&gt;rust-encoding: character encoding support for
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1kctjn/my_first_rust_program_vocabulary_trainer/"&gt;A simple vocabulary
  trainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1k7mfn/rustdev_rustdoc_ng_95_done/"&gt;&lt;code&gt;rustdoc_ng&lt;/code&gt;: 95%
  done&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1k5kqx/some_pages_in_servo_as_of_20130810/"&gt;Some pages as rendered by
  Servo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jfager/d3cap"&gt;d3cap: a libpcap-based network activity
  visualizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sfackler/rust-postgres"&gt;postgres bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/luqmana/6264106"&gt;RemoteJoy: a program for remotely viewing the screen of your PlayStation
  Portable&lt;/a&gt;.
  (&lt;a href="http://i.imgur.com/9Kda25J.jpg"&gt;screnshot&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bjz/gl-rs"&gt;The new OpenGL loader is working, pending the function pointer
  fix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 10</title><link href="http://this-week-in-rust.org/blog/2013/08/10/this-week-in-rust-10/" rel="alternate"></link><updated>2013-08-10T21:39:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-08-10:blog/2013/08/10/this-week-in-rust-10/</id><summary type="html">&lt;p&gt;Hello and welcome to the tenth issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. This week marks
the enabling of the new runtime written entirely in Rust. A lot happens every
week, so I'm going to start omitting PRs that I deem of lesser importance.
This process is entirely arbitrary, don't feel hurt if I exclude your PR :).&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on &lt;code&gt;master&lt;/code&gt;?&lt;/h1&gt;
&lt;p&gt;Issue churn was -12 this week. A total of 70 PRs were merged.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mozilla/rust/pull/8358"&gt;The new runtime has been enabled by
default&lt;/a&gt;. This is the culmination
of a lot of work by brson and the rt interns (toddaaro, bblum, and ecr being
the ones I know of). It's written entirely in Rust, and lives in &lt;code&gt;std::rt&lt;/code&gt;.
Additionally, the &lt;a href="https://github.com/mozilla/rust/pull/8387"&gt;old C++ runtime has been
removed&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8296"&gt;&lt;strong&gt;Trailing nulls have been removed from all string
  types.&lt;/strong&gt;&lt;/a&gt;. This will break your
  FFI code in subtle and mysterious ways, if you didn't explicitly use the
  &lt;code&gt;as_c_str&lt;/code&gt; methods. FFI code using the new &lt;code&gt;str::c_str&lt;/code&gt; code will be more
  robust, as it forbids interior nulls, and ensures that a trailing null
  always exists. The replacement for &lt;code&gt;str.as_c_str&lt;/code&gt; is
  &lt;code&gt;str.to_c_str().as_slice()&lt;/code&gt;, from what I can tell.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cmr/rust/commit/e99eff172a11816f335153147dd0800fc4877bee"&gt;The &lt;code&gt;priv&lt;/code&gt; keyword is no longer allowed where it has no
  meaning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8265"&gt;&lt;code&gt;iter&lt;/code&gt; and &lt;code&gt;iter_err&lt;/code&gt; in Result have been replaced with external
  iterators&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8288"&gt;The &lt;code&gt;get&lt;/code&gt; method of &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;Either&lt;/code&gt;, and &lt;code&gt;Result&lt;/code&gt; has been removed in
  favor of &lt;code&gt;unwrap&lt;/code&gt;&lt;/a&gt;. They both did
  the same thing, which was useless duplication.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8218"&gt;&lt;code&gt;std::gc&lt;/code&gt; and &lt;code&gt;std::stackwalk&lt;/code&gt;&lt;/a&gt;
  have been removed, as they are obsolete with the new runtime.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8264"&gt;The transitionary &lt;code&gt;foreach&lt;/code&gt; has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable library additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8357"&gt;Some redundant &lt;code&gt;Ord&lt;/code&gt; methods were removed from
  impls&lt;/a&gt; where the default methods
  sufficed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8336"&gt;FromStr for IpAddr and
  SocketAddr&lt;/a&gt; is implemented.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8356"&gt;Work steealing is implemented for the newrt
  scheduler&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8320"&gt;A frequency counting function has been added to
  &lt;code&gt;extra::stat&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8323"&gt;Saturating math&lt;/a&gt; is now
  implemented. I knew this as "clamping": it is arithmetic that clamps results
  into a specific interval.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8287"&gt;A hexadecimal encoding module&lt;/a&gt;
  has been added to &lt;code&gt;extra&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8054"&gt;&lt;code&gt;EnumSet&lt;/code&gt; has been moved into &lt;code&gt;extra&lt;/code&gt;, it previously existed as a utility
  in &lt;code&gt;rustc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8237"&gt;&lt;code&gt;str::is_utf8&lt;/code&gt; has seen some more
  optimization&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable compiler additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8245"&gt;Initial support for the new formatting
  code&lt;/a&gt; has been added.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8279"&gt;A &lt;code&gt;no_main&lt;/code&gt; attribute has been
  added&lt;/a&gt;, to omit the Rust entry
  point entirely.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8220"&gt;Vanilla Linux on ARM&lt;/a&gt; is now
  supported.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8262"&gt;Extra copies of rvalues &lt;/a&gt; are no
  longer omitted.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8361"&gt;Some cross-arch bugs with node hash
  metadata&lt;/a&gt; have been fixed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8350"&gt;A soundness bug in struct matching has been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8362"&gt;An &lt;code&gt;option_env!&lt;/code&gt; syntax extension has been
  added&lt;/a&gt; for compile-time inclusion
  of environment variables that may or may not be present.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8176"&gt;&lt;code&gt;extern mod a = "b/c/d"&lt;/code&gt; has been
  implemented&lt;/a&gt;, paving the way for
  more rustpkg awesomeness.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-08-06"&gt;Tuesday
meeting&lt;/a&gt; seems
to have been a bit under-attended. SIMD, ARM, trailing nulls, order of &lt;code&gt;mod&lt;/code&gt;
and &lt;code&gt;use&lt;/code&gt;, and the condition system were all briefly discussed..&lt;/p&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/2013-intern-todd/"&gt;"A Work-stealing Runtime for
  Rust"&lt;/a&gt;, toddaaro's intern
  presentation.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/08/10/iterator-blocks-features.html"&gt;"Iterator Blocks for Rust - Feature
  Survey"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;External projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1k43px/a_simple_jit_vm_written_using_rust_and_libjit/"&gt;Galvanized: a simple JIT VM written in Rust, using
  LibJIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jeaye/q3/commit/f4c82ce9c276327cababdb6650038e2c1d62f2d5"&gt;Q3 has a new
  logger&lt;/a&gt;.
  I think it's nicer than the built-in one!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stepancheg/rust-protobuf"&gt;rust-protobuf: a protobuf implementation generating rust code, written in
  rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/metajack/status/364571230331875331/photo/1"&gt;Servo: almost passing acid1
  !&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 9</title><link href="http://this-week-in-rust.org/blog/2013/08/04/this-week-in-rust-9/" rel="alternate"></link><updated>2013-08-04T18:40:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-08-04:blog/2013/08/04/this-week-in-rust-9/</id><summary type="html">&lt;p&gt;Hello and welcome to the ninth issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. This week brings
the new &lt;code&gt;for&lt;/code&gt; loop, which is very exciting, as well as a bunch of runtime
changes and cleanup.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on &lt;code&gt;master&lt;/code&gt;?&lt;/h1&gt;
&lt;p&gt;Issue churn was +4 this week. A total of 63 PRs were merged (again).&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The &lt;code&gt;for&lt;/code&gt; loop now uses external iterators.&lt;/strong&gt; This means any code written
  to use the old internal iterator protocol will no longer work. See the
  &lt;a href="http://static.rust-lang.org/doc/tutorial-container.html"&gt;iterator tutorial&lt;/a&gt;
  for more information on how to use it. Related pull requests:
  &lt;a href="https://github.com/mozilla/rust/pull/8141"&gt;#8141&lt;/a&gt;,
  &lt;a href="https://github.com/mozilla/rust/pull/8184"&gt;#8184&lt;/a&gt;,
  &lt;a href="https://github.com/mozilla/rust/pull/8190"&gt;#8190&lt;/a&gt;,
  &lt;a href="https://github.com/mozilla/rust/pull/8244"&gt;#8244&lt;/a&gt;. A few uses now
  require &lt;code&gt;do&lt;/code&gt; rather than &lt;code&gt;for&lt;/code&gt; because they cannot/have not been
  implemented in terms of external iterators.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/8235"&gt;no longer allowed&lt;/a&gt;
  for functions in &lt;code&gt;extern&lt;/code&gt; blocks: they are all unsafe.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/mozilla/rust/pull/8175"&gt;&lt;code&gt;extra::dbg&lt;/code&gt; module&lt;/a&gt; has
  been removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint::range&lt;/code&gt; and all its friends have been replaced with an &lt;a href="https://github.com/mozilla/rust/pull/8216"&gt;external
  iterator&lt;/a&gt;, that is in the
  prelude. Code like the following now works:
  &lt;code&gt;for x in range(0, 10) {
      println(x.to_str());
  }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The pipes compiler (the thing driving &lt;code&gt;proto!&lt;/code&gt;) &lt;a href="https://github.com/mozilla/rust/pull/8170"&gt;has been
  removed&lt;/a&gt;, as it saw limited
  use, was very old, and was a significant maintenance burden.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PortSet&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/8164"&gt;has been removed&lt;/a&gt; from
  std, as the new scheduler does not support it.&lt;/li&gt;
&lt;li&gt;A bunch of old task APIs &lt;a href="https://github.com/mozilla/rust/pull/8139"&gt;have been
  removed&lt;/a&gt;, aslo in preparation for
  the new schduler.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_utf8&lt;/code&gt; now &lt;a href="https://github.com/mozilla/rust/pull/8133"&gt;rejects overlong
  encodings&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The iterator adaptors &lt;a href="https://github.com/mozilla/rust/pull/8090"&gt;no longer have the Iterator
  suffix&lt;/a&gt;, same with &lt;a href="https://github.com/mozilla/rust/pull/8095"&gt;str and vec
  iterators&lt;/a&gt; as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;newrt changes&lt;/h2&gt;
&lt;p&gt;A bunch of newrt things landed this week, so it gets its own section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/8234"&gt;bugs preventing the arc and sync tests from
  passing&lt;/a&gt; have been fixed.&lt;/li&gt;
&lt;li&gt;The new scheduler now supports &lt;a href="https://github.com/mozilla/rust/pull/8221"&gt;the &lt;code&gt;SingleThreaded&lt;/code&gt; spawn
  mode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of work with task killing &lt;a href="https://github.com/mozilla/rust/pull/8195"&gt;has
  landed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/8116"&gt;major TLS changes&lt;/a&gt; also
  landed.&lt;/li&gt;
&lt;li&gt;Tasks can &lt;a href="https://github.com/mozilla/rust/pull/8158"&gt;now be named&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8008"&gt;&lt;code&gt;select&lt;/code&gt; on newrt pipes&lt;/a&gt; has
  been implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable library additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map::contains_key&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/8246"&gt;now a default
  method&lt;/a&gt; implemented in terms of
  &lt;code&gt;Map::find&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;dynamic_lib&lt;/code&gt; segfault &lt;a href="https://github.com/mozilla/rust/pull/8219"&gt;has been
  fixed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A keyed &lt;code&gt;HashMap&lt;/code&gt; constructor is &lt;a href="https://github.com/mozilla/rust/pull/8186"&gt;now
  exposed&lt;/a&gt; for runtimeless programs
  that want to use it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Str&lt;/code&gt; trait now has an &lt;a href="https://github.com/mozilla/rust/pull/8204"&gt;&lt;code&gt;into_owned&lt;/code&gt;
  method&lt;/a&gt; to avoid copies when you
  already have a &lt;code&gt;~str&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of &lt;a href="https://github.com/mozilla/rust/pull/8174"&gt;SHA1 and SHA2
  cleanup/optimizations&lt;/a&gt; landed. I
  hear that the speed is almost optimal, only a few cycles/byte short of
  Intel's optimized implementation.&lt;/li&gt;
&lt;li&gt;Errno coverage has been &lt;a href="https://github.com/mozilla/rust/pull/8193"&gt;significantly expanded for
  Linux&lt;/a&gt;. I added all of the ones
  that were missing, at least the ones that were present on my system.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert!()&lt;/code&gt; without a message &lt;a href="https://github.com/mozilla/rust/pull/8150"&gt;now does less
  allocation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;'\' is &lt;a href="https://github.com/mozilla/rust/pull/8138"&gt;no longer treated as a path
  separater&lt;/a&gt; on POSIX system.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getopt&lt;/code&gt;'s &lt;code&gt;opts_str&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/8135"&gt;has been corrected to use more than just the first
  element of the vector&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some more methods &lt;a href="https://github.com/mozilla/rust/pull/8115"&gt;were added&lt;/a&gt; in
  &lt;code&gt;std::num&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An iterator over the offsets of each character in a string &lt;a href="https://github.com/mozilla/rust/pull/8082"&gt;was
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of &lt;code&gt;RandomAccessIterator&lt;/code&gt; implementations &lt;a href="https://github.com/mozilla/rust/pull/8120"&gt;have been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clone&lt;/code&gt; and &lt;code&gt;DeepClone&lt;/code&gt; are &lt;a href="https://github.com/mozilla/rust/pull/8109"&gt;now
  implemented&lt;/a&gt; for &lt;code&gt;extern "Rust"
  fn&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable compiler additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;cfg!&lt;/code&gt; syntax extension &lt;a href="https://github.com/mozilla/rust/pull/8188"&gt;has been
  added&lt;/a&gt; for conditionally running
  code based on crate configuration, similar to what &lt;code&gt;#[cfg]&lt;/code&gt; does for
  conditional compilation. It expands into a true/false constant, so LLVM
  should optimize out the dead branches.&lt;/li&gt;
&lt;li&gt;Some more codegen tests &lt;a href="https://github.com/mozilla/rust/pull/8165"&gt;have been
  added&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/8162"&gt;has been removed as a
  keyword&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Static struct initializers &lt;a href="https://github.com/mozilla/rust/pull/8091"&gt;can now contain
  &lt;code&gt;..base&lt;/code&gt;&lt;/a&gt; for functional update.&lt;/li&gt;
&lt;li&gt;Take glue &lt;a href="https://github.com/mozilla/rust/pull/8146"&gt;has been unified&lt;/a&gt; for
  unique pointer type.&lt;/li&gt;
&lt;li&gt;Pointer arithmetic is &lt;a href="https://github.com/mozilla/rust/pull/8121"&gt;now implemented with
  GEP&lt;/a&gt; rather than casting to int
  and back to the pointer.&lt;/li&gt;
&lt;li&gt;Some more AST types &lt;a href="https://github.com/mozilla/rust/pull/8107"&gt;were
  renamed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cross-crate conditions &lt;a href="https://github.com/mozilla/rust/pull/8185"&gt;now
  work&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documentation, tools, and other stuff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LLVM assertions &lt;a href="https://github.com/mozilla/rust/pull/8147"&gt;can now be
  disabled&lt;/a&gt; with a configure
  option.&lt;/li&gt;
&lt;li&gt;Benchmarking can &lt;a href="https://github.com/mozilla/rust/pull/8111"&gt;now be
  disabled&lt;/a&gt; by passing &lt;code&gt;NO_BENCH=1&lt;/code&gt;
  to make.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NO_REBUILD&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/8110"&gt;no longer requires a
  re-boostrap&lt;/a&gt;, which should make
  debug cycles on libstd much shorter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vec&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7223"&gt;now has module
  documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;rustpkg &lt;a href="https://github.com/mozilla/rust/pull/8032"&gt;now handles tags&lt;/a&gt;, and
  not just version numbers, in the package ID.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-30"&gt;Tuesday
meeting&lt;/a&gt; this
week was quite meaty. I'm not going to try to summarize it, as it seems no
real decisions were made.&lt;/p&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/08/03/visibility-scopes.html"&gt;Visibility scopes in Rust Debug
  Info&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://air.mozilla.org/2013-intern-kuehn/"&gt;Architecting Servo: Pipelines and
  Parallelism&lt;/a&gt;, a talk by Tim
  Kuehn.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1jo431/runtimeless_sprocketnes/"&gt;Runtimeless
  sprocketnes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1joy7f/porting_machine_learning_algorithms_to_rust/"&gt;Porting machine learning algorithms to
  Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/005039.html"&gt;RFC: Overloadable dereference
  operator&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;External projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SiegeLord/RustGnuplot"&gt;RustGnuplot&lt;/a&gt; was updated to
  latest Rust.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/stepancheg/rust-protobuf"&gt;protobuf implementation&lt;/a&gt; has
  been started.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/linuxfood/rustsqlite"&gt;rustsqlite&lt;/a&gt; has
  been updated to latest Rust.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/veddan/rust-htmlescape"&gt;library for HTML escaping&lt;/a&gt; has
  been created.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/bjz/noise-rs"&gt;library for procedurally generating
  noise&lt;/a&gt; has been created.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/MarkJr94/rust-keccak"&gt;pure-Rust implementation of
  Keccak&lt;/a&gt; has been created.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/erickt/rust-zmq"&gt;rust-zmq&lt;/a&gt; has been updated to latest
  Rust, as well as cleaner error/constant interface.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Jeaye/q3"&gt;q3&lt;/a&gt; now does multithreaded rendering.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Last Week in Rust 8</title><link href="http://this-week-in-rust.org/blog/2013/07/29/last-week-in-rust-8/" rel="alternate"></link><updated>2013-07-29T06:55:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-07-29:blog/2013/07/29/last-week-in-rust-8/</id><summary type="html">&lt;p&gt;Hello and welcome to the eighth issue of &lt;em&gt;This Week in Rust&lt;/em&gt;. Due to me being
busy and forgetful over the weekend, this is a special issue, &lt;em&gt;Last Week in
Rust&lt;/em&gt;.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on &lt;code&gt;master&lt;/code&gt;?&lt;/h1&gt;
&lt;p&gt;Issue churn continues to be negative, -15 this week. A total of 63 PRs were
merged.&lt;/p&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;p&gt;There were impressively few breaking changes last week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You now need to pass &lt;code&gt;--cfg debug&lt;/code&gt; to &lt;code&gt;rustc&lt;/code&gt; to emit debug logging.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7926"&gt;&lt;strong&gt;&lt;code&gt;mod.rs&lt;/code&gt; is now "blessed".&lt;/strong&gt;&lt;/a&gt;.
  When loading &lt;code&gt;mod foo;&lt;/code&gt;, rustc will now look for &lt;code&gt;foo.rs&lt;/code&gt;, then
  &lt;code&gt;foo/mod.rs&lt;/code&gt;, and will generate an error when both are present.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7996"&gt;A bunch of &lt;code&gt;str&lt;/code&gt; functions&lt;/a&gt; were
  renamed or shuffled around to be more consistent.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7934"&gt;&lt;code&gt;SmallIntSet&lt;/code&gt; was removed&lt;/a&gt; in
  favor for the more efficient, equivalent &lt;code&gt;BitvSet&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7703"&gt;&lt;code&gt;Bitv&lt;/code&gt; and &lt;code&gt;Bitvset&lt;/code&gt; have switched to external
  iterators&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7883"&gt;&lt;code&gt;extra::net&lt;/code&gt; and a bunch of other obsolete
  features&lt;/a&gt; have been removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable library additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Various &lt;a href="https://github.com/mozilla/rust/pull/8040"&gt;TCP/UDP additions&lt;/a&gt; have
  been made in the new rt.&lt;/li&gt;
&lt;li&gt;Some more &lt;a href="https://github.com/mozilla/rust/pull/8039"&gt;atomic operations&lt;/a&gt;
  have been added.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7931"&gt;&lt;code&gt;chain_mut_ref&lt;/code&gt; method&lt;/a&gt; was
  added to &lt;code&gt;Option&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7982"&gt;Random access iterators&lt;/a&gt; have
  been implemented.&lt;/li&gt;
&lt;li&gt;Some missing &lt;a href="https://github.com/mozilla/rust/pull/7993"&gt;memory orderings on atomic
  types&lt;/a&gt; have been added.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7885"&gt;workcache has seen a bunch of
  attention&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7944"&gt;DList has seen some more cleanup
  too&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7916"&gt;Timers have been added to the new
  rt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7943"&gt;Vectors now implement &lt;code&gt;slice_from&lt;/code&gt; and
  &lt;code&gt;slice_to&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable compiler additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8045"&gt;debuginfo for destructured locals and function
  args&lt;/a&gt; is now implemented.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7986"&gt;Raw representations are now
  consolidated&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8041"&gt;Impossible branches on
  constants&lt;/a&gt; are now omitted.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7924"&gt;It is now possible to link against crates with
  &lt;code&gt;#[no_std]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8029"&gt;There is now a warning when matching against
  NaN&lt;/a&gt;, since it is impossible to
  match against NaN (NaN != NaN).&lt;/li&gt;
&lt;li&gt;A lot of &lt;a href="https://github.com/mozilla/rust/pull/8015"&gt;default method and trait inheritance
  bugs&lt;/a&gt; have been fixed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8000"&gt;&lt;code&gt;uint&lt;/code&gt; enum discriminants are now
  allowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/mozilla/rust/pull/7958"&gt;section placement of static and fn items is now
  configurable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://github.com/mozilla/rust/pull/7848"&gt;trans naming modernization has
  occured&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some unnecessary branches and blocks &lt;a href="https://github.com/mozilla/rust/pull/7941"&gt;have been
  removed&lt;/a&gt;, resulting in a 10%
  speedup of unoptimized rustc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documentation, tools, and other stuff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7912"&gt;Some benchmarks&lt;/a&gt;, and &lt;a href="https://github.com/mozilla/rust/pull/7980"&gt;some more
  benchmarks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Crnobog has &lt;a href="https://github.com/mozilla/rust/pull/8001"&gt;fixed&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/7979"&gt;some&lt;/a&gt; Windows testsuite issues.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7820"&gt;&lt;code&gt;Makefile&lt;/code&gt; dependencies&lt;/a&gt; have
  been fixed. &lt;code&gt;rustc&lt;/code&gt; will never be invoked without its dependencies being
  built.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8031"&gt;&lt;code&gt;rust-mode&lt;/code&gt; has been rewritten&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/8020"&gt;There are some build system changes surrounding the &lt;code&gt;--cfg debug&lt;/code&gt;
  changes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-23"&gt;Tuesday
meeting&lt;/a&gt; was
quite productive. A quick summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graydon wants to investigate using the Memory Pool System as the Rust GC,
  rather than a bespoke one. The &lt;a href="http://www.ravenbrook.com/project/mps/"&gt;MPS&lt;/a&gt; is
  a very mature and robust memory management library.&lt;/li&gt;
&lt;li&gt;The buildbots now collect and report some metrics as JSON. Take a poke in
  &lt;code&gt;http://static.rust-lang.org/build-metrics/&amp;lt;git-sha1&amp;gt;/&amp;lt;builder&amp;gt;/&amp;lt;slave&amp;gt;/&amp;lt;metricsfile&amp;gt;.json&lt;/code&gt;
  if you're interested.&lt;/li&gt;
&lt;li&gt;pcwalton proposes allowing &lt;code&gt;Self&lt;/code&gt; in impls, like in trait definitions.&lt;/li&gt;
&lt;li&gt;There was some discussion of destructors taking &lt;code&gt;self&lt;/code&gt; by value.&lt;/li&gt;
&lt;li&gt;There was a proposal to remove &lt;code&gt;*mut&lt;/code&gt;, but it can be useful. There was no
  consensus.&lt;/li&gt;
&lt;li&gt;There was also some discussion on closures and mutable captures. I don't
  really have enough context to understand the conversation, something to do
  with "thunks".&lt;/li&gt;
&lt;li&gt;Removing &lt;code&gt;&amp;amp;const&lt;/code&gt; was discussed as well. The "plan is that we add a lint
  flag but document it as a reserved word", as it doesn't really seem to be
  useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/07/26/Iterator-Blocks.html"&gt;Iterator Blocks for
  Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1j5vbn/rustdev_rfc_removing_t/"&gt;RFC: Removing
  &lt;code&gt;*T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/dherman/rust-low-level-programming-without-the-segfaults"&gt;dherman's OSCON
  slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://careers.mozilla.org/en-US/position/oKiEXfwn"&gt;Mozilla is hiring a Rust research
  engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.mongodb.org/post/56426792420/introducing-the-mongodb-driver-for-the-rust-programming"&gt;An alpha release of the MongoDB
  Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://togototo.wordpress.com/2013/07/23/benchmarking-level-generation-go-rust-haskell-and-d/"&gt;A fairly useless benchmark of random number
  generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bjz/color-rs"&gt;color-rs: A library that provides types and conversions for working with
  various color formats.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Aatch/grease-bench"&gt;grease-bench: a runtimeless
  benchmarker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dobkeratops/rustfind"&gt;rustfind, a "jump to definition"
  tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Florob/RustyXML"&gt;RustyXML, a pure-Rust XML parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 7</title><link href="http://this-week-in-rust.org/blog/2013/07/21/this-week-in-rust-7/" rel="alternate"></link><updated>2013-07-21T09:36:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-07-21:blog/2013/07/21/this-week-in-rust-7/</id><summary type="html">&lt;p&gt;Hello and welcome to the seventh issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly
overview of Rust and its community. Things are calming down quite a bit, in
that nothing extraordinarily exciting is happening. Lots of great work is
being done everywhere, and good progress is being made in both bugfixes and
cleanup. It has been a good week!&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;Issue churn this week was -15. A total of 59 PRs were merged.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/mozilla/rust/pull/7684"&gt;The semantics of &lt;code&gt;range_rev&lt;/code&gt; have
  changed&lt;/a&gt;. This will break your
  code without warning.&lt;/strong&gt; It is now, to use &lt;a href="https://en.wikipedia.org/wiki/Interval_%28mathematics%29#Notations_for_intervals"&gt;interval
  notation&lt;/a&gt;,
  &lt;code&gt;(hi, lo]&lt;/code&gt; rather than &lt;code&gt;[hi, lo)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pub extern&lt;/code&gt; and &lt;code&gt;priv extern&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7896"&gt;have been
  removed&lt;/a&gt; from the language. This
  matches the previous similar change to &lt;code&gt;impl&lt;/code&gt;. Place the visibility
  qualifier (&lt;code&gt;pub&lt;/code&gt;/&lt;code&gt;priv&lt;/code&gt;) on each item in the &lt;code&gt;extern&lt;/code&gt; block instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;T&lt;/code&gt; (besides &lt;code&gt;&amp;amp;'static T&lt;/code&gt;) is &lt;a href="https://github.com/mozilla/rust/pull/7894"&gt;no longer allowed in
  &lt;code&gt;@T&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ThreadPerCore&lt;/code&gt; spawn mode &lt;a href="https://github.com/mozilla/rust/pull/7856"&gt;has been
  removed&lt;/a&gt;, as it doesn't make
  sense with the new scheduler.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;consume&lt;/code&gt; methods of the hash containers &lt;a href="https://github.com/mozilla/rust/pull/7833"&gt;has been replaced with an
  external iterator&lt;/a&gt;. The method
  name is the same, though.&lt;/li&gt;
&lt;li&gt;Moved values can &lt;a href="https://github.com/mozilla/rust/pull/7849"&gt;no longer be captured
  twice&lt;/a&gt;. This was a blatant
  soundness issue.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;swap_unwrap&lt;/code&gt; method of Option has been &lt;a href="https://github.com/mozilla/rust/pull/7831"&gt;renamed to
  &lt;code&gt;take_unwrap&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug!&lt;/code&gt; statements &lt;a href="https://github.com/mozilla/rust/pull/7822"&gt;generate no
  code&lt;/a&gt; unless you pass &lt;code&gt;--cfg
  debug&lt;/code&gt; to &lt;code&gt;rustc&lt;/code&gt;. This should help keep code size down and make your
  programs a (tiny bit) faster. Now you don't have to feel bad about having
  &lt;code&gt;debug!&lt;/code&gt; in hot code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;mutate_values&lt;/code&gt; method of HashMap &lt;a href="https://github.com/mozilla/rust/pull/7815"&gt;has been
  removed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable library additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;An iterator adaptor was added that &lt;a href="https://github.com/mozilla/rust/pull/7882"&gt;endlessly repeats the iterator it is
  called on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generated test runners &lt;a href="https://github.com/mozilla/rust/pull/7840"&gt;now have a
  &lt;code&gt;-h&lt;/code&gt;/&lt;code&gt;--help&lt;/code&gt;&lt;/a&gt; option.&lt;/li&gt;
&lt;li&gt;Metric capturing + racheting &lt;a href="https://github.com/mozilla/rust/pull/7829"&gt;has been
  added&lt;/a&gt; for benchmarks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local_data&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7841"&gt;now has a
  &lt;code&gt;get_mut&lt;/code&gt;&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::semver&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7726"&gt;has been updated to SemVer
  2.0.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Consuming iterators &lt;a href="https://github.com/mozilla/rust/pull/7806"&gt;have been
  added&lt;/a&gt; for the hash structures.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::ringbuf&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7808"&gt;now implements
  DoubleEndedIterator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Eq&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7799"&gt;now has a default implementation of
  &lt;code&gt;ne&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extra::term&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7716"&gt;now knows how to handle more
  attributes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;More containers &lt;a href="https://github.com/mozilla/rust/pull/7788"&gt;implement
  FromIter&lt;/a&gt;. This means you can use
  &lt;code&gt;.collect()&lt;/code&gt; to gather the elements from an iterator into those containers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7858"&gt;Task killing, failure, and exit code
  propagation&lt;/a&gt; in the new runtime
  has been implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable compiler additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syntax::attr&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7902"&gt;has been
  modernized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7710"&gt;Tons of debuginfo work&lt;/a&gt; from mw
  this week!&lt;/li&gt;
&lt;li&gt;Trait data structures &lt;a href="https://github.com/mozilla/rust/pull/7886"&gt;have been cleaned
  up&lt;/a&gt;, as well as a default method
  fix.&lt;/li&gt;
&lt;li&gt;Intrinsics &lt;a href="https://github.com/mozilla/rust/pull/7851"&gt;now have much better
  codegen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;no_implicit_prelude&lt;/code&gt; attribute &lt;a href="https://github.com/mozilla/rust/pull/7844"&gt;has been
  added&lt;/a&gt;, which prevents prelude
  injection in the module heirarchy starting at the item which that attribute
  is added to.&lt;/li&gt;
&lt;li&gt;C-style enum variants are &lt;a href="https://github.com/mozilla/rust/pull/7827"&gt;now
  allowed&lt;/a&gt; in &lt;code&gt;[T, ..n]&lt;/code&gt;
  expressions.&lt;/li&gt;
&lt;li&gt;All language items are &lt;a href="https://github.com/mozilla/rust/pull/7828"&gt;now
  optional&lt;/a&gt;. The compiler emits an
  error if a language item is used but not provided.&lt;/li&gt;
&lt;li&gt;The removal of &lt;code&gt;spanned&amp;lt;T&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/mozilla/rust/pull/7826"&gt;has
  begun&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Headers &lt;a href="https://github.com/mozilla/rust/pull/7816"&gt;have been removed&lt;/a&gt; for
  &lt;code&gt;~str&lt;/code&gt; and &lt;code&gt;~[T]&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is unmanaged.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documentation, tools, and other stuff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rustpkg &lt;a href="https://github.com/mozilla/rust/pull/7419"&gt;now works when you don't give it a package
  ID&lt;/a&gt;. It builds/installs/cleans
  the package in the current directory, &lt;em&gt;iff&lt;/em&gt; the current directory is in a
  rustpkg workspace.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--quiet&lt;/code&gt; is &lt;a href="https://github.com/mozilla/rust/pull/7847"&gt;no longer passed&lt;/a&gt;
  to git during submodule operations, so you can see the progress of the huge
  LLVM download.&lt;/li&gt;
&lt;li&gt;Documentation of the &lt;a href="https://github.com/mozilla/rust/pull/7823"&gt;lint-controlling
  attributes&lt;/a&gt; was added.&lt;/li&gt;
&lt;li&gt;rustpkg &lt;a href="https://github.com/mozilla/rust/pull/7681"&gt;now handles cloning from local git
  repos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The GtkSourceView highlighting file &lt;a href="https://github.com/mozilla/rust/pull/7795"&gt;was
  improved&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-16"&gt;Tuesday
meeting&lt;/a&gt;
discussed nothing at all of importance.&lt;/p&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ibd48/proofofconcept_pure_rust_malloc_implementation/"&gt;A pure-Rust memory allocator
  (malloc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/07/12/Status-Update-4.html"&gt;mw's fourth weekly
  update&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/07/20/Status-Update-5.html"&gt;mw's fifth weekly
  update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1imeac/guaranteeing_memory_safety_in_rust_niko_matsakis/"&gt;Discussion and slides from Niko's presentation at the Northeastern
  University Programming Language
  Seminar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/4829"&gt;A nightly Ubuntu
  PPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1igvye/vision_for_rust_simd/"&gt;SIMD
  discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004841.html"&gt;Rust on bare metal
  ARM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oscon.com/oscon2013/public/schedule/detail/28741"&gt;dherman's OSCON
  presentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 6</title><link href="http://this-week-in-rust.org/blog/2013/07/13/this-week-in-rust-6/" rel="alternate"></link><updated>2013-07-13T16:07:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-07-13:blog/2013/07/13/this-week-in-rust-6/</id><summary type="html">&lt;p&gt;Hello and welcome to the sixth issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly overview
of Rust and its community.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;Issue churn this week was -17! A total of 63 PRs were merged this week, twice
as many as last week. Not bad!&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://github.com/mozilla/rust/pull/7677"&gt;task local storage (TLS)
  API&lt;/a&gt; was cleaned up (there's
  still &lt;a href="https://github.com/mozilla/rust/pull/7751"&gt;one PR&lt;/a&gt; in the queue that
  finishes it up).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7652"&gt;DList was modernized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7704"&gt;&lt;code&gt;extra::json&lt;/code&gt; now uses &lt;code&gt;Iterator&amp;lt;char&amp;gt;&lt;/code&gt; rather than a
  &lt;code&gt;@Reader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7117"&gt;Various free-standing functions in f32 etc were
  removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7262"&gt;ref bindings in irrefutable patterns has been tightened
  up&lt;/a&gt;. This potentially fixes &lt;em&gt;and
  breaks&lt;/em&gt; code. It's breaking because the compiler now rejects incorrect
  programs that it did not before.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7612"&gt;str no longer encodes invalid
  utf-8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7629"&gt;&lt;code&gt;extra::rope&lt;/code&gt; was removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7594"&gt;&lt;code&gt;extra::net_ip&lt;/code&gt; and so on were
  removed&lt;/a&gt;. They were redundant
  names for &lt;code&gt;extra::net::ip&lt;/code&gt; and such&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7570"&gt;&lt;code&gt;Iterator::size_hint&lt;/code&gt;'s lower bound is no longer an
  Option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable compiler additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7763"&gt;Unnecessary basic blocks were
  removed&lt;/a&gt;. This makes for much
  easier to read unoptimized IR.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7734"&gt;Use of &lt;code&gt;*int&lt;/code&gt;/&lt;code&gt;*uint&lt;/code&gt; is now properly
  warned&lt;/a&gt; in FFI functions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7725"&gt;More default method fixes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7717"&gt;needless copy&lt;/a&gt; was removed
  from immediate values (I'm pretty sure LLVM optimized it away when
  optimizations were on, not positive).&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7706"&gt;lint for overqualified names&lt;/a&gt;
  was added.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7705"&gt;SIMD arithmetic&lt;/a&gt; was
  implemented.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7688"&gt;graph abstraction and CFG&lt;/a&gt; was
  introduced, to unify how the various pieces of the compiler use graphs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7455"&gt;The maximum lifetime of stack
  closures&lt;/a&gt; is now constrained. Not
  quite sure what that means, but it fixes a segfault.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7683"&gt;repr doesn't infinite loop&lt;/a&gt; on
  zero-sized structs (ie, unit structs).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7698"&gt;Type parameter pretty printing&lt;/a&gt;
  was fixed, it now prints the type name rather than &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;'b&lt;/code&gt; and
  soforth.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7631"&gt;&lt;code&gt;mut&lt;/code&gt; in default method arguments is now
  allowed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7645"&gt;IR for calls with immediate return
  values&lt;/a&gt; was improved.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7605"&gt;Exchange allocation headers (ie, the headers on &lt;code&gt;~T&lt;/code&gt;) were
  removed&lt;/a&gt;. This was a heroic
  effort by strcat and Luqman.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7456"&gt;&lt;code&gt;-Z trans-stats&lt;/code&gt; now reports perf-function
  statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7636"&gt;Scopes were decoupled from LLVM basic
  blocks&lt;/a&gt;, improving unoptimized
  builds, and allowing more things in optimized builds to be inlined.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7585"&gt;An infinite loop when recursively including
  modules&lt;/a&gt; was fixed.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://github.com/mozilla/rust/pull/7557"&gt;ICE involving struct-like enum
  variants&lt;/a&gt; was fixed.&lt;/li&gt;
&lt;li&gt;The buildsystem &lt;a href="https://github.com/mozilla/rust/pull/7637"&gt;cleans up old
  libraries&lt;/a&gt; when it needs to.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7615"&gt;A bunch of managed boxes&lt;/a&gt; were
  removed from the AST.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable library additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7775"&gt;&lt;code&gt;print!&lt;/code&gt; and &lt;code&gt;println!&lt;/code&gt; macros&lt;/a&gt;
  were added (though &lt;a href="https://github.com/mozilla/rust/issues/7779"&gt;#7779&lt;/a&gt;
  renames them).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7765"&gt;Ord now uses default methods&lt;/a&gt;,
  allowing you to get default implementations for everything but &lt;code&gt;lt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7730"&gt;&lt;code&gt;extra::Bitv&lt;/code&gt; now takes &lt;code&gt;&amp;amp;[bool]&lt;/code&gt; rather than
  &lt;code&gt;~[uint]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7728"&gt;x64 now uses large stacks (4 MiB) by
  default&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7696"&gt;&lt;code&gt;is_utf8&lt;/code&gt; is now 22% faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7623"&gt;Metrics reporting and
  ratcheting&lt;/a&gt; was added to the test
  harness.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7707"&gt;DoubleEndedIterator&lt;/a&gt; was
  added.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7691"&gt;&lt;code&gt;mut_split&lt;/code&gt; method was added&lt;/a&gt;
  to partition a &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt; into two pieces.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/mozilla/rust/pull/7631"&gt;now have pointer arithmetic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7265"&gt;month's work of runtime work&lt;/a&gt;
  landed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7528"&gt;A safe, cross-platform &lt;code&gt;mmap&lt;/code&gt;
  wrapper&lt;/a&gt; was added.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7614"&gt;SmallIntMap and SmallIntSet have external
  iterators&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7608"&gt;JSON parsing got 93% faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7562"&gt;Deque&lt;/a&gt; got a good cleanup and
  speedup.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7602"&gt;vec now implements &lt;code&gt;pop_opt&lt;/code&gt; and &lt;code&gt;shift_opt&lt;/code&gt;
  methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/mozilla/rust/pull/7604"&gt;&lt;code&gt;peek_&lt;/code&gt; adaptor&lt;/a&gt; was added,
  which calls a closure on ever item before returning it. Mostly useful for
  debugging your iterators.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documentation etc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7742"&gt;vim&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/7665"&gt;improvements&lt;/a&gt; landed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7641"&gt;&lt;code&gt;po4a&lt;/code&gt; support for translation&lt;/a&gt;
  was added.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7690"&gt;&lt;code&gt;libc::c_void&lt;/code&gt; is better
  documented&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/rust/pull/7632"&gt;Man pages&lt;/a&gt; for all the tools are
  now included.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/mozilla/rust/pull/7736"&gt;iterator tutorial&lt;/a&gt; was
  extended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-09"&gt;Tuesday
meeting&lt;/a&gt; was
all about split stacks and FFI. It's complex and above my ability to
summarize, but from what I can tell no real consensus was made. But, it's the
best enumeration of all the various issues surrounding split stacks that I've
seen.&lt;/p&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;p&gt;From now on I'm going to just link to the reddit thread if there is one, as it
often has additional comments or insights.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/jmptable/5980297"&gt;A simple, self-contained example of using a shared
  library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1i3c15/experimental_actor_library_in_rust/"&gt;Experimental Actor
  Library (reddit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1i30sw/herb_sutter_describes_rust_c_questions_and/"&gt;Herb Sutter describes Rust
  (reddit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1i2y9e/philosophy_and_for_loops_more_from_go_and_rust/"&gt;Philosophy and "for" loops
  (reddit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1hy6l9/meetingweekly20130709_split_stacks_ffi/"&gt;Reddit thread about the weekly
  meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1hxp2s/little_bzip2_binding_library_as_well_as_a_bigger/"&gt;BZIP2 bindings
  (reddit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1hsqf5/proposal_for_an_additional_use_case_of_the_in/"&gt;Proposal for an additional use case of the "in" keyword besides for loops
  (reddit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1i6ykh/technical_qa_on_servo/"&gt;Technical Q&amp;amp;A on Servo
  (reddit)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 5</title><link href="http://this-week-in-rust.org/blog/2013/07/06/this-week-in-rust-5/" rel="alternate"></link><updated>2013-07-06T15:45:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-07-06:blog/2013/07/06/this-week-in-rust-5/</id><summary type="html">&lt;p&gt;Hello and welcome to the fifth issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly overview
of Rust and its community.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0.7&lt;/code&gt; was released this week. Hello to the newcomers! I've also decided to put
breaking changes first. Feel free to skip the rest, it's relatively
unimportant.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;Newcomers&lt;/h1&gt;
&lt;p&gt;There's already a lot of traffic from Rust newbies, so you get your own
section! Welcome to Rust. I wrote &lt;a href="http://cmr.github.io/blog/2013/07/05/the-state-of-rust/"&gt;The State of Rust
0.7&lt;/a&gt; especially for
newcomers, so you should read that. Jump on IRC if you have any questions or
need help. We're a quite friendly bunch, and we usually don't bite.&lt;/p&gt;
&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;Issue churn this week was +12. 35 PRs were merged, total PR churn was -8.
There continues to be a lot more cleanup than breaking changes, which is
encouraging! As I understand it, graydon wants to focus this release cycle on
cleanup, rather than language features. Hopefully the compiler can get into a
much better state.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dbaupp &lt;a href="https://github.com/mozilla/rust/pull/7487"&gt;continues&lt;/a&gt; to
  &lt;a href="https://github.com/mozilla/rust/pull/7566"&gt;slaughter&lt;/a&gt; the free functions in
  &lt;code&gt;std::vec&lt;/code&gt; where methods can replace them.&lt;/li&gt;
&lt;li&gt;He also &lt;a href="https://github.com/mozilla/rust/pull/7523"&gt;added a lint for lowercase
  statics&lt;/a&gt;, which is enabled by
  default because of an astoundingly poor error message.&lt;/li&gt;
&lt;li&gt;Seldaek &lt;a href="https://github.com/mozilla/rust/pull/7474"&gt;moved a bunch of iter
  stuff&lt;/a&gt; to &lt;code&gt;extra&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable compiler additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;doener &lt;a href="https://github.com/mozilla/rust/pull/7452"&gt;removed an extra layer of
  indirection&lt;/a&gt; that method calls incurred.&lt;/li&gt;
&lt;li&gt;Blei &lt;a href="https://github.com/mozilla/rust/pull/7457"&gt;fixed a codegen problem&lt;/a&gt;
  with structs containing &lt;code&gt;f32&lt;/code&gt; when used with FFI.&lt;/li&gt;
&lt;li&gt;I &lt;a href="https://github.com/mozilla/rust/pull/7468"&gt;propagated the great renaming&lt;/a&gt;
  throughout the rest of the codebase (besides compiletest, apparently).&lt;/li&gt;
&lt;li&gt;acrichto &lt;a href="https://github.com/mozilla/rust/pull/7465"&gt;rewrote some str code&lt;/a&gt;
  to avoid allocations.&lt;/li&gt;
&lt;li&gt;strcat is &lt;a href="https://github.com/mozilla/rust/pull/7495"&gt;removing&lt;/a&gt; headers
  from exchange allocs (see also
  &lt;a href="https://github.com/mozilla/rust/pull/7605"&gt;#7605&lt;/a&gt; and
  &lt;a href="https://github.com/mozilla/rust/pull/7521"&gt;#7521&lt;/a&gt;). They are entirely
  unused, they just need to be removed and the fallout fixed throughout the
  compiler.&lt;/li&gt;
&lt;li&gt;yjh0502 &lt;a href="https://github.com/mozilla/rust/pull/7443"&gt;fixed a bug&lt;/a&gt; that
  allowed duplicate struct fields (like &lt;code&gt;struct Foo {a: uint, a: uint}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;acrichto &lt;a href="https://github.com/mozilla/rust/pull/7409"&gt;turned on&lt;/a&gt; LLVM
  threading.&lt;/li&gt;
&lt;li&gt;Luqman &lt;a href="https://github.com/mozilla/rust/pull/7498"&gt;changed configure&lt;/a&gt; to
  require either wget &lt;em&gt;or&lt;/em&gt; curl.&lt;/li&gt;
&lt;li&gt;Dretch &lt;a href="https://github.com/mozilla/rust/pull/7510"&gt;improved the error
  message&lt;/a&gt; for implementing unknown
  traits to mention the trait name.&lt;/li&gt;
&lt;li&gt;sankha93 &lt;a href="https://github.com/mozilla/rust/pull/7531"&gt;improved the error
  message&lt;/a&gt; for trying to capture
  environment in a plain &lt;code&gt;fn&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;bblum &lt;a href="https://github.com/mozilla/rust/pull/7534"&gt;improved the error mssage&lt;/a&gt;
  for using a moved value, it now gives better suggestions than just &lt;code&gt;copy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;sanxiyn &lt;a href="https://github.com/mozilla/rust/pull/7543"&gt;fixed a bug&lt;/a&gt; where
  eligible newtype structs weren't marked as an immediate value (and thus not
  passed in registers when they could have been).&lt;/li&gt;
&lt;li&gt;Luqman &lt;a href="https://github.com/mozilla/rust/pull/7547"&gt;paved the way&lt;/a&gt; for 64-bit
  windows support.&lt;/li&gt;
&lt;li&gt;jensnockert &lt;a href="https://github.com/mozilla/rust/pull/7194"&gt;added byte swapping
  intrinsics&lt;/a&gt; that specialize
  per-platform, avoiding unnecessary operations.&lt;/li&gt;
&lt;li&gt;jld &lt;a href="https://github.com/mozilla/rust/pull/7554"&gt;removed an unused function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sully &lt;a href="https://github.com/mozilla/rust/pull/7545"&gt;fixed more default method bugs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable library additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sfackler &lt;a href="https://github.com/mozilla/rust/pull/7549"&gt;fixed up some
  documentation&lt;/a&gt; related to the
  drop/finalize renaming.&lt;/li&gt;
&lt;li&gt;acrichto &lt;a href="https://github.com/mozilla/rust/pull/7530"&gt;fixed a correctness
  bug&lt;/a&gt; in TreeMap's &lt;code&gt;Ord&lt;/code&gt;
  implementation.&lt;/li&gt;
&lt;li&gt;sfackler &lt;a href="https://github.com/mozilla/rust/pull/7513"&gt;much improved&lt;/a&gt; and
  genericized the base64 handling.&lt;/li&gt;
&lt;li&gt;graydon did a &lt;a href="https://github.com/mozilla/rust/pull/7518"&gt;bunch of cleanup&lt;/a&gt;
  in &lt;code&gt;extra::stats&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Seldaek &lt;a href="https://github.com/mozilla/rust/pull/7475"&gt;fixed a patological case with
  &lt;code&gt;str::each_split_within&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-07-02"&gt;Tuesday meeting&lt;/a&gt;
featured more discussion about &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;@mut&lt;/code&gt;, that was honestly over my head
(as most of the type system stuff is). If someone wants to write some more
here, feel free to email me (&lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#121;&amp;#43;&amp;#98;&amp;#108;&amp;#111;&amp;#103;&amp;#64;&amp;#111;&amp;#99;&amp;#116;&amp;#97;&amp;#121;&amp;#110;&amp;#46;&amp;#110;&amp;#101;&amp;#116;"&gt;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#121;&amp;#43;&amp;#98;&amp;#108;&amp;#111;&amp;#103;&amp;#64;&amp;#111;&amp;#99;&amp;#116;&amp;#97;&amp;#121;&amp;#110;&amp;#46;&amp;#110;&amp;#101;&amp;#116;&lt;/a&gt;) a paragraph or two. You
will get attribution, of course.&lt;/p&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cmr.github.io/blog/2013/07/05/the-state-of-rust/"&gt;The State of Rust 0.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.dlang.org/thread/kr2vpp$2jmf$1@digitalmars.com"&gt;"Rust switches to external iteration" (D forums)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-July/004686.html"&gt;Segmented stacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huonw.github.io/isrustfastyet/mem/"&gt;Is Rust Slim Yet? (Is Rust Fast Yet v2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joshldavis.com/rust-design-patterns/"&gt;Rust Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://joshldavis.com/2013/07/01/program-to-an-interface-fool/"&gt;Program to an Interface, Fool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1hg88c/i_think_i_would_take_that_for_rust_when_its_done/"&gt;Would You Bet $100,000,000 on [Rust]?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/06/28/Status-Update-3.html"&gt;mw's third status report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 4</title><link href="http://this-week-in-rust.org/blog/2013/06/29/this-week-in-rust-4/" rel="alternate"></link><updated>2013-06-29T12:26:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-06-29:blog/2013/06/29/this-week-in-rust-4/</id><summary type="html">&lt;p&gt;Hello and welcome to the fourth issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly overview of Rust and its community.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0.7&lt;/code&gt; is being cut soon (today, I think). There are preliminary release notes &lt;a href="https://github.com/mozilla/rust/blob/master/RELEASES.txt"&gt;on
GitHub&lt;/a&gt;. The tree has been quite calm, with regards to
breakage. Cycle time is still high, but at least when things land they don't break master.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking on master?&lt;/h1&gt;
&lt;p&gt;Issue churn this week was -1. Yay! Issue churn this month was -47. 61 people pushed 1,080 commits, changing 2,117 files
and adding a total of 53347 lines.  The top 10 committers were pcwalton, brson, dbaupp, strcat, bblum, nmatsakis,
acricto, Blei, me (cmr), and aatch.&lt;/p&gt;
&lt;p&gt;Much of the work this week was cleanup or rebases of older PRs that just hadn't made it in yet.&lt;/p&gt;
&lt;h2&gt;Notable additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Eridius has finished (I think!) the last bit of UNIX &lt;a href="https://github.com/mozilla/rust/pull/7436"&gt;terminal support&lt;/a&gt;,
  adding fallback and smarter detection. It should work in 8-color terminals now too.&lt;/li&gt;
&lt;li&gt;pcwalton &lt;a href="https://github.com/mozilla/rust/pull/7451"&gt;rewrote each_path&lt;/a&gt;, with the goal of future performance
  enhancements.&lt;/li&gt;
&lt;li&gt;tjc has done a &lt;a href="https://github.com/mozilla/rust/pull/7397"&gt;bunch&lt;/a&gt; of
  &lt;a href="https://github.com/mozilla/rust/pull/7403"&gt;rustpkg&lt;/a&gt; work.&lt;/li&gt;
&lt;li&gt;aatch did some &lt;a href="https://github.com/mozilla/rust/pull/7272"&gt;trans cleanup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;gifnksm added &lt;a href="https://github.com/mozilla/rust/pull/7414"&gt;&lt;code&gt;max_by&lt;/code&gt; and &lt;code&gt;min_by&lt;/code&gt;&lt;/a&gt; methods to &lt;code&gt;IteratorUtil&lt;/code&gt; for getting
  the largest/smallest value in an iterator given a score function.&lt;/li&gt;
&lt;li&gt;brson got a fix that &lt;a href="https://github.com/mozilla/rust/pull/7111"&gt;releases large stacks&lt;/a&gt; after they are used to lower
  memory usage.&lt;/li&gt;
&lt;li&gt;mw has a bunch of &lt;a href="https://github.com/mozilla/rust/pull/7432"&gt;debuginfo&lt;/a&gt; work, as well as &lt;a href="https://github.com/mozilla/rust/pull/7255"&gt;docs and
  cleanup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Blei did an &lt;a href="https://github.com/mozilla/rust/pull/7254"&gt;intrinsic overhaul&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;acrichto implemented &lt;a href="https://github.com/mozilla/rust/pull/7291"&gt;&lt;code&gt;static mut&lt;/code&gt;&lt;/a&gt;, for globals. Using them requires
  unsafe code.&lt;/li&gt;
&lt;li&gt;DaGenix &lt;a href="https://github.com/mozilla/rust/pull/7207"&gt;cleaned up and extended&lt;/a&gt; the SHA code.&lt;/li&gt;
&lt;li&gt;acrichto renamed &lt;code&gt;.rc&lt;/code&gt; files to &lt;code&gt;.rs&lt;/code&gt;. &lt;code&gt;.rc&lt;/code&gt; is deprecated and functionally equivalent to &lt;code&gt;.rs&lt;/code&gt;, all new code should
  use it. He also &lt;a href="https://github.com/mozilla/rust/pull/7371"&gt;added&lt;/a&gt; a &lt;code&gt;warnings&lt;/code&gt; lint attribute for enabling/disabling
  warnings in bulk.&lt;/li&gt;
&lt;li&gt;indutny added &lt;a href="https://github.com/mozilla/rust/pull/7257"&gt;&lt;code&gt;mman&lt;/code&gt; (including &lt;code&gt;mmap&lt;/code&gt;)&lt;/a&gt; FFI.&lt;/li&gt;
&lt;li&gt;dbaupp found a &lt;a href="https://github.com/mozilla/rust/pull/7297"&gt;curious performance win&lt;/a&gt; by changing some ordering around,
  while also enabling conditionally defined macros and macro expansion to items with &lt;code&gt;#[cfg]&lt;/code&gt; attributes.&lt;/li&gt;
&lt;li&gt;Luqman &lt;a href="https://github.com/mozilla/rust/pull/7410"&gt;fixed by-value self&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;acrichto expanded the &lt;code&gt;deriving(ToStr)&lt;/code&gt; code to use &lt;code&gt;ToStr&lt;/code&gt; on fields rather than using &lt;code&gt;fmt!("%?", x)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Blei &lt;a href="https://github.com/mozilla/rust/pull/7214"&gt;fixed a lot of problems&lt;/a&gt; with owned trait objects (&lt;code&gt;~Trait&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;sully has &lt;a href="https://github.com/mozilla/rust/pull/7471"&gt;landed some default method fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Breaking Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;As usual, &lt;a href="https://github.com/mozilla/rust/pull/7274"&gt;a&lt;/a&gt; &lt;a href="https://github.com/mozilla/rust/pull/7334"&gt;bunch&lt;/a&gt;
  &lt;a href="https://github.com/mozilla/rust/pull/7373"&gt;of&lt;/a&gt; &lt;a href="https://github.com/mozilla/rust/pull/7319"&gt;iterator&lt;/a&gt; work.&lt;/li&gt;
&lt;li&gt;pcwalton renamed Owned to Send and Const to Freeze, better reflecting their actual semantics.&lt;/li&gt;
&lt;li&gt;He also disallowed &lt;code&gt;mut&lt;/code&gt; from distributing over bindings. For example, the following code no longer works: &lt;code&gt;let mut
  (a, b) = (c, d)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;dbaupp &lt;a href="https://github.com/mozilla/rust/pull/7430"&gt;converted&lt;/a&gt; many vector functions to methods. He has a &lt;a href="https://github.com/mozilla/rust/pull/7487"&gt;second
  part&lt;/a&gt; in line.&lt;/li&gt;
&lt;li&gt;Luqman renamed the &lt;code&gt;finalize&lt;/code&gt; method in the &lt;code&gt;Drop&lt;/code&gt; trait to &lt;code&gt;drop&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other changes&lt;/h2&gt;
&lt;p&gt;bblum did some trait/fn/closure bounds
&lt;a href="https://github.com/mozilla/rust/pull/7314"&gt;here&lt;/a&gt; and
&lt;a href="https://github.com/mozilla/rust/pull/7354"&gt;here&lt;/a&gt;, but I don't really
understand what they do or their significance. He said:&lt;/p&gt;
&lt;p&gt;{% blockquote %}
it changes the way traits/closures and captured data fulfill kind bounds, so
you can restrict or loosen the requirements instead of having the fixed
defaults of "can only capture Send things in ~fn/~Trait"&lt;/p&gt;
&lt;p&gt;one example is that you can add the extra requirement of Freeze, so you can
put existential data inside of ARCs&lt;/p&gt;
&lt;p&gt;see https://github.com/mozilla/rust/blob/master/src/test/run-pass/trait-bounds-in-arc.rs&lt;/p&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/
is another, more complicated but less contrived, example for how they would be
useful&lt;/p&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-25"&gt;Tuesday meeting&lt;/a&gt;
mainly discussed &lt;code&gt;@mut&lt;/code&gt; and iterators, as well as some minor 0.7 releng stuff.
I suggest reading the &lt;code&gt;@mut&lt;/code&gt; discussion yourself, but essentially it revolves
around it not quite fitting into the language, and that it could be easily
punted to a library. The iterator discussion was not notable.&lt;/p&gt;
&lt;h1&gt;Discussion + Blog posts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://static.rust-lang.org/doc/tutorial-container.html"&gt;New container/iterator tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/4528"&gt;"Language support for external iterators"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://spin.atomicobject.com/2013/06/25/rust-language/"&gt;"Rust gets a lot of things right"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1ha3yi/planning_a_project_in_rust/"&gt;"Planning a project in rust?"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004572.html"&gt;"Memory layout of types"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michaelwoerister.github.io/2013/06/28/Status-Update-2.html"&gt;mw's second status report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;External projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;QuickCheck for Rust.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/blake2-ppc/qc.rs"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1h0217/mockup_of_quickcheck/"&gt;Reddit discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RustGnuplot (&lt;a href="https://github.com/SiegeLord/RustGnuplot"&gt;GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week in Rust 3</title><link href="http://this-week-in-rust.org/blog/2013/06/22/this-week-in-rust-3/" rel="alternate"></link><updated>2013-06-22T05:21:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-06-22:blog/2013/06/22/this-week-in-rust-3/</id><summary type="html">&lt;p&gt;Hello and welcome to the third issue of &lt;em&gt;This Week in Rust&lt;/em&gt;, a weekly overview
of Rust and its community.&lt;/p&gt;
&lt;p&gt;It has come to my attention that Github does not categorize some
merged-by-bors pull requests as "merged" and instead categorizes it as
"closed". This skews the numbers and also the PRs that I looked through for
inclusion into twir. I'll no longer be including issue churn/PR numbers, and I
hope I didn't miss any import PRs in the last two issues.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in incoming?&lt;/h1&gt;
&lt;p&gt;The last of the tree breakage has been cleaned up. The mysterious stack
corruption was traced down by Blei to occur in jemalloc. It has been disabled
until the real cause of the error is found. A bunch more buildbot
configurations have been turned on for auto, to fend off more breakage. The
tree is open, and aatch got out a new snapshot!&lt;/p&gt;
&lt;p&gt;Most of the work this week is cleanup and preparation for 0.7, but since the
tree has been closed (and the extra auto buildbots lengthen the time it takes
for a PR to be tested for the day it has been open), not much has landed these
past few days, but a bunch happened earlier this week.&lt;/p&gt;
&lt;h2&gt;Notable additions, bugfixes, and cleanup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;doener made compiles faster by emitting less useless copies and allocations
  in &lt;a href="https://github.com/mozilla/rust/pull/7259"&gt;7259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;aatch landed &lt;a href="https://github.com/mozilla/rust/pull/7124"&gt;part 1&lt;/a&gt; and &lt;a href="https://github.com/mozilla/rust/pull/7182"&gt;part
  2&lt;/a&gt; of his huge trans refactor
  effort, which make trans faster and less terrible.&lt;/li&gt;
&lt;li&gt;sully got &lt;a href="https://github.com/mozilla/rust/pull/7203"&gt;default methods&lt;/a&gt;
  less broken&lt;/li&gt;
&lt;li&gt;yichoi landed a &lt;a href="https://github.com/mozilla/rust/pull/7128"&gt;bunch&lt;/a&gt; of
  Android fixes.&lt;/li&gt;
&lt;li&gt;vadimcn has &lt;a href="https://github.com/mozilla/rust/pull/7134"&gt;fixed debuginfo&lt;/a&gt;,
  which is super amazing. This makes it a lot easier for the GSoC student (mw)
  to get started.&lt;/li&gt;
&lt;li&gt;doener has &lt;a href="https://github.com/mozilla/rust/pull/7186"&gt;fixed&lt;/a&gt; some
  pathological behavior in how codegen creates cleanup blocks. This makes the
  IR better, reducing compile time, and also allowing better optimization,
  reducing binary size.&lt;/li&gt;
&lt;/ul&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote @dotdash https://github.com/mozilla/rust/pull/7259 %}
They reduce compile times by about 10% in total.&lt;/p&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote @dotdash https://github.com/mozilla/rust/pull/7186 %}
Reduces the size of librustc by about 5% and the time required to build
it by about 10%.&lt;/p&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote @dotdash https://github.com/mozilla/rust/pull/7154 %}
The resulting code for rustc is about 13% faster (measured up to and
including the "trans" pass) and the resulting librustc is about 5%
smaller.&lt;/p&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;strcat &lt;a href="https://github.com/mozilla/rust/pull/7263"&gt;continues&lt;/a&gt;
&lt;a href="https://github.com/mozilla/rust/pull/7162"&gt;work&lt;/a&gt; with iterators. The changes
that landed are vector cleanups. Probably most importantly, the &lt;code&gt;each&lt;/code&gt; and
&lt;code&gt;eachi&lt;/code&gt; methods are being removed. The &lt;code&gt;eachi&lt;/code&gt; removal landed but the &lt;code&gt;each&lt;/code&gt;
one broke bors, so it's currently in limbo (&lt;strong&gt;UPDATE&lt;/strong&gt; 6/23/2013: it landed).
The current replacement is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// each&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;your_vec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// eachi&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;your_vec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the rest of the iterator work is hashed out and lands, it will just be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// each&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;your_vec&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// eachi&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;your_vec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;although the syntax might be slightly different (&lt;code&gt;for element in your_vec&lt;/code&gt; is
my favorite proposal).&lt;/p&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-18"&gt;Tuesday
meeting's&lt;/a&gt;
main topics were once fn's and how namespaces work. For once fn's, graydon
says "I'm concerned with adding new features and I want to see if we can live
without it, I understand it is common," not yet making a decision to include
them in the language.&lt;/p&gt;
&lt;h1&gt;Meetups&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;tjc's pre-talk and talk, "Rust: A Friendly Introduction" went very well. The
  &lt;a href="http://catamorphism.org/Writing/Rust-Tutorial-tjc.pdf"&gt;slides&lt;/a&gt; are up, and
  a recording is coming soon (hopefuly). tjc says the slides aren't as
  understanable without the audio of the talk.&lt;/li&gt;
&lt;li&gt;nmatsakis has expressed willingness/interest in a Boston meetup sometime. If
  you're interested, contact him on IRC or the ML.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Notable discourse and external projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://maniagnosis.crsr.net/2013/06/mmap-and-rust-foreign-function-interface.html"&gt;mmap and the Rust FFI&lt;/a&gt;
  (indutny is working on mman bindings in libc, for the record. will mention
  in next week's twir when it lands)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004480.html"&gt;code generation and rustc speed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1gs93k/rust_for_game_development/"&gt;Rust for game development?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1grj61/feed_us_some_low_hanging_fruit/"&gt;Feed us some low hanging fruit!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aatch.github.io/blog/2013/06/19/paying-technical-debt-in-rustc/"&gt;Paying Technical Debt in rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1gpbcs/what_issues_in_rust_today_effect_you_most/"&gt;What issues in Rust today effect (sic) you most?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004520.html"&gt;rustdoc rewrite and redesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/rust/comments/1gmac5/linux_rustbench_a_tool_for_profiling_memory_usage/"&gt;rust-bench: a tool for profiling memory usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Other announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Michael Woerister (mw), the GSoC student working on debug info, has begun
  work. His &lt;a href="http://michaelwoerister.github.io/"&gt;project log&lt;/a&gt; will be updated
  weekly. I'm looking forward to a much better debug experience.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>This Week In Rust 2</title><link href="http://this-week-in-rust.org/blog/2013/06/15/this-week-in-rust-2/" rel="alternate"></link><updated>2013-06-15T22:00:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-06-15:blog/2013/06/15/this-week-in-rust-2/</id><summary type="html">&lt;p&gt;Hello and welcome to the second issue of &lt;em&gt;This Week In Rust&lt;/em&gt;, a weekly overview
of Rust and its community. I'll be covering what's cooking in incoming,
meeting summaries, meetups, and anything else pertinent.&lt;/p&gt;
&lt;p&gt;I've decided to stop using real names and use irc/github names, simply because
that is how I, and most everyone, interacts in the community.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in incoming?&lt;/h1&gt;
&lt;p&gt;There's been a lot of breakage on incoming this week, with jemalloc breaking
32bit cross-compilation as well as random segfaults and stack corruption of
unknown cause.  Some heroics by the core devs have got it mostly cleaned up,
though the tree is still rather chaotic. Meanwhile a handful of performance
improvements have landed, and achricto rewrote &lt;code&gt;rusti&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There were 17 pull requests merged this week. Total issue churn (excludes pull
requests) this week was +2 (this excludes the 38 pull requests that were
closed when incoming was killed).&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;incoming&lt;/code&gt; branch annihilated&lt;/h2&gt;
&lt;p&gt;Goodbye &lt;code&gt;incoming&lt;/code&gt;, hello &lt;code&gt;master&lt;/code&gt;! This change, long in coming, unfortunately
closed all open PRs. Start doing your development against &lt;code&gt;master&lt;/code&gt; rather than
incoming.&lt;/p&gt;
&lt;h2&gt;Notable additions, bugfixes, and cleanups&lt;/h2&gt;
&lt;p&gt;There's a concerted effort to remove duplicate freestanding functions where
possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href="https://github.com/mozilla/rust/pull/6986"&gt;6986&lt;/a&gt; bjz and jensnockert have cleaned up the numeric code some
  more, adding methods for existing things like &lt;code&gt;sin&lt;/code&gt;, as well as adding a
  bunch of interpolation stuff.&lt;/li&gt;
&lt;li&gt;steven_is_false added prototype dynamic library loading support in
  &lt;a href="https://github.com/mozilla/rust/pull/7027"&gt;7027&lt;/a&gt;, which should remove a lot of pain for people looking for
  easy dynamic loading. It currently doesn't work on Windows, so if you can
  sling Windows code, help would be appreciated!&lt;/li&gt;
&lt;li&gt;In &lt;a href="https://github.com/mozilla/rust/pull/7029"&gt;7029&lt;/a&gt; luqmana allows having multiple impl's add static methods,
  which previously did not work.&lt;/li&gt;
&lt;li&gt;Eridius stepped up to &lt;a href="https://github.com/mozilla/rust/pull/7133"&gt;fix the terminfo code&lt;/a&gt;, colors should be
  arriving to more people soon.&lt;/li&gt;
&lt;li&gt;SiegeLord &lt;a href="https://github.com/mozilla/rust/pull/7077"&gt;improved the CSS&lt;/a&gt; used by rustdoc with &lt;em&gt;huge&lt;/em&gt; improvements.&lt;/li&gt;
&lt;li&gt;sully has gotten default methods working for the most part, he is still
  testing cross-crate edge casses.&lt;/li&gt;
&lt;li&gt;vadimcn &lt;a href="https://github.com/mozilla/rust/pull/7134"&gt;has fixed debuginfo&lt;/a&gt;, and supposedly the GSoC intern is
  getting started on improving it next week.&lt;/li&gt;
&lt;li&gt;doener has got &lt;a href="https://github.com/mozilla/rust/pull/7154"&gt;some nice&lt;/a&gt; &lt;a href="https://github.com/mozilla/rust/pull/7144"&gt;performance&lt;/a&gt; PRs in place.&lt;/li&gt;
&lt;li&gt;aatch is working on &lt;a href="https://github.com/mozilla/rust/pull/7124"&gt;cleaning up trans&lt;/a&gt;. Huge thanks to him!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dbaupp and strcat continue their cleanup of the standard library, removing
  the ad-hoc iterator functions where &lt;code&gt;std::iterator&lt;/code&gt; can replace them.&lt;/li&gt;
&lt;li&gt;All of the string functions that could be reasonably converted to methods
  have been.&lt;/li&gt;
&lt;li&gt;If you're working in the stdlib, acrichto has toggled most of the lint
  settings to "deny" for std/extra, so watch out.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-11"&gt;Tuesday meeting&lt;/a&gt; talked about bblum's &lt;a href="https://github.com/mozilla/rust/wiki/Proposal-for-effects"&gt;Effect proposal&lt;/a&gt;,
removing the master/incoming split, and "alloc expressions", a replacement for
@-sigils.&lt;/p&gt;
&lt;p&gt;The consensus on the effect proposal is that it needs investigation and
wouldn't be landing in 1.0.&lt;/p&gt;
&lt;p&gt;Discussion about master/incoming mostly centered on "master isn't always
green, how can we add better coverage to bors' tests?" Consensus seems to be
that removing incoming would be beneficial, but enabling more OS and valgrind
coverage on bors would harmfully impact development speed.&lt;/p&gt;
&lt;p&gt;The proposed syntax for alloc expressions is &lt;code&gt;new (provider) expr&lt;/code&gt;, with &lt;code&gt;new
expr&lt;/code&gt; becoming the replacement for the current &lt;code&gt;~expr&lt;/code&gt;. This would allow
custom smart pointers. pcwalton ended the meeting with a huge cliff hanger&lt;/p&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote %}
I've been meaning to talk a little bit today about simplifying the
mut-borrowing story in regards to this, we may be able to effect a large
simplification on the language&lt;/p&gt;
&lt;p&gt;Personally, I think &lt;a href="https://gist.github.com/Kimundi/5744578"&gt;kimundi's proposal&lt;/a&gt; has a lot of promise, and the
syntax is more pleasing to me. It wasn't brought up at the meeting, though.&lt;/p&gt;
&lt;h1&gt;Meetups&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The Mountain View meetup was a great success. 18 showed up. erickt is
  planning for another SF Bay area meetup in July. If you want to give a
  presentation, send him your proposal and how long you need to put it
  together.&lt;/li&gt;
&lt;li&gt;Tim Chevalier will be giving a talk titled "Rust: A Friendly Introduction"
  on Monday, June 17, 6-9pm in Portland. See &lt;a href="http://calagator.org/events/1250464376"&gt;Calagator&lt;/a&gt; for more
  details. This is a preview of a talk he will be giving at &lt;a href="http://opensourcebridge.org/sessions/970"&gt;Open Source
  Bridge&lt;/a&gt;, also in Portland.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Notable discourse&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Still more discussion about &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html"&gt;iterators&lt;/a&gt;, this time focusing around
  &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004465.html"&gt;changing the semantics&lt;/a&gt; of the &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;li&gt;Some discussion about &lt;a href="http://www.reddit.com/r/rust/comments/1gag3t/list_comprehensions_in_rust_iterator/"&gt;list comprehensions&lt;/a&gt;, including initial
  proofs-of-concept.&lt;/li&gt;
&lt;li&gt;Graydon explains hashing and versioning
  https://botbot.me/mozilla/rust/msg/3792753/&lt;/li&gt;
&lt;li&gt;Principal author of 0install evaluates rust among other languages as a
  python replacement
  http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/&lt;/li&gt;
&lt;li&gt;Niko thinks about parallelism
  http://smallcultfollowing.com/babysteps/blog/2013/06/11/data-parallelism-in-rust/&lt;/li&gt;
&lt;li&gt;http://smallcultfollowing.com/babysteps/blog/2013/06/11/on-the-connection-between-memory-management-and-data-race-freedom/&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Other announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;bjz tells me lmath is &lt;em&gt;actually&lt;/em&gt; fixed now, and is usable&lt;/li&gt;
&lt;/ul&gt;</summary><category term="this-week-in-rust"></category><category term="programming"></category></entry><entry><title>This Week In Rust 1</title><link href="http://this-week-in-rust.org/blog/2013/06/07/this-week-in-rust-1/" rel="alternate"></link><updated>2013-06-07T18:46:00-04:00</updated><author><name>Corey Richardson</name></author><id>tag:this-week-in-rust.org,2013-06-07:blog/2013/06/07/this-week-in-rust-1/</id><summary type="html">&lt;p&gt;Hello and welcome to the first issue of &lt;em&gt;This Week In Rust&lt;/em&gt;, a weekly overview
of Rust and its community. I'll be covering what's cooking in incoming,
meeting summaries, meetups, and anything else pertinent. Any ideas, email them
to me, &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#121;&amp;#43;&amp;#114;&amp;#117;&amp;#115;&amp;#116;&amp;#64;&amp;#111;&amp;#99;&amp;#116;&amp;#97;&amp;#121;&amp;#110;&amp;#46;&amp;#110;&amp;#101;&amp;#116;"&gt;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#121;&amp;#43;&amp;#114;&amp;#117;&amp;#115;&amp;#116;&amp;#64;&amp;#111;&amp;#99;&amp;#116;&amp;#97;&amp;#121;&amp;#110;&amp;#46;&amp;#110;&amp;#101;&amp;#116;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Rust interns arrived this week and have got cracking right away. Big hello
to Aaron Todd, Ben Blum, and Michael Sullivan! We can look forward to work all
over the place, especially in the RT and debug-info.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h1&gt;What's cooking in incoming?&lt;/h1&gt;
&lt;p&gt;There were 30 pull requests merged this week. A scattering of doc fixes and a
bunch of code cleanups and optimization work as usual. Total issue churn
(excludes pull requests) this week was +6.&lt;/p&gt;
&lt;h2&gt;Notable additions, bugfixes, and cleanups&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ben Striegel added the &lt;code&gt;as_c_str&lt;/code&gt; string function as a method as part of the
  overall methodization covered by &lt;a href="https://github.com/mozilla/rust/issues/6045"&gt;6045&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;James Miller landed a much better optimization pipeline in &lt;a href="https://github.com/mozilla/rust/pull/6881"&gt;6881&lt;/a&gt;,
  fixing a bunch of nascent optimization problems, especially with inlining,
  and also fixing an earlier (huge) regression (that he introduced,
  admittedly).&lt;/li&gt;
&lt;li&gt;James also fixed &lt;a href="https://github.com/mozilla/rust/issues/6977"&gt;6977&lt;/a&gt;, which allowed nonsensical expressions like &lt;code&gt;[0,
  ..-1]&lt;/code&gt;. Whoops!&lt;/li&gt;
&lt;li&gt;I introduced terminfo handling to &lt;code&gt;extra::term&lt;/code&gt; in &lt;a href="https://github.com/mozilla/rust/pull/6826"&gt;6826&lt;/a&gt;, bringing
  rustc's beautiful colors to a wider audience.  Unfortunately, it isn't
  complete yet and, most notably, does not handle &lt;code&gt;xterm-256color&lt;/code&gt; correctly
  yet.&lt;/li&gt;
&lt;li&gt;Daniel Micay landed jemalloc as the default allocator in the runtime,
  leading to nice allocation performance boosts on all platforms, as well as
  much improved multithreaded performance. It also has the benefit of
  cross-platform tuning and instrumentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;It would be silly not to mention these changes, even though they weren't
strictly this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libcore&lt;/code&gt; was renamed to &lt;code&gt;libstd&lt;/code&gt; and &lt;code&gt;libstd&lt;/code&gt; was renamed to &lt;code&gt;libextra&lt;/code&gt;, to
  better reflect their purpose. Confusingly, the code in rustc still uses the
  old names. Something to watch out for!&lt;/li&gt;
&lt;li&gt;All of the module reexports were removed from the prelude, so if you use,
  for example, &lt;code&gt;io::foo&lt;/code&gt;, &lt;code&gt;vec::foo&lt;/code&gt;, etc, you will find yourself having to
  add a lot of extra imports. &lt;code&gt;use std::*&lt;/code&gt; to regain the old behavior,
  more or less.&lt;/li&gt;
&lt;li&gt;Patrick fixed the unsafe checker to safe code can no longer call unsafe
  methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pub impl&lt;/code&gt; was removed by Patrick Walton as part of &lt;a href="https://github.com/mozilla/rust/pull/6944"&gt;6944&lt;/a&gt;. What
  this did was have all &lt;code&gt;fn&lt;/code&gt;s in a &lt;code&gt;pub impl&lt;/code&gt; be &lt;code&gt;pub&lt;/code&gt; by default. Now, you
  must explicitly specify &lt;code&gt;pub&lt;/code&gt; on all &lt;code&gt;fn&lt;/code&gt;s in the impl if you want them
  public.&lt;/li&gt;
&lt;li&gt;Also in &lt;a href="https://github.com/mozilla/rust/pull/6944"&gt;6944&lt;/a&gt;, Patrick removed the ability to have multiple
  patterns appear in "let" declarations. For example: &lt;code&gt;let a = 4, b = 2;&lt;/code&gt;
  becomes &lt;code&gt;let (a, b) = (4, 2);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Daniel renamed the &lt;code&gt;Ptr&lt;/code&gt; trait to &lt;code&gt;RawPtr&lt;/code&gt; in &lt;a href="https://github.com/mozilla/rust/pull/6913"&gt;6913&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Daniel and Huon Wilson have been working on iterators a lot. In
  &lt;a href="https://github.com/mozilla/rust/pull/6999"&gt;6999&lt;/a&gt;, they start removing the &lt;code&gt;vec::each_*&lt;/code&gt; functions, as the new
  iterator code in &lt;code&gt;std::iterator&lt;/code&gt; is now mature enough for use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Meetings&lt;/h1&gt;
&lt;p&gt;There were two main meetings this week. Mostly discussion about DST, closures,
and the GC. Lots of issues and details remain to be worked out, I suspoect it
will still be a bit before anything final-looking comes up in a PR. See the
&lt;a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2013-06-04"&gt;meeting&lt;/a&gt; &lt;a href="https://github.com/mozilla/rust/wiki/Meeting-2013-06-07"&gt;notes&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h1&gt;Meetups&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Erick Tryzelaar has a meetup planned in Mountain View on Wednesday, June 12,
  at 7pm. See the &lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004356.html"&gt;ML thread&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;Tim Chevalier will be giving a talk titled "Rust: A Friendly Introduction"
  on Monday, June 17, 6-9pm in Portland. See &lt;a href="http://calagator.org/events/1250464376"&gt;Calagator&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Prominent blog posts and ML threads&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html"&gt;https://mail.mozilla.org/pipermail/rust-dev/2013-June/004364.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/"&gt;http://blog.pnkfx.org/blog/2013/06/07/detective-work-on-rust-closures/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/"&gt;http://smallcultfollowing.com/babysteps/blog/2013/06/03/more-on-fns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/"&gt;http://smallcultfollowing.com/babysteps/blog/2013/06/06/reducing-dst-annotation/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pcwalton.github.io/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/"&gt;http://pcwalton.github.io/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Other announcements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;10gen has some interns working on a MongoDB driver for Rust, which will be
  very nice to have. Good luck to them!&lt;/li&gt;
&lt;li&gt;Brendan Zabarauskas has fixed &lt;code&gt;lmath&lt;/code&gt;. It now works on incoming. Yay!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Brendan sent in a correction:&lt;/p&gt;
&lt;p _="%" endblockquote="endblockquote"&gt;{% blockquote %}
Unfortunately whilst it builds on incoming, due to a bug you can't use it in
external crates. moonchrome and I am are working on fixing this but it will
require us to remove the trait heirachy and use macros to generate each type
(Vec3f, Vec3f32, ... etc.) individually instead. Integer and Boolean vector
types (present in GLSL) will also be removed.&lt;/p&gt;</summary><category term="this-week-in-rust"></category><category term="rust"></category><category term="programming"></category></entry></feed>